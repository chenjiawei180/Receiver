C51 COMPILER V9.00   USART                                                                 11/06/2015 14:30:43 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN usart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\usart.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.
                    -\usart.lst) OBJECT(usart.obj)

line level    source

   1          /***********************************************************
   2          **************************************************************/
   3          #include "usart.h"
   4          bit busy;
   5          uint8_t usart2_enable = 0;
   6          uint8_t usart2_data[4] = { 0, 0, 0,'\0' };
   7          uint8_t usart2_num = 0;
   8          uint8_t usart2_right = 0;
   9          uint8_t usart2_begin = 0;
  10          static const unsigned char* OKSPI = "OKSPI";
  11          static const unsigned char* SPIOK = "SPIOK";
  12          static const unsigned char* SPI = "SPI";
  13          /*----------------------------
  14          UART 中断服务程序
  15          -----------------------------*/
  16          void Uart() interrupt 4 using 1
  17          {
  18   1              unsigned char temp=0;
  19   1          if (RI)
  20   1          {
  21   2              RI = 0;                 //清除RI位
  22   2                //  computer_send_data_to_mcu();
  23   2            //  P0 = SBUF;              //P0显示串口数据
  24   2            //  P22 = RB8;              //P2.2显示校验位
  25   2          }
  26   1          if (TI)
  27   1          {
  28   2              TI = 0;                 //清除TI位
  29   2              busy = 0;               //清忙标志
  30   2          }
  31   1      }
  32          
  33          /*----------------------------
  34          UART2 中断服务程序
  35          -----------------------------*/
  36          void Uart2() interrupt 8 using 1
  37          {
  38   1              uint8_t temp=0;
  39   1              if (S2CON & S2RI)
  40   1              {
  41   2                      S2CON &= ~S2RI;         //清除S2RI位
  42   2                      temp = S2BUF;
  43   2                      if (usart2_enable == 1 )
  44   2                      {
  45   3                              if (usart2_begin == 1)
  46   3                              {
  47   4                                      usart2_data[usart2_num++] = temp;
  48   4                              }
  49   3      
  50   3                              if (temp == 'S'  &&  usart2_begin == 0)
  51   3                              {
  52   4                                      usart2_begin = 1;
  53   4                                      usart2_num = 1;
  54   4                                      usart2_data[0] = temp;
C51 COMPILER V9.00   USART                                                                 11/06/2015 14:30:43 PAGE 2   

  55   4                              }
  56   3                      }
  57   2                      if (usart2_num == 3)
  58   2                      {
  59   3                              usart2_enable = 0;
  60   3                              usart2_begin = 0;
  61   3                              if (strcmp(usart2_data, SPI) == 0)
  62   3                              {
  63   4                                      usart2_right = 1;
  64   4                              }
  65   3                      }
  66   2      
  67   2                      //P0 = S2BUF;             //P0显示串口数据
  68   2                      //P2 = (S2CON & S2RB8);   //P2.2显示校验位
  69   2              }
  70   1              if (S2CON & S2TI)
  71   1              {
  72   2                      S2CON &= ~S2TI;         //清除S2TI位
  73   2                      busy = 0;               //清忙标志
  74   2              }
  75   1      }
  76          
  77          /*----------------------------
  78          发送串口数据with 8 bits
  79          ----------------------------*/
  80          void Usart1_SendData(BYTE dat)
  81          {
  82   1          while (busy);               //等待前面的数据发送完成
  83   1          ACC = dat;                  //获取校验位P (PSW.0)
  84   1          if (P)                      //根据P来设置校验位
  85   1          {
  86   2      #if (PARITYBIT == ODD_PARITY)
                      TB8 = 0;                //设置校验位为0
              #elif (PARITYBIT == EVEN_PARITY)
                      TB8 = 1;                //设置校验位为1
              #endif
  91   2          }
  92   1          else
  93   1          {
  94   2      #if (PARITYBIT == ODD_PARITY)
                      TB8 = 1;                //设置校验位为1
              #elif (PARITYBIT == EVEN_PARITY)
                      TB8 = 0;                //设置校验位为0
              #endif
  99   2          }
 100   1          busy = 1;
 101   1          SBUF = ACC;                 //写数据到UART数据寄存器
 102   1      }
 103          
 104          /*----------------------------
 105          发送字符串
 106          ----------------------------*/
 107          void Usart1_SendString(char *s)
 108          {
 109   1          while (*s)                  //检测字符串结束标志
 110   1          {
 111   2                      Usart1_SendData(*s++);         //发送当前字符
 112   2          }
 113   1      }
 114          
 115          /*----------------------------
 116          发送串口数据
C51 COMPILER V9.00   USART                                                                 11/06/2015 14:30:43 PAGE 3   

 117          ----------------------------*/
 118          void Usart2_SendData(BYTE dat)
 119          {
 120   1              while (busy);               //等待前面的数据发送完成
 121   1              ACC = dat;                  //获取校验位P (PSW.0)
 122   1              if (P)                      //根据P来设置校验位
 123   1              {
 124   2      #if (PARITYBIT == ODD_PARITY)
                              S2CON &= ~S2TB8;        //设置校验位为0
              #elif (PARITYBIT == EVEN_PARITY)
                              S2CON |= S2TB8;         //设置校验位为1
              #endif
 129   2              }
 130   1              else
 131   1              {
 132   2      #if (PARITYBIT == ODD_PARITY)
                              S2CON |= S2TB8;         //设置校验位为1
              #elif (PARITYBIT == EVEN_PARITY)
                              S2CON &= ~S2TB8;        //设置校验位为0
              #endif
 137   2              }
 138   1              busy = 1;
 139   1              S2BUF = ACC;                //写数据到UART2数据寄存器
 140   1      }
 141          
 142          /*----------------------------
 143          发送字符串
 144          ----------------------------*/
 145          void Usart2_SendString(char *s)
 146          {
 147   1              while (*s)                  //检测字符串结束标志
 148   1              {
 149   2                      Usart2_SendData(*s++);         //发送当前字符
 150   2              }
 151   1      }
 152          
 153          
 154          /*uart init with baud settings----transfer mode-----open serial port*/
 155          void UsartInit(void)
 156          {
 157   1          ACC = P_SW1;
 158   1          ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
 159   1          P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
 160   1          
 161   1      //  ACC = P_SW1;
 162   1      //  ACC &= ~(S1_S0 | S1_S1);    //S1_S0=1 S1_S1=0
 163   1      //  ACC |= S1_S0;               //(P3.6/RxD_2, P3.7/TxD_2)
 164   1      //  P_SW1 = ACC;  
 165   1      //  
 166   1      //  ACC = P_SW1;
 167   1      //  ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=1
 168   1      //  ACC |= S1_S1;               //(P1.6/RxD_3, P1.7/TxD_3)
 169   1      //  P_SW1 = ACC;  
 170   1      
 171   1              P_SW2 &= ~S2_S0;            //S2_S0=0 (P1.0/RxD2, P1.1/TxD2)
 172   1              //  P_SW2 |= S2_S0;             //S2_S0=1 (P4.6/RxD2_2, P4.7/TxD2_2)
 173   1      
 174   1      #if (PARITYBIT == NONE_PARITY)
 175   1          SCON = 0x50;                //8位可变波特率
 176   1      #elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
                  SCON = 0xda;                //9位可变波特率,校验位初始为1
              #elif (PARITYBIT == SPACE_PARITY)
C51 COMPILER V9.00   USART                                                                 11/06/2015 14:30:43 PAGE 4   

                  SCON = 0xd2;                //9位可变波特率,校验位初始为0
              #endif
 181   1      
 182   1      #if (PARITYBIT == NONE_PARITY)
 183   1              S2CON = 0x50;               //8位可变波特率
 184   1      #elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
                      S2CON = 0xda;               //9位可变波特率,校验位初始为1
              #elif (PARITYBIT == SPACE_PARITY)
                      S2CON = 0xd2;               //9位可变波特率,校验位初始为0
              #endif
 189   1      
 190   1      
 191   1          T2L = (65536 - (FOSC/4/BAUD));   //设置波特率重装值
 192   1          T2H = (65536 - (FOSC/4/BAUD))>>8;
 193   1          AUXR = 0x14;                //T2为1T模式, 并启动定时器2
 194   1          AUXR |= 0x01;               //选择定时器2为串口1的波特率发生器
 195   1          ES = 1;                     //使能串口中断
 196   1              IE2 = 0x01;                 //使能串口2中断
 197   1          EA = 1;
 198   1      
 199   1              //Usart1_SendString("STC15F2K60S2\r\nUart Test !\r\n");
 200   1              //Usart2_SendString("STC15F2K60S2\r\nUart2 Test !\r\n");
 201   1              
 202   1      }
 203          
 204          void uart_printf(const char *fmt, ...)
 205          {
 206   1              va_list ap;
 207   1              char xdata string[256];//访问内部拓展RAM，非访问外部RAM，不能超过内部拓展RAM大小(此处为1024)  
 208   1      
 209   1              va_start(ap, fmt);
 210   1              vsprintf(string, fmt, ap);//此处也可以使用sprintf函数，用法差不多，稍加修改即可，此处略去  
 211   1              Usart1_SendString(string);
 212   1              va_end(ap);
 213   1      }
 214          
 215          ///*Switch to uart2 port by hardware*/
 216          //void usart2_SendData(void)
 217          //{
 218          //  ACC = P_SW1;
 219          //  ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=1
 220          //  ACC |= S1_S1;               //(P1.6/RxD_3, P1.7/TxD_3)
 221          //  P_SW1 = ACC; 
 222          //}
 223          //
 224          ///*Switch to uart1 port by hardware*/
 225          //void usart1_SendData(void)
 226          //{
 227          //    ACC = P_SW1;
 228          //    ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
 229          //    P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
 230          //}
 231          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    410    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =     17     309
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.00   USART                                                                 11/06/2015 14:30:43 PAGE 5   

   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
