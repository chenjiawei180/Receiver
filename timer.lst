C51 COMPILER V9.00   TIMER                                                                 10/31/2015 10:46:07 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\timer.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.
                    -\timer.lst) OBJECT(timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "key.h"
   3          #include "menu.h"
   4          #include "ev1527.h"
   5          
   6          unsigned char await_number = 0;      //待机时刻计算50MS次数变量
   7          unsigned char await_number_table = 0;//0.5秒标志变量
   8          
   9          unsigned char main_press_time_table = 0;//main计算时间变量跟标志位
  10          unsigned char main_press_time = 0;
  11          
  12          unsigned char again_and_again_time = 0;// 判断重复解码所需要的计算时间变量
  13          
  14          unsigned char logout_cycle_number = 0; //销号 循环 计数变量以及标志位
  15          unsigned char logout_cycle_table = 0;
  16          
  17          unsigned char return_standby_time = 0;//一段时间未操作  返回待机界面
  18          
  19          unsigned char second_times = 0;
  20          
  21          unsigned char fd_table = 0;
  22          
  23          unsigned char filter_main = 0;
  24          unsigned char filter_other = 0;
  25          
  26          void Init_Timer0(void)
  27          {
  28   1              TMOD |= 0x01;     //使用模式1，16位定时器，使用"|"符号可以在使用多个定时器时不受影响    
  29   1              TH0 = (65536 - TIMER50MS) >> 8; //重新赋值 5ms
  30   1              TL0 = (65536 - TIMER50MS) & 0xff;
  31   1              EA = 1;            //总中断打开
  32   1              ET0 = 1;           //定时器中断打开
  33   1              TR0 = 1;           //定时器开关打开
  34   1      }
  35          
  36          void Init_Timer1(void) 
  37          {
  38   1              TMOD |= 0x10;     //使用模式1，16位定时器，使用"|"符号可以在使用多个定时器时不受影响    
  39   1              TH1 = (65536 - 100) >> 8; //重新赋值 100us
  40   1              TL1 = (65536 - 100) & 0xff;
  41   1              EA = 1;            //总中断打开
  42   1              ET1 = 1;           //定时器中断打开
  43   1              //TR1=1;           //定时器开关打开
  44   1      }
  45          
  46          void Timer0_isr(void) interrupt 1  //定时器0中断服务程序
  47          {
  48   1              unsigned char func_index_temp = 0;
  49   1              unsigned char Two_Menu_FC_E1_temp = 0;
  50   1              TF0 = 0;
  51   1              TH0 = (65536 - TIMER50MS) >> 8;           //重新赋值 50ms
  52   1              TL0 = (65536 - TIMER50MS) & 0xff;
  53   1              func_index_temp = return_func_index();
  54   1              Two_Menu_FC_E1_temp = return_Two_Menu_FC_E1();
C51 COMPILER V9.00   TIMER                                                                 10/31/2015 10:46:07 PAGE 2   

  55   1              //if (func_index_temp == MENU_STANDBY || func_index_temp == TWO_MENU_F0_YEAR || func_index_temp == TWO_ME
             -NU_F0_MOUTH 
  56   1              //      || func_index_temp == TWO_MENU_F0_DAY || func_index_temp == TWO_MENU_F0_WEEK || func_index_temp == TWO
             -_MENU_F0_HOUR
  57   1              //      || func_index_temp == TWO_MENU_F0_MINUTE || func_index_temp == TWO_MENU_F1_E1_D1 || func_index_temp ==
             - TWO_MENU_F1_E1_D2
  58   1              //      || func_index_temp == TWO_MENU_F1_E1_D3 || func_index_temp == TWO_MENU_F1_E1_D4 || func_index_temp == 
             -TWO_MENU_F1_E2_D1
  59   1              //      || func_index_temp == TWO_MENU_F1_E2_D2 || func_index_temp == TWO_MENU_F1_E2_D3 || func_index_temp == 
             -TWO_MENU_F1_E2_D4     
  60   1              //      )
  61   1              if (1)
  62   1              {
  63   2                      await_number++;
  64   2                      if (await_number == 10)
  65   2                      {
  66   3                              await_number_table++;
  67   3                              fd_table++;
  68   3                              await_number = 0;
  69   3                              if (filter_main != 0)
  70   3                              {
  71   4                                      filter_main--;
  72   4                              }
  73   3      
  74   3                      }
  75   2                      if (await_number_table >= 4)//确保程序正确延时
  76   2                      {
  77   3                              await_number_table = 0;
  78   3                      }               
  79   2                      if (fd_table >= 24)
  80   2                      {
  81   3                              fd_table = 0;
  82   3                      }
  83   2                      if (filter_other != 0)
  84   2                      {
  85   3                              filter_other--;
  86   3                      }
  87   2              }
  88   1      
  89   1              if (main_press_time_table == 1) //菜单键按下时间标志
  90   1              {
  91   2                      main_press_time++;                      //计算菜单键按下时间长度变量
  92   2              }
  93   1      
  94   1              if (return_again_and_again_decoder_table() == 1)
  95   1              {
  96   2                      again_and_again_time++;
  97   2                      if (again_and_again_time >120)
  98   2                      {
  99   3                              clear_again_and_again_decoder_table();
 100   3                              again_and_again_time = 0;
 101   3                      }
 102   2              }
 103   1      
 104   1              if (func_index_temp == DECODER_MENU)
 105   1              {
 106   2                      logout_cycle_number++;
 107   2                      if (logout_cycle_number == 20)
 108   2                      {
 109   3                              logout_cycle_table++;
 110   3                              logout_cycle_number = 0;
 111   3                      }
C51 COMPILER V9.00   TIMER                                                                 10/31/2015 10:46:07 PAGE 3   

 112   2      
 113   2              }
 114   1      
 115   1              if (func_index_temp != DECODER_MENU && func_index_temp != TWO_MENU_Fd_SET)
 116   1              {
 117   2                      return_standby_time++;
 118   2                      if (return_standby_time >200)
 119   2                      {
 120   3                              return_standby_time = 0;
 121   3                              set_func_index(MENU_STANDBY);
 122   3                      }
 123   2              }
 124   1      
 125   1              if (func_index_temp == MENU_STANDBY && Two_Menu_FC_E1_temp == 2)
 126   1              {
 127   2                      second_times++;
 128   2                      if (second_times >= 10)
 129   2                      {
 130   3                              P55 = ~P55;
 131   3                              second_times = 0;
 132   3                      }
 133   2              }
 134   1      
 135   1      }
 136          
 137          void Timer1_isr(void) interrupt 3  //定时器1中断服务程序
 138          {
 139   1              unsigned char func_index_temp = 0;
 140   1              func_index_temp = return_func_index();
 141   1              TF1 = 0;
 142   1              TH1 = (65536 - 100) >> 8;                 //重新赋值 100us
 143   1              TL1 = (65536 - 100) & 0xff;
 144   1              if (func_index_temp == TWO_MENU_FA_SET)
 145   1              {
 146   2                      RF_decode_main_sjz_test();
 147   2              }
 148   1              else
 149   1              {
 150   2                      RF_decode_main();
 151   2              }
 152   1              
 153   1      }
 154          
 155          unsigned char return_await_number_table(void)   //返回await_number_table变量的值
 156          {
 157   1              unsigned char await_number_table_temp=0;
 158   1              await_number_table_temp = await_number_table;
 159   1              return await_number_table_temp;
 160   1      }
 161          
 162          void set_await_number_table(unsigned char temp) //设置await_number_table变量的值
 163          {
 164   1              await_number_table = temp;
 165   1      }
 166          
 167          void set_main_press_time_table(unsigned char temp) //设置main_press_time_table变量的值
 168          {
 169   1              main_press_time_table = temp;
 170   1      }
 171          
 172          unsigned char return_main_press_time(void)
 173          {
C51 COMPILER V9.00   TIMER                                                                 10/31/2015 10:46:07 PAGE 4   

 174   1              unsigned char temp = 0;
 175   1              temp = main_press_time;
 176   1              return temp;
 177   1      }
 178          
 179          void clear_main_press_time(void)
 180          {
 181   1              main_press_time = 0;
 182   1      }
 183          
 184          unsigned char return_logout_cycle_table(void)
 185          {
 186   1              unsigned char temp = 0;
 187   1              temp = logout_cycle_table;
 188   1              return temp;
 189   1      }
 190          
 191          void set_logout_cycle_table(unsigned char temp) //设置logout_cycle_table变量的值
 192          {
 193   1              logout_cycle_table = temp;
 194   1      }
 195          
 196          void clear_return_standby_time(void)
 197          {
 198   1              return_standby_time = 0;
 199   1      }
 200          
 201          void set_main_press_time(unsigned char temp)
 202          {
 203   1              main_press_time = temp;
 204   1      }
 205          
 206          unsigned char return_fd_table(void)     //返回fd_table变量的值
 207          {
 208   1              unsigned char fd_table_temp = 0;
 209   1              fd_table_temp = fd_table;
 210   1              return fd_table_temp;
 211   1      }
 212          
 213          void set_fd_table(unsigned char temp) //设置fd_table变量的值
 214          {
 215   1              fd_table = temp;
 216   1              await_number = 0;
 217   1      }
 218          
 219          unsigned char return_filter_main(void)  //返回filter_main变量的值
 220          {
 221   1              unsigned char filter_main_temp = 0;
 222   1              filter_main_temp = filter_main;
 223   1              return filter_main_temp;
 224   1      }
 225          
 226          void set_filter_main(unsigned char temp) //设置filter_main变量的值
 227          {
 228   1              filter_main = temp;
 229   1              await_number = 0;
 230   1      }
 231          
 232          unsigned char return_filter_other(void) //返回filter_main变量的值
 233          {
 234   1              unsigned char filter_other_temp = 0;
 235   1              filter_other_temp = filter_other;
C51 COMPILER V9.00   TIMER                                                                 10/31/2015 10:46:07 PAGE 5   

 236   1              return filter_other_temp;
 237   1      }
 238          
 239          void set_filter_other(unsigned char temp) //设置filter_main变量的值
 240          {
 241   1              filter_other = temp;
 242   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    487    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
