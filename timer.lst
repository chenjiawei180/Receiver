C51 COMPILER V9.00   TIMER                                                                 11/06/2015 15:41:46 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\timer.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.
                    -\timer.lst) OBJECT(timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "key.h"
   3          #include "menu.h"
   4          #include "ev1527.h"
   5          
   6          unsigned char await_number = 0;      //待机时刻计算50MS次数变量
   7          unsigned char await_number_table = 0;//0.5秒标志变量
   8          
   9          unsigned char main_press_time_table = 0;//main计算时间变量跟标志位
  10          unsigned char main_press_time = 0;
  11          
  12          unsigned char again_and_again_time = 0;// 判断重复解码所需要的计算时间变量
  13          
  14          unsigned char logout_cycle_number = 0; //销号 循环 计数变量以及标志位
  15          unsigned char logout_cycle_table = 0;
  16          
  17          unsigned char return_standby_time = 0;//一段时间未操作  返回待机界面
  18          
  19          unsigned char second_times = 0;
  20          
  21          unsigned char fd_table = 0;
  22          
  23          unsigned char filter_main = 0;
  24          unsigned char filter_other = 0;
  25          
  26          unsigned char second_filter_time = 0;
  27          unsigned char second_filter_table = 0;
  28          
  29          void Init_Timer0(void)
  30          {
  31   1              TMOD |= 0x01;     //使用模式1，16位定时器，使用"|"符号可以在使用多个定时器时不受影响    
  32   1              TH0 = (65536 - TIMER50MS) >> 8; //重新赋值 5ms
  33   1              TL0 = (65536 - TIMER50MS) & 0xff;
  34   1              EA = 1;            //总中断打开
  35   1              ET0 = 1;           //定时器中断打开
  36   1              TR0 = 1;           //定时器开关打开
  37   1      }
  38          
  39          void Init_Timer1(void) 
  40          {
  41   1              TMOD |= 0x10;     //使用模式1，16位定时器，使用"|"符号可以在使用多个定时器时不受影响    
  42   1              TH1 = (65536 - 100) >> 8; //重新赋值 100us
  43   1              TL1 = (65536 - 100) & 0xff;
  44   1              EA = 1;            //总中断打开
  45   1              ET1 = 1;           //定时器中断打开
  46   1              //TR1=1;           //定时器开关打开
  47   1      }
  48          
  49          void Timer0_isr(void) interrupt 1  //定时器0中断服务程序
  50          {
  51   1              unsigned char func_index_temp = 0;
  52   1              unsigned char Two_Menu_FC_E1_temp = 0;
  53   1              TF0 = 0;
  54   1              TH0 = (65536 - TIMER50MS) >> 8;           //重新赋值 50ms
C51 COMPILER V9.00   TIMER                                                                 11/06/2015 15:41:46 PAGE 2   

  55   1              TL0 = (65536 - TIMER50MS) & 0xff;
  56   1              func_index_temp = return_func_index();
  57   1              Two_Menu_FC_E1_temp = return_Two_Menu_FC_E1();
  58   1              //if (func_index_temp == MENU_STANDBY || func_index_temp == TWO_MENU_F0_YEAR || func_index_temp == TWO_ME
             -NU_F0_MOUTH 
  59   1              //      || func_index_temp == TWO_MENU_F0_DAY || func_index_temp == TWO_MENU_F0_WEEK || func_index_temp == TWO
             -_MENU_F0_HOUR
  60   1              //      || func_index_temp == TWO_MENU_F0_MINUTE || func_index_temp == TWO_MENU_F1_E1_D1 || func_index_temp ==
             - TWO_MENU_F1_E1_D2
  61   1              //      || func_index_temp == TWO_MENU_F1_E1_D3 || func_index_temp == TWO_MENU_F1_E1_D4 || func_index_temp == 
             -TWO_MENU_F1_E2_D1
  62   1              //      || func_index_temp == TWO_MENU_F1_E2_D2 || func_index_temp == TWO_MENU_F1_E2_D3 || func_index_temp == 
             -TWO_MENU_F1_E2_D4     
  63   1              //      )
  64   1              if (1)
  65   1              {
  66   2                      await_number++;
  67   2                      if (await_number == 10)
  68   2                      {
  69   3                              await_number_table++;
  70   3                              fd_table++;
  71   3                              await_number = 0;
  72   3                              if (filter_main != 0)
  73   3                              {
  74   4                                      filter_main--;
  75   4                              }
  76   3      
  77   3                      }
  78   2                      if (await_number_table >= 4)//确保程序正确延时
  79   2                      {
  80   3                              await_number_table = 0;
  81   3                      }               
  82   2                      if (fd_table >= 24)
  83   2                      {
  84   3                              fd_table = 0;
  85   3                      }
  86   2                      if (filter_other != 0)
  87   2                      {
  88   3                              filter_other--;
  89   3                      }
  90   2              }
  91   1      
  92   1              if (main_press_time_table == 1) //菜单键按下时间标志
  93   1              {
  94   2                      main_press_time++;                      //计算菜单键按下时间长度变量
  95   2              }
  96   1      
  97   1              if (return_again_and_again_decoder_table() == 1)
  98   1              {
  99   2                      again_and_again_time++;
 100   2                      if (again_and_again_time >120)
 101   2                      {
 102   3                              clear_again_and_again_decoder_table();
 103   3                              again_and_again_time = 0;
 104   3                      }
 105   2              }
 106   1      
 107   1              if (second_filter_table == 1)
 108   1              {
 109   2                      second_filter_time++;
 110   2                      if (second_filter_time >120)
 111   2                      {
C51 COMPILER V9.00   TIMER                                                                 11/06/2015 15:41:46 PAGE 3   

 112   3                              second_filter_table = 0;
 113   3                              second_filter_time = 0;
 114   3                      }
 115   2              }
 116   1      
 117   1              if (func_index_temp == DECODER_MENU)
 118   1              {
 119   2                      logout_cycle_number++;
 120   2                      if (logout_cycle_number == 20)
 121   2                      {
 122   3                              logout_cycle_table++;
 123   3                              logout_cycle_number = 0;
 124   3                      }
 125   2      
 126   2              }
 127   1      
 128   1              if (func_index_temp != DECODER_MENU && func_index_temp != TWO_MENU_Fd_SET)
 129   1              {
 130   2                      return_standby_time++;
 131   2                      if (return_standby_time >200)
 132   2                      {
 133   3                              return_standby_time = 0;
 134   3                              set_func_index(MENU_STANDBY);
 135   3                      }
 136   2              }
 137   1      
 138   1              if (func_index_temp == MENU_STANDBY && Two_Menu_FC_E1_temp == 2)
 139   1              {
 140   2                      second_times++;
 141   2                      if (second_times >= 10)
 142   2                      {
 143   3                              P55 = ~P55;
 144   3                              second_times = 0;
 145   3                      }
 146   2              }
 147   1      
 148   1      }
 149          
 150          void Timer1_isr(void) interrupt 3  //定时器1中断服务程序
 151          {
 152   1              unsigned char func_index_temp = 0;
 153   1              func_index_temp = return_func_index();
 154   1              TF1 = 0;
 155   1              TH1 = (65536 - 100) >> 8;                 //重新赋值 100us
 156   1              TL1 = (65536 - 100) & 0xff;
 157   1              if (func_index_temp == TWO_MENU_FA_SET)
 158   1              {
 159   2                      RF_decode_main_sjz_test();
 160   2              }
 161   1              else
 162   1              {
 163   2                      RF_decode_main();
 164   2              }
 165   1              
 166   1      }
 167          
 168          unsigned char return_await_number_table(void)   //返回await_number_table变量的值
 169          {
 170   1              unsigned char await_number_table_temp=0;
 171   1              await_number_table_temp = await_number_table;
 172   1              return await_number_table_temp;
 173   1      }
C51 COMPILER V9.00   TIMER                                                                 11/06/2015 15:41:46 PAGE 4   

 174          
 175          void set_await_number_table(unsigned char temp) //设置await_number_table变量的值
 176          {
 177   1              await_number_table = temp;
 178   1      }
 179          
 180          void set_main_press_time_table(unsigned char temp) //设置main_press_time_table变量的值
 181          {
 182   1              main_press_time_table = temp;
 183   1      }
 184          
 185          unsigned char return_main_press_time(void)
 186          {
 187   1              unsigned char temp = 0;
 188   1              temp = main_press_time;
 189   1              return temp;
 190   1      }
 191          
 192          void clear_main_press_time(void)
 193          {
 194   1              main_press_time = 0;
 195   1      }
 196          
 197          unsigned char return_logout_cycle_table(void)
 198          {
 199   1              unsigned char temp = 0;
 200   1              temp = logout_cycle_table;
 201   1              return temp;
 202   1      }
 203          
 204          void set_logout_cycle_table(unsigned char temp) //设置logout_cycle_table变量的值
 205          {
 206   1              logout_cycle_table = temp;
 207   1      }
 208          
 209          void clear_return_standby_time(void)
 210          {
 211   1              return_standby_time = 0;
 212   1      }
 213          
 214          void set_main_press_time(unsigned char temp)
 215          {
 216   1              main_press_time = temp;
 217   1      }
 218          
 219          unsigned char return_fd_table(void)     //返回fd_table变量的值
 220          {
 221   1              unsigned char fd_table_temp = 0;
 222   1              fd_table_temp = fd_table;
 223   1              return fd_table_temp;
 224   1      }
 225          
 226          void set_fd_table(unsigned char temp) //设置fd_table变量的值
 227          {
 228   1              fd_table = temp;
 229   1              await_number = 0;
 230   1      }
 231          
 232          unsigned char return_filter_main(void)  //返回filter_main变量的值
 233          {
 234   1              unsigned char filter_main_temp = 0;
 235   1              filter_main_temp = filter_main;
C51 COMPILER V9.00   TIMER                                                                 11/06/2015 15:41:46 PAGE 5   

 236   1              return filter_main_temp;
 237   1      }
 238          
 239          void set_filter_main(unsigned char temp) //设置filter_main变量的值
 240          {
 241   1              filter_main = temp;
 242   1              await_number = 0;
 243   1      }
 244          
 245          unsigned char return_filter_other(void) //返回filter_main变量的值
 246          {
 247   1              unsigned char filter_other_temp = 0;
 248   1              filter_other_temp = filter_other;
 249   1              return filter_other_temp;
 250   1      }
 251          
 252          void set_filter_other(unsigned char temp) //设置filter_main变量的值
 253          {
 254   1              filter_other = temp;
 255   1      }
 256          
 257          void clear_again_and_again_time(void)
 258          {
 259   1              again_and_again_time = 0;
 260   1      }
 261          
 262          void clear_second_filter_time(void)
 263          {
 264   1              second_filter_time = 0;
 265   1      }
 266          
 267          void set_second_filter_table(unsigned char temp) //设置second_filter_table变量的值
 268          {
 269   1              second_filter_table = temp;
 270   1      }
 271          
 272          unsigned char return_second_filter_table(void)  //返回second_filter_table变量的值
 273          {
 274   1              unsigned char second_filter_table_temp = 0;
 275   1              second_filter_table_temp = second_filter_table;
 276   1              return second_filter_table_temp;
 277   1      }
 278          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    539    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     14       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
