C51 COMPILER V9.00   TIMER                                                                 10/30/2015 11:43:42 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\timer.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.
                    -\timer.lst) OBJECT(timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "key.h"
   3          #include "menu.h"
   4          #include "ev1527.h"
   5          
   6          unsigned char await_number = 0;      //待机时刻计算50MS次数变量
   7          unsigned char await_number_table = 0;//0.5秒标志变量
   8          
   9          unsigned char main_press_time_table = 0;//main计算时间变量跟标志位
  10          unsigned char main_press_time = 0;
  11          
  12          unsigned char again_and_again_time = 0;// 判断重复解码所需要的计算时间变量
  13          
  14          unsigned char logout_cycle_number = 0; //销号 循环 计数变量以及标志位
  15          unsigned char logout_cycle_table = 0;
  16          
  17          unsigned char return_standby_time = 0;//一段时间未操作  返回待机界面
  18          
  19          unsigned char second_times = 0;
  20          
  21          unsigned char fd_table = 0;
  22          
  23          unsigned char filter_main = 0;
  24          
  25          void Init_Timer0(void)
  26          {
  27   1              TMOD |= 0x01;     //使用模式1，16位定时器，使用"|"符号可以在使用多个定时器时不受影响    
  28   1              TH0 = (65536 - TIMER50MS) >> 8; //重新赋值 5ms
  29   1              TL0 = (65536 - TIMER50MS) & 0xff;
  30   1              EA = 1;            //总中断打开
  31   1              ET0 = 1;           //定时器中断打开
  32   1              TR0 = 1;           //定时器开关打开
  33   1      }
  34          
  35          void Init_Timer1(void) 
  36          {
  37   1              TMOD |= 0x10;     //使用模式1，16位定时器，使用"|"符号可以在使用多个定时器时不受影响    
  38   1              TH1 = (65536 - 100) >> 8; //重新赋值 100us
  39   1              TL1 = (65536 - 100) & 0xff;
  40   1              EA = 1;            //总中断打开
  41   1              ET1 = 1;           //定时器中断打开
  42   1              //TR1=1;           //定时器开关打开
  43   1      }
  44          
  45          void Timer0_isr(void) interrupt 1  //定时器0中断服务程序
  46          {
  47   1              unsigned char func_index_temp = 0;
  48   1              unsigned char Two_Menu_FC_E1_temp = 0;
  49   1              TF0 = 0;
  50   1              TH0 = (65536 - TIMER50MS) >> 8;           //重新赋值 50ms
  51   1              TL0 = (65536 - TIMER50MS) & 0xff;
  52   1              func_index_temp = return_func_index();
  53   1              Two_Menu_FC_E1_temp = return_Two_Menu_FC_E1();
  54   1              //if (func_index_temp == MENU_STANDBY || func_index_temp == TWO_MENU_F0_YEAR || func_index_temp == TWO_ME
C51 COMPILER V9.00   TIMER                                                                 10/30/2015 11:43:42 PAGE 2   

             -NU_F0_MOUTH 
  55   1              //      || func_index_temp == TWO_MENU_F0_DAY || func_index_temp == TWO_MENU_F0_WEEK || func_index_temp == TWO
             -_MENU_F0_HOUR
  56   1              //      || func_index_temp == TWO_MENU_F0_MINUTE || func_index_temp == TWO_MENU_F1_E1_D1 || func_index_temp ==
             - TWO_MENU_F1_E1_D2
  57   1              //      || func_index_temp == TWO_MENU_F1_E1_D3 || func_index_temp == TWO_MENU_F1_E1_D4 || func_index_temp == 
             -TWO_MENU_F1_E2_D1
  58   1              //      || func_index_temp == TWO_MENU_F1_E2_D2 || func_index_temp == TWO_MENU_F1_E2_D3 || func_index_temp == 
             -TWO_MENU_F1_E2_D4     
  59   1              //      )
  60   1              if (1)
  61   1              {
  62   2                      await_number++;
  63   2                      if (await_number == 10)
  64   2                      {
  65   3                              await_number_table++;
  66   3                              fd_table++;
  67   3                              await_number = 0;
  68   3                              if (filter_main != 0)
  69   3                              {
  70   4                                      filter_main--;
  71   4                              }
  72   3                      }
  73   2                      if (await_number_table >= 4)//确保程序正确延时
  74   2                      {
  75   3                              await_number_table = 0;
  76   3                      }               
  77   2                      if (fd_table >= 24)
  78   2                      {
  79   3                              fd_table = 0;
  80   3                      }
  81   2              }
  82   1      
  83   1              if (main_press_time_table == 1) //菜单键按下时间标志
  84   1              {
  85   2                      main_press_time++;                      //计算菜单键按下时间长度变量
  86   2              }
  87   1      
  88   1              if (return_again_and_again_decoder_table() == 1)
  89   1              {
  90   2                      again_and_again_time++;
  91   2                      if (again_and_again_time >120)
  92   2                      {
  93   3                              clear_again_and_again_decoder_table();
  94   3                              again_and_again_time = 0;
  95   3                      }
  96   2              }
  97   1      
  98   1              if (func_index_temp == DECODER_MENU)
  99   1              {
 100   2                      logout_cycle_number++;
 101   2                      if (logout_cycle_number == 20)
 102   2                      {
 103   3                              logout_cycle_table++;
 104   3                              logout_cycle_number = 0;
 105   3                      }
 106   2      
 107   2              }
 108   1      
 109   1              if (func_index_temp != DECODER_MENU && func_index_temp != TWO_MENU_Fd_SET)
 110   1              {
 111   2                      return_standby_time++;
C51 COMPILER V9.00   TIMER                                                                 10/30/2015 11:43:42 PAGE 3   

 112   2                      if (return_standby_time >200)
 113   2                      {
 114   3                              return_standby_time = 0;
 115   3                              set_func_index(MENU_STANDBY);
 116   3                      }
 117   2              }
 118   1      
 119   1              if (func_index_temp == MENU_STANDBY && Two_Menu_FC_E1_temp == 2)
 120   1              {
 121   2                      second_times++;
 122   2                      if (second_times >= 10)
 123   2                      {
 124   3                              P55 = ~P55;
 125   3                              second_times = 0;
 126   3                      }
 127   2              }
 128   1      
 129   1      }
 130          
 131          void Timer1_isr(void) interrupt 3  //定时器1中断服务程序
 132          {
 133   1              unsigned char func_index_temp = 0;
 134   1              func_index_temp = return_func_index();
 135   1              TF1 = 0;
 136   1              TH1 = (65536 - 100) >> 8;                 //重新赋值 100us
 137   1              TL1 = (65536 - 100) & 0xff;
 138   1              if (func_index_temp == TWO_MENU_FA_SET)
 139   1              {
 140   2                      RF_decode_main_sjz_test();
 141   2              }
 142   1              else
 143   1              {
 144   2                      RF_decode_main();
 145   2              }
 146   1              
 147   1      }
 148          
 149          unsigned char return_await_number_table(void)   //返回await_number_table变量的值
 150          {
 151   1              unsigned char await_number_table_temp=0;
 152   1              await_number_table_temp = await_number_table;
 153   1              return await_number_table_temp;
 154   1      }
 155          
 156          void set_await_number_table(unsigned char temp) //设置await_number_table变量的值
 157          {
 158   1              await_number_table = temp;
 159   1      }
 160          
 161          void set_main_press_time_table(unsigned char temp) //设置main_press_time_table变量的值
 162          {
 163   1              main_press_time_table = temp;
 164   1      }
 165          
 166          unsigned char return_main_press_time(void)
 167          {
 168   1              unsigned char temp = 0;
 169   1              temp = main_press_time;
 170   1              return temp;
 171   1      }
 172          
 173          void clear_main_press_time(void)
C51 COMPILER V9.00   TIMER                                                                 10/30/2015 11:43:42 PAGE 4   

 174          {
 175   1              main_press_time = 0;
 176   1      }
 177          
 178          unsigned char return_logout_cycle_table(void)
 179          {
 180   1              unsigned char temp = 0;
 181   1              temp = logout_cycle_table;
 182   1              return temp;
 183   1      }
 184          
 185          void set_logout_cycle_table(unsigned char temp) //设置logout_cycle_table变量的值
 186          {
 187   1              logout_cycle_table = temp;
 188   1      }
 189          
 190          void clear_return_standby_time(void)
 191          {
 192   1              return_standby_time = 0;
 193   1      }
 194          
 195          void set_main_press_time(unsigned char temp)
 196          {
 197   1              main_press_time = temp;
 198   1      }
 199          
 200          unsigned char return_fd_table(void)     //返回fd_table变量的值
 201          {
 202   1              unsigned char fd_table_temp = 0;
 203   1              fd_table_temp = fd_table;
 204   1              return fd_table_temp;
 205   1      }
 206          
 207          void set_fd_table(unsigned char temp) //设置fd_table变量的值
 208          {
 209   1              fd_table = temp;
 210   1      }
 211          
 212          unsigned char return_filter_main(void)  //返回filter_main变量的值
 213          {
 214   1              unsigned char filter_main_temp = 0;
 215   1              filter_main_temp = filter_main;
 216   1              return filter_main_temp;
 217   1      }
 218          
 219          void set_filter_main(unsigned char temp) //设置filter_main变量的值
 220          {
 221   1              filter_main = temp;
 222   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    457    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
