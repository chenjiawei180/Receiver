C51 COMPILER V9.00   EV1527                                                                11/05/2015 14:58:07 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE EV1527
OBJECT MODULE PLACED IN ev1527.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\ev1527.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(
                    -.\ev1527.lst) OBJECT(ev1527.obj)

line level    source

   1          #include "ev1527.h"
   2          #include "timer.h"
   3          #include "key.h"
   4          #include "at24c256.h"
   5          #include "menu.h"
   6          
   7          /********************解码方式专用变量*******************************/
   8          unsigned char Save_RF_trans1 = 0;
   9          unsigned char Save_RF_trans0 = 0;
  10          unsigned char RF_trans0 = 0;
  11          unsigned char RF_trans1 = 0;
  12          unsigned char RF_BIT_COUNTER = 0; 
  13          unsigned char Timer0_interrupt_count = 0; //进入中断后400MS  无结果 恢复初始化操作
  14          unsigned char P_RF_INT = 0x00;
  15          unsigned char RF_RECE_REG[3] = { 0 };
  16          
  17          unsigned int measure_sync_count1 = 70; //波长保存变量
  18          unsigned int measure_sync_count2 = 120;//同上
  19          unsigned int RF_trans1_test_count = 0; //码长测试变量
  20          unsigned int RF_trans0_test_count = 0; //码长测试变量
  21          unsigned int RF_trans_count = 0;           //码长测试变量
  22          unsigned int measure_sync_count1_saved = 70;
  23          unsigned int measure_sync_count2_saved = 120;
  24          unsigned int tunning_finish_count = 0;
  25          
  26          unsigned char receive_rf_decoder_finished = 0;      //一次解码完成标志位
  27          unsigned char again_receive_rf_decoder_finished = 0;//二次解码完成标志位
  28          unsigned char rx_table = 0;                                                     //二次解码switch步骤变量
  29          unsigned char again_and_again_decoder_table = 0;     //二次编码成功标志位
  30          
  31          unsigned char register_manager = 0;
  32          
  33          
  34          
  35          
  36          
  37          unsigned char old1_RF_RECE_REG[3] = { 0 };//用于校验
  38          unsigned char old2_RF_RECE_REG[3] = { 0 };//用于读取
  39          
  40          void exint0_init(void) //外部中断0 初始化
  41          {
  42   1              EA = 1;
  43   1              EX0 = 1;
  44   1              IT0 = 1;
  45   1      }
  46          
  47          void exint0() interrupt 0 //外部中断0中断服务函数
  48          {
  49   1              EX0 = 0;
  50   1              if (TR1 == 0)
  51   1              {
  52   2                      //Init_Timer1();//sjz add for initialization timer0 before enable it
  53   2                      TR1 = 1;
  54   2              }
C51 COMPILER V9.00   EV1527                                                                11/05/2015 14:58:07 PAGE 2   

  55   1      }
  56          
  57          void RF_ini_receive(void) //初始化所有解码所用到的变量
  58          {
  59   1              Save_RF_trans1 = 0; Save_RF_trans0 = 0;
  60   1              RF_trans0 = RF_trans1 = 0;
  61   1              RF_BIT_COUNTER = 0;
  62   1              P_RF_INT = 0x00;
  63   1              Timer0_interrupt_count = 0;//sjz
  64   1      }
  65          
  66          void RF_decode_main(void)
  67          {
  68   1              if (P3_RF_RXD == 1)
  69   1              {
  70   2                      ++RF_trans1;
  71   2              }
  72   1              else
  73   1              {
  74   2                      ++RF_trans0;
  75   2              }
  76   1              Timer0_interrupt_count++;
  77   1              if (Timer0_interrupt_count>4000)/*4000*100us=400ms,*/
  78   1              {
  79   2                      TR1 = 0;/*shut down timer0 interrupt sjz*/
  80   2                      EX0 = 1;
  81   2                      RF_ini_receive();
  82   2                      return;
  83   2      
  84   2              }
  85   1              switch (P_RF_INT)
  86   1              {
  87   2              case 0:  //等待长低电平同步
  88   2                      if (RF_trans1 > 0)
  89   2                      {
  90   3                              //包含的高脉冲太多
  91   3                              RF_ini_receive();
  92   3                              EX0 = 1;
  93   3                              TR1 = 0;
  94   3                              return;
  95   3                      }
  96   2                      if (RF_trans0 >70)//measure_sync_count1)
  97   2                      {
  98   3                              //长低同步完成
  99   3                              P_RF_INT++;
 100   3                              RF_trans0 = RF_trans1 = 0;
 101   3                      }
 102   2                      break;
 103   2              case 1: //等待真正的同步头
 104   2                      if ((RF_trans0 + RF_trans1) >140 )//measure_sync_count2)/*sjz change from 150 to 120,to shorten the dete
             -ction when  the header of synchronization coming*/
 105   2                      {
 106   3                              //10mS没有同步高脉冲
 107   3                              RF_ini_receive();
 108   3                              EX0 = 1;
 109   3                              TR1 = 0;
 110   3                              return;
 111   3                      }
 112   2                      if (RF_trans1 > 1)
 113   2                      {
 114   3                              //高电平同步到了(最少检测到 2 次)
 115   3                              if (EX0 == 1)
C51 COMPILER V9.00   EV1527                                                                11/05/2015 14:58:07 PAGE 3   

 116   3                              {
 117   4                                      EX0 = 0;/*double check,since we have already detect the synchronization,if EXTINT0 is enable,need to d
             -isable  sjz*/
 118   4                              }
 119   3                              P_RF_INT++;
 120   3                              RF_trans0 = 0;
 121   3                              // RF_L_wait_H = 1;
 122   3                      }
 123   2                      break;
 124   2              case 2:
 125   2                      if (RF_trans0 > 1)
 126   2                      {
 127   3                              Save_RF_trans1 = RF_trans1;
 128   3                              RF_trans1 = 0;
 129   3                              P_RF_INT++;
 130   3                      }
 131   2                      if (RF_trans1>25)//((measure_sync_count2 + measure_sync_count1) >> 3)) /*if the high level is bigger tha
             -n 25*100us,Then should be setted as noise instead of useful signal sjz*/
 132   2                      {
 133   3                              RF_ini_receive();//KEY_HOLD = 0;
 134   3                              EX0 = 1;
 135   3                              TR1 = 0;
 136   3                              return;
 137   3                      }
 138   2                      break;
 139   2              case 3:if (RF_trans1 > 1)
 140   2              {
 141   3                                 Save_RF_trans0 = RF_trans0;
 142   3                                 RF_trans0 = 0;
 143   3                                 P_RF_INT = 2;
 144   3                                 RF_RECE_REG[RF_BIT_COUNTER / 8] <<= 1;
 145   3                                 if (Save_RF_trans1 >Save_RF_trans0)
 146   3                                 {
 147   4                                         RF_RECE_REG[(RF_BIT_COUNTER) / 8] |= 0x01;
 148   4                                 }
 149   3                                 ++RF_BIT_COUNTER;
 150   3                                 if (RF_BIT_COUNTER >23)
 151   3                                 {
 152   4                                         //P_RF_INT = 4;
 153   4                                         TR1 = 0;
 154   4                                         RF_ini_receive();
 155   4                                         receive_rf_decoder_finished = 1;
 156   4                                         EX0 = 1;
 157   4                                         break;
 158   4                                 }
 159   3              }
 160   2                         if (RF_trans0> 25)//((measure_sync_count2 + measure_sync_count1) >> 3))
 161   2                         {
 162   3                                 RF_ini_receive();
 163   3                                 EX0 = 1;
 164   3                                 TR1 = 0;
 165   3                                 return;
 166   3                         }
 167   2                         break;
 168   2              //case 4:
 169   2              //      if (RF_trans0 > 0)
 170   2              //      {
 171   2              //              Save_RF_trans1 = RF_trans1;
 172   2              //              RF_trans1 = 0;
 173   2              //              P_RF_INT++;
 174   2              //      }
 175   2              //      if (RF_trans1>((measure_sync_count2 + measure_sync_count1) >> 3)) /*if the high level is bigger than 2
C51 COMPILER V9.00   EV1527                                                                11/05/2015 14:58:07 PAGE 4   

             -5*100us,Then should be setted as noise instead of useful signal sjz*/
 176   2              //      {
 177   2              //              RF_ini_receive();//KEY_HOLD = 0;
 178   2              //              EX0 = 1;
 179   2              //              TR1 = 0;
 180   2              //              return;
 181   2              //      }
 182   2              //      break;
 183   2              //case 5:
 184   2              //      if (RF_trans1 > 0)
 185   2              //      {
 186   2              //              if (RF_trans0 > measure_sync_count2)
 187   2              //              {
 188   2              //                      TR1 = 0;
 189   2              //                      //RF_ini_receive();
 190   2              //                      receive_rf_decoder_finished = 1;
 191   2              //                      EX0 = 1;
 192   2              //              }
 193   2              //              RF_ini_receive();
 194   2              //      }
 195   2              //      if (RF_trans0>(measure_sync_count2 + measure_sync_count1))
 196   2              //      {
 197   2              //              RF_ini_receive();
 198   2              //              EX0 = 1;
 199   2              //              TR1 = 0;
 200   2              //              receive_rf_decoder_finished = 0;
 201   2              //              return;
 202   2              //      }
 203   2              //      break;
 204   2      
 205   2              default: //异常处理
 206   2              {
 207   3                                       RF_ini_receive();
 208   3                                       EX0 = 1;
 209   3                                       TR1 = 0;
 210   3              }break;
 211   2              }
 212   1      }
 213          
 214          void receive_rf_decoder(void)
 215          {
 216   1              unsigned char i, j;
 217   1              unsigned char temp_buff[8];
 218   1              unsigned char temp_buff1[32];
 219   1              unsigned char func_index_temp = 0;
 220   1              uint32_t dat;
 221   1              RF_def RFtmp;
 222   1              func_index_temp = return_func_index();
 223   1      
 224   1              if (receive_rf_decoder_finished == 1)
 225   1              {
 226   2                      receive_rf_decoder_finished = 0;
 227   2                      EX0 = 0;
 228   2                      switch (rx_table)
 229   2                      {
 230   3                      case 0: //第一次取得码
 231   3                              old1_RF_RECE_REG[0] = RF_RECE_REG[0];
 232   3                              old1_RF_RECE_REG[1] = RF_RECE_REG[1];
 233   3                              old1_RF_RECE_REG[2] = RF_RECE_REG[2];
 234   3                              rx_table = 1;
 235   3                              break;
 236   3                      case 1:
C51 COMPILER V9.00   EV1527                                                                11/05/2015 14:58:07 PAGE 5   

 237   3                              if (old1_RF_RECE_REG[0] == RF_RECE_REG[0] && old1_RF_RECE_REG[1] == RF_RECE_REG[1] && old1_RF_RECE_REG[
             -2] == RF_RECE_REG[2])
 238   3                              {
 239   4                                      if (old2_RF_RECE_REG[0] == RF_RECE_REG[0] && old2_RF_RECE_REG[1] == RF_RECE_REG[1] && old2_RF_RECE_REG
             -[2] == RF_RECE_REG[2])
 240   4                                      {
 241   5                                              if (again_and_again_decoder_table == 0) //如果该位不等于0  代表着上一次解码等于这次
 242   5                                              {
 243   6                                                      old2_RF_RECE_REG[0] = RF_RECE_REG[0];
 244   6                                                      old2_RF_RECE_REG[1] = RF_RECE_REG[1];
 245   6                                                      old2_RF_RECE_REG[2] = RF_RECE_REG[2];
 246   6                                                      again_receive_rf_decoder_finished = 1;
 247   6                                                      clear_again_and_again_time();
 248   6                                              }
 249   5      
 250   5                                      }
 251   4                                      else
 252   4                                      {
 253   5                                              old2_RF_RECE_REG[0] = RF_RECE_REG[0];
 254   5                                              old2_RF_RECE_REG[1] = RF_RECE_REG[1];
 255   5                                              old2_RF_RECE_REG[2] = RF_RECE_REG[2];
 256   5                                              again_receive_rf_decoder_finished = 1;
 257   5                                              clear_again_and_again_time();
 258   5                                      }
 259   4                                      
 260   4                                      again_and_again_decoder_table = 1;
 261   4                                      clear_return_standby_time();
 262   4                                      dat = ((uint32_t)old2_RF_RECE_REG[0]) << 16 | ((uint32_t)old2_RF_RECE_REG[1]) << 8 | ((uint32_t)old2_R
             -F_RECE_REG[2]);
 263   4      
 264   4                                      if (Find_RF_EEPROM_Host(&RFtmp, dat))
 265   4                                      {
 266   5                                              register_manager = 1;
 267   5                                              clear_return_standby_time();
 268   5                                      }
 269   4      
 270   4                                      RF_RECE_REG[0] = 0;
 271   4                                      RF_RECE_REG[1] = 0;
 272   4                                      RF_RECE_REG[2] = 0;
 273   4                                      old1_RF_RECE_REG[0] = 0;
 274   4                                      old1_RF_RECE_REG[1] = 0;
 275   4                                      old1_RF_RECE_REG[2] = 0;
 276   4                                      if (func_index_temp != TWO_MENU_F8_E2_SET)
 277   4                                      {
 278   5                                              //set_sound_table(1);
 279   5                                      }
 280   4                                      //func_f1_1_4_table = 1;
 281   4                                      rx_table = 0;
 282   4                              }
 283   3                              else
 284   3                              {
 285   4                                      old1_RF_RECE_REG[0] = RF_RECE_REG[0];
 286   4                                      old1_RF_RECE_REG[1] = RF_RECE_REG[1];
 287   4                                      old1_RF_RECE_REG[2] = RF_RECE_REG[2];
 288   4                              }
 289   3                              break;
 290   3                      }
 291   2                      EX0 = 1;        
 292   2              }
 293   1      }
*** WARNING C280 IN LINE 216 OF RECEIVER\EV1527.C: 'i': unreferenced local variable
*** WARNING C280 IN LINE 216 OF RECEIVER\EV1527.C: 'j': unreferenced local variable
C51 COMPILER V9.00   EV1527                                                                11/05/2015 14:58:07 PAGE 6   

*** WARNING C280 IN LINE 217 OF RECEIVER\EV1527.C: 'temp_buff': unreferenced local variable
*** WARNING C280 IN LINE 218 OF RECEIVER\EV1527.C: 'temp_buff1': unreferenced local variable
 294          
 295          void RF_decode_main_sjz_test(void)
 296          {
 297   1      
 298   1              if (P3_RF_RXD == 1)
 299   1              {
 300   2                      ++RF_trans1;
 301   2              }
 302   1              else
 303   1              {
 304   2                      ++RF_trans0;
 305   2              }
 306   1              Timer0_interrupt_count++;
 307   1              if (Timer0_interrupt_count>4000)/*4000*100us=400ms,*/
 308   1              {
 309   2                      TR1 = 0;/*shut down timer0 interrupt sjz*/
 310   2                      EX0 = 1;
 311   2                      RF_ini_receive();
 312   2                      return;
 313   2              }
 314   1              switch (P_RF_INT)
 315   1              {
 316   2              case 0:  //等待长低电平同步
 317   2                      if (RF_trans1 > 0)
 318   2                      {
 319   3                              //包含的高脉冲太多
 320   3      
 321   3                              EX0 = 1;
 322   3                              TR1 = 0;
 323   3                              RF_ini_receive();
 324   3                              return;
 325   3                      }
 326   2                      if (RF_trans0 >(60 + RF_trans1_test_count*TUNNING_STEP))
 327   2                      {
 328   3                              //长低同步完成
 329   3                              P_RF_INT++;
 330   3                              measure_sync_count1 = 60 + RF_trans1_test_count*TUNNING_STEP;
 331   3                              RF_trans0 = RF_trans1 = 0;
 332   3                      }
 333   2                      break;
 334   2              case 1: //等待真正的同步头
 335   2                      if ((RF_trans0 + RF_trans1) >(120 + RF_trans0_test_count*TUNNING_STEP))//120)/*sjz change from 150 to 12
             -0,to shorten the detection when  the header of synchronization coming*/
 336   2                      {
 337   3                              //10mS没有同步高脉冲
 338   3                              // measure_sync_count2=RF_trans0;
 339   3                              if (RF_trans1 == 0)
 340   3                              {
 341   4                                      RF_trans0_test_count++;
 342   4                                      RF_trans1_test_count++;
 343   4                              }
 344   3                              RF_ini_receive();
 345   3                              EX0 = 1;
 346   3                              TR1 = 0;
 347   3                              return;
 348   3                      }
 349   2      
 350   2                      if (RF_trans1 > 1)
 351   2                      {
 352   3                              measure_sync_count2 = 120 + RF_trans0_test_count*TUNNING_STEP;
C51 COMPILER V9.00   EV1527                                                                11/05/2015 14:58:07 PAGE 7   

 353   3                              RF_trans0_test_count = 0;
 354   3                              RF_trans1_test_count = 0;
 355   3                              //高电平同步到了(最少检测到 2 次)
 356   3                              if (EX0 == 1)
 357   3                              {
 358   4                                      EX0 = 0;/*double check,since we have already detect the synchronization,if EXTINT0 is enable,need to d
             -isable  sjz*/
 359   4                              }
 360   3                              P_RF_INT++;
 361   3                              RF_trans0 = 0;
 362   3                              // RF_L_wait_H = 1;
 363   3                      }
 364   2                      break;
 365   2              case 2:
 366   2                      if (RF_trans0 > 0)
 367   2                      {
 368   3                              Save_RF_trans1 = RF_trans1;
 369   3                              RF_trans1 = 0;
 370   3                              P_RF_INT++;
 371   3                      }
 372   2                      if (RF_trans1>((measure_sync_count2 + measure_sync_count1) >> 3))//20) /*if the high level is bigger tha
             -n 25*100us,Then should be setted as noise instead of useful signal sjz*/
 373   2                      {
 374   3                              RF_ini_receive();//KEY_HOLD = 0;
 375   3                              EX0 = 1;
 376   3                              TR1 = 0;
 377   3                              return;
 378   3                      }
 379   2                      break;
 380   2              case 3:if (RF_trans1 > 0)
 381   2              {
 382   3                                 Save_RF_trans0 = RF_trans0;
 383   3                                 RF_trans0 = 0;
 384   3                                 P_RF_INT = 2;
 385   3                                 RF_RECE_REG[RF_BIT_COUNTER / 8] <<= 1;
 386   3                                 if (Save_RF_trans1 >Save_RF_trans0)
 387   3                                 {
 388   4                                         RF_RECE_REG[(RF_BIT_COUNTER) / 8] |= 0x01;
 389   4                                 }
 390   3                                 ++RF_BIT_COUNTER;
 391   3                                 if (RF_BIT_COUNTER >23)
 392   3                                 {
 393   4                                         TR1 = 0;
 394   4                                         RF_trans_count = Save_RF_trans1 + Save_RF_trans0;
 395   4                                         RF_ini_receive();
 396   4                                              //   receive_rf_decoder_finished = 1;
 397   4                                         /*sjz*/
 398   4                                         tunning_finish_count++;
 399   4                                         measure_sync_count2_saved = measure_sync_count2_saved + measure_sync_count2;
 400   4                                         measure_sync_count2 = measure_sync_count2_saved >> 1;
 401   4                                         measure_sync_count2_saved = measure_sync_count2;
 402   4      
 403   4                                         if ((tunning_finish_count>1) && ((measure_sync_count1 - measure_sync_count1_saved <= 30) || (measur
             -e_sync_count1_saved - measure_sync_count1 <= 30)))
 404   4                                         {
 405   5                                                 measure_sync_count1_saved = measure_sync_count1_saved + measure_sync_count1;
 406   5                                                 measure_sync_count1 = measure_sync_count1_saved >> 1;
 407   5                                                 measure_sync_count1_saved = measure_sync_count1;
 408   5                                               //  decoder_speed_test_finish = 1;
 409   5                                         }
 410   4      
 411   4                                         EX0 = 1;
C51 COMPILER V9.00   EV1527                                                                11/05/2015 14:58:07 PAGE 8   

 412   4                                         break;
 413   4                                 }
 414   3              }
 415   2                         if (RF_trans0>((measure_sync_count2 + measure_sync_count1) >> 3))//20)
 416   2                         {
 417   3                                 RF_ini_receive();
 418   3                                 EX0 = 1;
 419   3                                 TR1 = 0;
 420   3                                 return;
 421   3                         }
 422   2                         break;
 423   2              default: //异常处理
 424   2              {
 425   3                                       RF_ini_receive();
 426   3                                       EX0 = 1;
 427   3                                       TR1 = 0;
 428   3              }break;
 429   2              }
 430   1      }
 431          
 432          unsigned char return_again_receive_rf_decoder_finished(void)
 433          {
 434   1              unsigned char temp;
 435   1              temp = again_receive_rf_decoder_finished;
 436   1              return temp;
 437   1      }
 438          
 439          void clear_again_receive_rf_decoder_finished(void)
 440          {
 441   1              again_receive_rf_decoder_finished = 0;
 442   1      }
 443          
 444          unsigned char return_again_and_again_decoder_table(void)
 445          {
 446   1              unsigned char temp;
 447   1              temp = again_and_again_decoder_table;
 448   1              return temp;
 449   1      }
 450          
 451          void clear_again_and_again_decoder_table(void)
 452          {
 453   1              again_and_again_decoder_table = 0;
 454   1      }
 455          
 456          unsigned char return_register_manager(void)
 457          {
 458   1              unsigned char temp;
 459   1              temp = register_manager;
 460   1              return temp;
 461   1      }
 462          
 463          void clear_register_manager(void)
 464          {
 465   1              register_manager = 0;
 466   1      }
 467          
 468          unsigned int return_RF_trans_count(void)
 469          {
 470   1              unsigned int temp;
 471   1              temp = RF_trans_count;
 472   1              return temp;
 473   1      }
C51 COMPILER V9.00   EV1527                                                                11/05/2015 14:58:07 PAGE 9   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1412    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     37      51
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
