C51 COMPILER V9.00   EV1527                                                                10/16/2015 18:13:52 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE EV1527
OBJECT MODULE PLACED IN ev1527.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\ev1527.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(
                    -.\ev1527.lst) OBJECT(ev1527.obj)

line level    source

   1          #include "ev1527.h"
   2          #include "timer.h"
   3          #include "key.h"
   4          #include "at24c256.h"
   5          #include "menu.h"
   6          
   7          /********************解码方式专用变量*******************************/
   8          unsigned char Save_RF_trans1 = 0;
   9          unsigned char Save_RF_trans0 = 0;
  10          unsigned char RF_trans0 = 0;
  11          unsigned char RF_trans1 = 0;
  12          unsigned char RF_BIT_COUNTER = 0; 
  13          unsigned char Timer0_interrupt_count = 0; //进入中断后400MS  无结果 恢复初始化操作
  14          unsigned char P_RF_INT = 0x00;
  15          unsigned char RF_RECE_REG[3] = { 0 };
  16          
  17          unsigned int measure_sync_count1 = 70; //波长保存变量
  18          unsigned int measure_sync_count2 = 120;//同上
  19          unsigned int RF_trans1_test_count = 0; //码长测试变量
  20          unsigned int RF_trans0_test_count = 0; //码长测试变量
  21          unsigned int RF_trans_count = 0;           //码长测试变量
  22          unsigned int measure_sync_count1_saved = 70;
  23          unsigned int measure_sync_count2_saved = 120;
  24          unsigned int tunning_finish_count = 0;
  25          
  26          unsigned char receive_rf_decoder_finished = 0;      //一次解码完成标志位
  27          unsigned char again_receive_rf_decoder_finished = 0;//二次解码完成标志位
  28          unsigned char rx_table = 0;                                                     //二次解码switch步骤变量
  29          unsigned char again_and_again_decoder_table = 0;     //二次编码成功标志位
  30          
  31          unsigned char register_manager = 0;
  32          
  33          
  34          
  35          
  36          
  37          unsigned char old1_RF_RECE_REG[3] = { 0 };//用于校验
  38          unsigned char old2_RF_RECE_REG[3] = { 0 };//用于读取
  39          
  40          void exint0_init(void) //外部中断0 初始化
  41          {
  42   1              EA = 1;
  43   1              EX0 = 1;
  44   1              IT0 = 1;
  45   1      }
  46          
  47          void exint0() interrupt 0 //外部中断0中断服务函数
  48          {
  49   1              EX0 = 0;
  50   1              if (TR1 == 0)
  51   1              {
  52   2                      //Init_Timer1();//sjz add for initialization timer0 before enable it
  53   2                      TR1 = 1;
  54   2              }
C51 COMPILER V9.00   EV1527                                                                10/16/2015 18:13:52 PAGE 2   

  55   1      }
  56          
  57          void RF_ini_receive(void) //初始化所有解码所用到的变量
  58          {
  59   1              Save_RF_trans1 = 0; Save_RF_trans0 = 0;
  60   1              RF_trans0 = RF_trans1 = 0;
  61   1              RF_BIT_COUNTER = 0;
  62   1              P_RF_INT = 0x00;
  63   1              Timer0_interrupt_count = 0;//sjz
  64   1      }
  65          
  66          void RF_decode_main(void)
  67          {
  68   1              if (P3_RF_RXD == 1)
  69   1              {
  70   2                      ++RF_trans1;
  71   2              }
  72   1              else
  73   1              {
  74   2                      ++RF_trans0;
  75   2              }
  76   1              Timer0_interrupt_count++;
  77   1              if (Timer0_interrupt_count>4000)/*4000*100us=400ms,*/
  78   1              {
  79   2                      TR1 = 0;/*shut down timer0 interrupt sjz*/
  80   2                      EX0 = 1;
  81   2                      RF_ini_receive();
  82   2                      return;
  83   2      
  84   2              }
  85   1              switch (P_RF_INT)
  86   1              {
  87   2              case 0:  //等待长低电平同步
  88   2                      if (RF_trans1 > 0)
  89   2                      {
  90   3                              //包含的高脉冲太多
  91   3                              RF_ini_receive();
  92   3                              EX0 = 1;
  93   3                              TR1 = 0;
  94   3                              return;
  95   3                      }
  96   2                      if (RF_trans0 > measure_sync_count1)
  97   2                      {
  98   3                              //长低同步完成
  99   3                              P_RF_INT++;
 100   3                              RF_trans0 = RF_trans1 = 0;
 101   3                      }
 102   2                      break;
 103   2              case 1: //等待真正的同步头
 104   2                      if ((RF_trans0 + RF_trans1) >measure_sync_count2)/*sjz change from 150 to 120,to shorten the detection w
             -hen  the header of synchronization coming*/
 105   2                      {
 106   3                              //10mS没有同步高脉冲
 107   3                              RF_ini_receive();
 108   3                              EX0 = 1;
 109   3                              TR1 = 0;
 110   3                              return;
 111   3                      }
 112   2                      if (RF_trans1 > 1)
 113   2                      {
 114   3                              //高电平同步到了(最少检测到 2 次)
 115   3                              if (EX0 == 1)
C51 COMPILER V9.00   EV1527                                                                10/16/2015 18:13:52 PAGE 3   

 116   3                              {
 117   4                                      EX0 = 0;/*double check,since we have already detect the synchronization,if EXTINT0 is enable,need to d
             -isable  sjz*/
 118   4                              }
 119   3                              P_RF_INT++;
 120   3                              RF_trans0 = 0;
 121   3                              // RF_L_wait_H = 1;
 122   3                      }
 123   2                      break;
 124   2              case 2:
 125   2                      if (RF_trans0 > 0)
 126   2                      {
 127   3                              Save_RF_trans1 = RF_trans1;
 128   3                              RF_trans1 = 0;
 129   3                              P_RF_INT++;
 130   3                      }
 131   2                      if (RF_trans1>((measure_sync_count2 + measure_sync_count1) >> 3)) /*if the high level is bigger than 25*
             -100us,Then should be setted as noise instead of useful signal sjz*/
 132   2                      {
 133   3                              RF_ini_receive();//KEY_HOLD = 0;
 134   3                              EX0 = 1;
 135   3                              TR1 = 0;
 136   3                              return;
 137   3                      }
 138   2                      break;
 139   2              case 3:if (RF_trans1 > 0)
 140   2              {
 141   3                                 Save_RF_trans0 = RF_trans0;
 142   3                                 RF_trans0 = 0;
 143   3                                 P_RF_INT = 2;
 144   3                                 RF_RECE_REG[RF_BIT_COUNTER / 8] <<= 1;
 145   3                                 if (Save_RF_trans1 >Save_RF_trans0)
 146   3                                 {
 147   4                                         RF_RECE_REG[(RF_BIT_COUNTER) / 8] |= 0x01;
 148   4                                 }
 149   3                                 ++RF_BIT_COUNTER;
 150   3                                 if (RF_BIT_COUNTER >23)
 151   3                                 {
 152   4                                         P_RF_INT = 4;
 153   4                                         //TR1 = 0;
 154   4                                         //RF_ini_receive();
 155   4                                         //receive_rf_decoder_finished = 1;
 156   4                                         //EX0 = 1;
 157   4                                         break;
 158   4                                 }
 159   3              }
 160   2                         if (RF_trans0>((measure_sync_count2 + measure_sync_count1) >> 3))
 161   2                         {
 162   3                                 RF_ini_receive();
 163   3                                 EX0 = 1;
 164   3                                 TR1 = 0;
 165   3                                 return;
 166   3                         }
 167   2                         break;
 168   2              case 4:
 169   2                      if (RF_trans0 > 0)
 170   2                      {
 171   3                              Save_RF_trans1 = RF_trans1;
 172   3                              RF_trans1 = 0;
 173   3                              P_RF_INT++;
 174   3                      }
 175   2                      if (RF_trans1>((measure_sync_count2 + measure_sync_count1) >> 3)) /*if the high level is bigger than 25*
C51 COMPILER V9.00   EV1527                                                                10/16/2015 18:13:52 PAGE 4   

             -100us,Then should be setted as noise instead of useful signal sjz*/
 176   2                      {
 177   3                              RF_ini_receive();//KEY_HOLD = 0;
 178   3                              EX0 = 1;
 179   3                              TR1 = 0;
 180   3                              return;
 181   3                      }
 182   2                      break;
 183   2              case 5:
 184   2                      if (RF_trans1 > 0)
 185   2                      {
 186   3                              if (RF_trans0 > measure_sync_count2)
 187   3                              {
 188   4                                      TR1 = 0;
 189   4                                      //RF_ini_receive();
 190   4                                      receive_rf_decoder_finished = 1;
 191   4                                      EX0 = 1;
 192   4                              }
 193   3                              RF_ini_receive();
 194   3                      }
 195   2                      if (RF_trans0>(measure_sync_count2 + measure_sync_count1))
 196   2                      {
 197   3                              RF_ini_receive();
 198   3                              EX0 = 1;
 199   3                              TR1 = 0;
 200   3                              receive_rf_decoder_finished = 0;
 201   3                              return;
 202   3                      }
 203   2                      break;
 204   2      
 205   2              default: //异常处理
 206   2              {
 207   3                                       RF_ini_receive();
 208   3                                       EX0 = 1;
 209   3                                       TR1 = 0;
 210   3              }break;
 211   2              }
 212   1      }
 213          
 214          void receive_rf_decoder(void)
 215          {
 216   1              unsigned char i, j;
 217   1              unsigned char temp_buff[8];
 218   1              unsigned char temp_buff1[32];
 219   1              unsigned char func_index_temp = 0;
 220   1              func_index_temp = return_func_index();
 221   1      
 222   1              if (receive_rf_decoder_finished == 1)
 223   1              {
 224   2                      EX0 = 0;
 225   2                      switch (rx_table)
 226   2                      {
 227   3                      case 0: //第一次取得码
 228   3                              old1_RF_RECE_REG[0] = RF_RECE_REG[0];
 229   3                              old1_RF_RECE_REG[1] = RF_RECE_REG[1];
 230   3                              old1_RF_RECE_REG[2] = RF_RECE_REG[2];
 231   3                              rx_table = 1;
 232   3                              break;
 233   3                      case 1:
 234   3                              if (old1_RF_RECE_REG[0] == RF_RECE_REG[0] && old1_RF_RECE_REG[1] == RF_RECE_REG[1] && old1_RF_RECE_REG[
             -2] == RF_RECE_REG[2])
 235   3                              {
C51 COMPILER V9.00   EV1527                                                                10/16/2015 18:13:52 PAGE 5   

 236   4                                      if (old2_RF_RECE_REG[0] == RF_RECE_REG[0] && old2_RF_RECE_REG[1] == RF_RECE_REG[1] && old2_RF_RECE_REG
             -[2] == RF_RECE_REG[2])
 237   4                                      {
 238   5                                              if (again_and_again_decoder_table == 0) //如果该位不等于0  代表着上一次解码等于这次
 239   5                                              {
 240   6                                                      old2_RF_RECE_REG[0] = RF_RECE_REG[0];
 241   6                                                      old2_RF_RECE_REG[1] = RF_RECE_REG[1];
 242   6                                                      old2_RF_RECE_REG[2] = RF_RECE_REG[2];
 243   6                                                      again_receive_rf_decoder_finished = 1;
 244   6                                              }
 245   5      
 246   5                                      }
 247   4                                      else
 248   4                                      {
 249   5                                              old2_RF_RECE_REG[0] = RF_RECE_REG[0];
 250   5                                              old2_RF_RECE_REG[1] = RF_RECE_REG[1];
 251   5                                              old2_RF_RECE_REG[2] = RF_RECE_REG[2];
 252   5                                              again_receive_rf_decoder_finished = 1;
 253   5                                      }
 254   4                                      again_and_again_decoder_table = 1;
 255   4                                      clear_return_standby_time();
 256   4      
 257   4      
 258   4                                      for (j = 0; j<HOST_TABLE_NUMBER; j++)
 259   4                                      {
 260   5                                              IRcvStr(0xa0, HOST_TABLE_START + j*PAGE_LENGTH, temp_buff1, PAGE_LENGTH);
 261   5                                              delay10ms();
 262   5                                              for (i = 0; i<PAGE_LENGTH; i++)
 263   5                                              {
 264   6                                                      if (temp_buff1[i] == 0)
 265   6                                                      {
 266   7                                                              IRcvStr(0xa0, HOST_DATA_START + (j*PAGE_LENGTH + i) * 8, temp_buff, 8);
 267   7                                                              delay10ms();
 268   7                                                              if (temp_buff[5] == old2_RF_RECE_REG[0] && temp_buff[6] == old2_RF_RECE_REG[1] && ((temp_buff[7] >>
             - 4) == (old2_RF_RECE_REG[2] >> 4)) )
 269   7                                                              {
 270   8                                                                      register_manager = 1;
 271   8                                                                      clear_return_standby_time();
 272   8                                                                      break;
 273   8                                                                      break;
 274   8                                                              }
 275   7                                                      }
 276   6                                              }
 277   5                                      }
 278   4      
 279   4                                      RF_RECE_REG[0] = 0;
 280   4                                      RF_RECE_REG[1] = 0;
 281   4                                      RF_RECE_REG[2] = 0;
 282   4                                      old1_RF_RECE_REG[0] = 0;
 283   4                                      old1_RF_RECE_REG[1] = 0;
 284   4                                      old1_RF_RECE_REG[2] = 0;
 285   4                                      if (func_index_temp != TWO_MENU_F8_E2_SET)
 286   4                                      {
 287   5                                              set_sound_table(1);
 288   5                                      }
 289   4                                      //func_f1_1_4_table = 1;
 290   4                                      rx_table = 0;
 291   4                              }
 292   3                              else
 293   3                              {
 294   4                                      old1_RF_RECE_REG[0] = RF_RECE_REG[0];
 295   4                                      old1_RF_RECE_REG[1] = RF_RECE_REG[1];
C51 COMPILER V9.00   EV1527                                                                10/16/2015 18:13:52 PAGE 6   

 296   4                                      old1_RF_RECE_REG[2] = RF_RECE_REG[2];
 297   4                              }
 298   3                              break;
 299   3                      }
 300   2                      EX0 = 1;
 301   2                      receive_rf_decoder_finished = 0;
 302   2              }
 303   1      }
 304          
 305          void RF_decode_main_sjz_test(void)
 306          {
 307   1      
 308   1              if (P3_RF_RXD == 1)
 309   1              {
 310   2                      ++RF_trans1;
 311   2              }
 312   1              else
 313   1              {
 314   2                      ++RF_trans0;
 315   2              }
 316   1              Timer0_interrupt_count++;
 317   1              if (Timer0_interrupt_count>4000)/*4000*100us=400ms,*/
 318   1              {
 319   2                      TR1 = 0;/*shut down timer0 interrupt sjz*/
 320   2                      EX0 = 1;
 321   2                      RF_ini_receive();
 322   2                      return;
 323   2              }
 324   1              switch (P_RF_INT)
 325   1              {
 326   2              case 0:  //等待长低电平同步
 327   2                      if (RF_trans1 > 0)
 328   2                      {
 329   3                              //包含的高脉冲太多
 330   3      
 331   3                              EX0 = 1;
 332   3                              TR1 = 0;
 333   3                              RF_ini_receive();
 334   3                              return;
 335   3                      }
 336   2                      if (RF_trans0 >(60 + RF_trans1_test_count*TUNNING_STEP))
 337   2                      {
 338   3                              //长低同步完成
 339   3                              P_RF_INT++;
 340   3                              measure_sync_count1 = 60 + RF_trans1_test_count*TUNNING_STEP;
 341   3                              RF_trans0 = RF_trans1 = 0;
 342   3                      }
 343   2                      break;
 344   2              case 1: //等待真正的同步头
 345   2                      if ((RF_trans0 + RF_trans1) >(120 + RF_trans0_test_count*TUNNING_STEP))//120)/*sjz change from 150 to 12
             -0,to shorten the detection when  the header of synchronization coming*/
 346   2                      {
 347   3                              //10mS没有同步高脉冲
 348   3                              // measure_sync_count2=RF_trans0;
 349   3                              if (RF_trans1 == 0)
 350   3                              {
 351   4                                      RF_trans0_test_count++;
 352   4                                      RF_trans1_test_count++;
 353   4                              }
 354   3                              RF_ini_receive();
 355   3                              EX0 = 1;
 356   3                              TR1 = 0;
C51 COMPILER V9.00   EV1527                                                                10/16/2015 18:13:52 PAGE 7   

 357   3                              return;
 358   3                      }
 359   2      
 360   2                      if (RF_trans1 > 1)
 361   2                      {
 362   3                              measure_sync_count2 = 120 + RF_trans0_test_count*TUNNING_STEP;
 363   3                              RF_trans0_test_count = 0;
 364   3                              RF_trans1_test_count = 0;
 365   3                              //高电平同步到了(最少检测到 2 次)
 366   3                              if (EX0 == 1)
 367   3                              {
 368   4                                      EX0 = 0;/*double check,since we have already detect the synchronization,if EXTINT0 is enable,need to d
             -isable  sjz*/
 369   4                              }
 370   3                              P_RF_INT++;
 371   3                              RF_trans0 = 0;
 372   3                              // RF_L_wait_H = 1;
 373   3                      }
 374   2                      break;
 375   2              case 2:
 376   2                      if (RF_trans0 > 0)
 377   2                      {
 378   3                              Save_RF_trans1 = RF_trans1;
 379   3                              RF_trans1 = 0;
 380   3                              P_RF_INT++;
 381   3                      }
 382   2                      if (RF_trans1>((measure_sync_count2 + measure_sync_count1) >> 3))//20) /*if the high level is bigger tha
             -n 25*100us,Then should be setted as noise instead of useful signal sjz*/
 383   2                      {
 384   3                              RF_ini_receive();//KEY_HOLD = 0;
 385   3                              EX0 = 1;
 386   3                              TR1 = 0;
 387   3                              return;
 388   3                      }
 389   2                      break;
 390   2              case 3:if (RF_trans1 > 0)
 391   2              {
 392   3                                 Save_RF_trans0 = RF_trans0;
 393   3                                 RF_trans0 = 0;
 394   3                                 P_RF_INT = 2;
 395   3                                 RF_RECE_REG[RF_BIT_COUNTER / 8] <<= 1;
 396   3                                 if (Save_RF_trans1 >Save_RF_trans0)
 397   3                                 {
 398   4                                         RF_RECE_REG[(RF_BIT_COUNTER) / 8] |= 0x01;
 399   4                                 }
 400   3                                 ++RF_BIT_COUNTER;
 401   3                                 if (RF_BIT_COUNTER >23)
 402   3                                 {
 403   4                                         TR1 = 0;
 404   4                                         RF_trans_count = Save_RF_trans1 + Save_RF_trans0;
 405   4                                         RF_ini_receive();
 406   4                                              //   receive_rf_decoder_finished = 1;
 407   4                                         /*sjz*/
 408   4                                         tunning_finish_count++;
 409   4                                         measure_sync_count2_saved = measure_sync_count2_saved + measure_sync_count2;
 410   4                                         measure_sync_count2 = measure_sync_count2_saved >> 1;
 411   4                                         measure_sync_count2_saved = measure_sync_count2;
 412   4      
 413   4                                         if ((tunning_finish_count>1) && ((measure_sync_count1 - measure_sync_count1_saved <= 30) || (measur
             -e_sync_count1_saved - measure_sync_count1 <= 30)))
 414   4                                         {
 415   5                                                 measure_sync_count1_saved = measure_sync_count1_saved + measure_sync_count1;
C51 COMPILER V9.00   EV1527                                                                10/16/2015 18:13:52 PAGE 8   

 416   5                                                 measure_sync_count1 = measure_sync_count1_saved >> 1;
 417   5                                                 measure_sync_count1_saved = measure_sync_count1;
 418   5                                               //  decoder_speed_test_finish = 1;
 419   5                                         }
 420   4      
 421   4                                         EX0 = 1;
 422   4                                         break;
 423   4                                 }
 424   3              }
 425   2                         if (RF_trans0>((measure_sync_count2 + measure_sync_count1) >> 3))//20)
 426   2                         {
 427   3                                 RF_ini_receive();
 428   3                                 EX0 = 1;
 429   3                                 TR1 = 0;
 430   3                                 return;
 431   3                         }
 432   2                         break;
 433   2              default: //异常处理
 434   2              {
 435   3                                       RF_ini_receive();
 436   3                                       EX0 = 1;
 437   3                                       TR1 = 0;
 438   3              }break;
 439   2              }
 440   1      }
 441          
 442          unsigned char return_again_receive_rf_decoder_finished(void)
 443          {
 444   1              unsigned char temp;
 445   1              temp = again_receive_rf_decoder_finished;
 446   1              return temp;
 447   1      }
 448          
 449          void clear_again_receive_rf_decoder_finished(void)
 450          {
 451   1              again_receive_rf_decoder_finished = 0;
 452   1      }
 453          
 454          unsigned char return_again_and_again_decoder_table(void)
 455          {
 456   1              unsigned char temp;
 457   1              temp = again_and_again_decoder_table;
 458   1              return temp;
 459   1      }
 460          
 461          void clear_again_and_again_decoder_table(void)
 462          {
 463   1              again_and_again_decoder_table = 0;
 464   1      }
 465          
 466          unsigned char return_register_manager(void)
 467          {
 468   1              unsigned char temp;
 469   1              temp = register_manager;
 470   1              return temp;
 471   1      }
 472          
 473          void clear_register_manager(void)
 474          {
 475   1              register_manager = 0;
 476   1      }
 477          
C51 COMPILER V9.00   EV1527                                                                10/16/2015 18:13:52 PAGE 9   

 478          unsigned int return_RF_trans_count(void)
 479          {
 480   1              unsigned int temp;
 481   1              temp = RF_trans_count;
 482   1              return temp;
 483   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1793    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     37      43
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
