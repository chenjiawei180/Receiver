C51 COMPILER V9.00   GD5800                                                                10/30/2015 11:43:43 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE GD5800
OBJECT MODULE PLACED IN gd5800.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\gd5800.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(
                    -.\gd5800.lst) OBJECT(gd5800.obj)

line level    source

   1          #include "gd5800.h"
   2          #include "usart.h"
   3          #include "menu.h"
   4          #include "key.h"
   5          
   6          void GD5800_initialization(void)
   7          {
   8   1              /***********************/
   9   1              Usart2_SendData(0x7E);       /***frame command ****/
  10   1              Usart2_SendData(0X03);
  11   1              Usart2_SendData(0X33);
  12   1              Usart2_SendData(0x04);
  13   1              Usart2_SendData(0XEF);
  14   1              /***********************/
  15   1      }
  16          
  17          void GD5800_select_chapter(unsigned int chapter_number)
  18          {
  19   1              Usart2_SendData(0x7E);       /***frame command ****/
  20   1              Usart2_SendData(0X04);
  21   1              Usart2_SendData(0X41);
  22   1              Usart2_SendData(chapter_number >> 8);
  23   1              Usart2_SendData(chapter_number);
  24   1              Usart2_SendData(0XEF);
  25   1      
  26   1      }
  27          
  28          void GD5800_sound_volume(unsigned char volume)
  29          {
  30   1              Usart2_SendData(0x7E);       /***frame command ****/
  31   1              Usart2_SendData(0X03);
  32   1              Usart2_SendData(0X31);
  33   1              Usart2_SendData(volume);
  34   1              Usart2_SendData(0XEF);
  35   1      
  36   1      }
  37          
  38          void GD5800_stop_music(void)
  39          {
  40   1              Usart2_SendData(0x7E);       /***frame command ****/
  41   1              Usart2_SendData(0X02);
  42   1              Usart2_SendData(0x0E);
  43   1              Usart2_SendData(0XEF);
  44   1      }
  45          
  46          void GD5800_play_music(void)
  47          {
  48   1              Usart2_SendData(0x7E);       /***frame command ****/
  49   1              Usart2_SendData(0X02);
  50   1              Usart2_SendData(0x01);
  51   1              Usart2_SendData(0XEF);
  52   1      }
  53          
  54          void submenuf6_1_voiceselect(unsigned char report_mode, unsigned char *report_number)
C51 COMPILER V9.00   GD5800                                                                10/30/2015 11:43:43 PAGE 2   

  55          {
  56   1              unsigned char *number;
  57   1              number = report_number;
  58   1              if (report_mode <= NOT_REPORT_C)
  59   1              {
  60   2                      if (report_mode <= NOT_REPORT)
  61   2                      {
  62   3                              GD5800_select_chapter(*(number + 2) + ZERO);/*呼叫号数百位*/
  63   3                      }
  64   2                      else
  65   2                      {
  66   3                              if (*(number + 2) != 0)
  67   3                              {
  68   4                                      GD5800_select_chapter(*(number + 2) + ZERO);
  69   4                                      GD5800_select_chapter(HUNDRED);/*hundred 的声音*/
  70   4                                      GD5800_select_chapter(AND);/*and的声音*/
  71   4                              }
  72   3                      }
  73   2      
  74   2                      if (report_mode <= NOT_REPORT)
  75   2                      {
  76   3                              GD5800_select_chapter(*(number + 3) + ZERO);
  77   3                      }
  78   2                      else
  79   2                      {
  80   3                              if (*(number + 3) != 0)
  81   3                              {
  82   4                                      if (*(number + 3) == 1)
  83   4                                      {
  84   5                                              if (*(number + 4) == 0) //10
  85   5                                              {
  86   6                                                      GD5800_select_chapter(TEN);
  87   6                                              }
  88   5                                              else//11-19
  89   5                                              {
  90   6                                                      GD5800_select_chapter(*(number + 4) + ELEVEN - 1);
  91   6                                              }
  92   5                                      }
  93   4                                      else//20-90
  94   4                                      {
  95   5                                              GD5800_select_chapter(*(number + 3) + TWENTY - 2);
  96   5                                      }
  97   4                              }
  98   3                      }
  99   2      
 100   2                      if (report_mode <= NOT_REPORT)
 101   2                      {
 102   3                              GD5800_select_chapter(*(number + 4) + ZERO);
 103   3                      }
 104   2                      else
 105   2                      {
 106   3                              if (*(number + 4) != 0 && *(number + 3) != 1)
 107   3                              {
 108   4                                      GD5800_select_chapter(*(number + 4) + ZERO);
 109   4      
 110   4                              }
 111   3                      }
 112   2              }
 113   1      
 114   1              else
 115   1              {
 116   2                      switch (report_mode)
C51 COMPILER V9.00   GD5800                                                                10/30/2015 11:43:43 PAGE 3   

 117   2                      {
 118   3                      case DINGDONG_type:
 119   3                              GD5800_select_chapter(DINGDONG);
 120   3                              break;
 121   3                      case YINYUEYI_type:
 122   3                              GD5800_select_chapter(YINGYUEYI);
 123   3                              break;
 124   3                      case YINYUEER_type:
 125   3                              GD5800_select_chapter(YINGYUEER);
 126   3                              break;
 127   3                      case EMERGENCY_type:
 128   3                              GD5800_select_chapter(BAOJING);
 129   3                              break;
 130   3                      default:break;
 131   3                      }
 132   2              }
 133   1      }
 134          
 135          /*sjz********************************************************************************8****
 136          void submenuf6_1(unsigned char report_mode,unsigned char *report_number,unsigned int call_type)
 137          parameters:
 138          report_mode: 0----simple report   1----complicated report  2-----do not need report type
 139          3----"dingdong" voice  4-----"dingdang" voice  5 ----emergency voice
 140          the pointer of report_number:   has three digital number,the range is from 0 to 999
 141          and the pointer is from the array[1] to array[3]
 142          call_type:   1----restaurant mode  2-----hospital mode
 143          3----bank mode  etc
 144          key_value:
 145          case 0:cancel;
 146          case 1:temp_buff[6]=0x0b;break;
 147          case 2:temp_buff[6]=0x0d;break;
 148          case 3:temp_buff[6]=0x0c;break;
 149          case 5:temp_buff[6]=0x13;break;
 150          case 6:temp_buff[6]=0x0e;break;
 151          case 7:temp_buff[6]=0x0f;break;
 152          *****************************************************************************************/
 153          void submenuf6_1(unsigned char report_mode, unsigned char *report_number, unsigned int call_type, unsigned
             - char key_value)
 154          {
 155   1              unsigned int mode;
 156   1              unsigned char *number;
 157   1              unsigned int  type;
 158   1              unsigned char key;
 159   1              unsigned char Two_Menu_F7_E1_temp = 0;
 160   1              unsigned char Two_Menu_F6_E7_temp = 0;
 161   1              Two_Menu_F7_E1_temp = return_Two_Menu_F7_E1();
 162   1              Two_Menu_F6_E7_temp = return_Two_Menu_F6_E7();
 163   1              mode = report_mode;
 164   1              number = report_number;
 165   1              type = call_type;
 166   1              key = key_value;
 167   1              if (mode <= NOT_REPORT_C )
 168   1              {
 169   2                      GD5800_select_chapter(DINGDONG);
 170   2                      if (key != 15)//防区号是否当前缀
 171   2                      {
 172   3                              if (Two_Menu_F6_E7_temp == 0 || (Two_Menu_F6_E7_temp == 1 && mode >= COMPLICATED_REPORT))
 173   3                              {
 174   4                                      GD5800_select_chapter(HAO);
 175   4                              }
 176   3      
 177   3                              if (Two_Menu_F7_E1_temp == 10)
C51 COMPILER V9.00   GD5800                                                                10/30/2015 11:43:43 PAGE 4   

 178   3                              {
 179   4                                      if (*(number + 1) <= 9)
 180   4                                      {
 181   5                                              if (report_mode <= NOT_REPORT)
 182   5                                              {
 183   6                                                      GD5800_select_chapter(*(number + 1) + ZERO);
 184   6                                              }
 185   5                                              else
 186   5                                              {
 187   6                                                      if (*(number + 1) != 0)
 188   6                                                      {
 189   7                                                              GD5800_select_chapter(*(number + 1) + ZERO);
 190   7                                                              GD5800_select_chapter(THOUSAND);
 191   7                                                      }
 192   6                                              }
 193   5      
 194   5                                      }
 195   4                                      else if (*(number + 1) <= 15 && *(number + 1) >= 10)
 196   4                                      {
 197   5                                              GD5800_select_chapter(*(number + 1) + ZIMU_A - 10);
 198   5                                      }
 199   4                                      else
 200   4                                      {
 201   5                                              switch (*(number + 1))
 202   5                                              {
 203   6                                              case 16:GD5800_select_chapter(ZIMU_H); break;//H
 204   6                                              case 17:GD5800_select_chapter(ZIMU_L); break;//L
 205   6                                              case 18:GD5800_select_chapter(ZIMU_O); break;//O
 206   6                                              case 19:GD5800_select_chapter(ZIMU_P); break;//P
 207   6                                              case 20:GD5800_select_chapter(ZIMU_U); break;//U
 208   6                                              default:break;
 209   6                                              }
 210   5                                      }
 211   4                              }
 212   3                      }
 213   2                      else
 214   2                      {
 215   3                              GD5800_select_chapter(QING);
 216   3                      }
 217   2                      submenuf6_1_voiceselect(mode, number);
 218   2      
 219   2                      if (Two_Menu_F6_E7_temp == 1 && report_mode <= NOT_REPORT)
 220   2                      {
 221   3                              GD5800_select_chapter(HAO);
 222   3                      }
 223   2      
 224   2                      if (key == 15)
 225   2                      {
 226   3                              GD5800_select_chapter(DAO);
 227   3                              if (Two_Menu_F7_E1_temp == 10)
 228   3                              {       
 229   4                                      if (*(number + 1) <= 9)
 230   4                                      {
 231   5                                              GD5800_select_chapter(*(number + 1) + ZERO);
 232   5                                      }
 233   4                                      else if (*(number + 1) <= 15)
 234   4                                      {
 235   5                                              GD5800_select_chapter(*(number + 1) + ZIMU_A - 10);
 236   5                                      }
 237   4                                      else
 238   4                                      {
 239   5                                              switch (*(number + 1))
C51 COMPILER V9.00   GD5800                                                                10/30/2015 11:43:43 PAGE 5   

 240   5                                              {
 241   6                                              case 16:GD5800_select_chapter(ZIMU_H); break;//H
 242   6                                              case 17:GD5800_select_chapter(ZIMU_L); break;//L
 243   6                                              case 18:GD5800_select_chapter(ZIMU_O); break;//O
 244   6                                              case 19:GD5800_select_chapter(ZIMU_P); break;//P
 245   6                                              case 20:GD5800_select_chapter(ZIMU_U); break;//U
 246   6                                              default:break;
 247   6                                              }
 248   5                                      }
 249   4                              }
 250   3                              GD5800_select_chapter(GUITAI);
 251   3                      }
 252   2                      else if (mode != NOT_REPORT && mode != NOT_REPORT_C)
 253   2                      {
 254   3                              if (type < 50)
 255   3                              {
 256   4                                      GD5800_select_chapter(type + QUXIAO);
 257   4                              }
 258   3                              else if (type == BAOJING_1)
 259   3                              {
 260   4                                      GD5800_select_chapter(BAOJING);
 261   4                              }                       
 262   3                      }
 263   2              }
 264   1              else
 265   1              {
 266   2                      if (type == BAOJING_1 || type == BAOJING-QUXIAO)
 267   2                      {
 268   3                              GD5800_select_chapter(BAOJING);
 269   3                      }
 270   2                      else
 271   2                      {
 272   3                              submenuf6_1_voiceselect(mode, number);
 273   3                      }
 274   2              }
 275   1      }
 276          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1086    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
