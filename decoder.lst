C51 COMPILER V9.00   DECODER                                                               09/18/2015 17:31:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE DECODER
OBJECT MODULE PLACED IN decoder.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\decoder.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT
                    -(.\decoder.lst) TABS(2) OBJECT(decoder.obj)

line level    source

   1          #include "decoder.h"
   2          #include "ev1527.h"
   3          #include "usart.h"
   4          #include "at24c256.h"
   5          #include "key.h"
   6          #include "menu.h"
   7          #include "tm1629.h"
   8          #include "timer.h"
   9          
  10          unsigned char buf_eeprom[8] = { 0 };//Ğ´ÈëEEPROM_buf
  11          
  12          void DecoderProcess(void)
  13          { 
  14   1        unsigned char i, j ,l ,k;
  15   1        unsigned char temp_buff[8];//½âÂëÓÃÁÙÊ±Êı×é
  16   1        unsigned char temp_buff1[PAGE_LENGTH] = { 0 };//²éÑ¯AT24C256ÁÙÊ±Êı×é
  17   1      
  18   1        unsigned char func_index_temp = 0;    //´´½¨ÁÙÊ±±äÁ¿£¬ÓÃÓÚ·Å»ØÆäËûÍâ²¿±äÁ¿
  19   1        unsigned char Two_Menu_F8_E1_temp = 0;  //´´½¨ÁÙÊ±±äÁ¿£¬ÓÃÓÚ·Å»ØÆäËûÍâ²¿±äÁ¿
  20   1        unsigned char Two_Menu_F3_E1_temp = 0;  //´´½¨ÁÙÊ±±äÁ¿£¬ÓÃÓÚ·Å»ØÆäËûÍâ²¿±äÁ¿  
  21   1        unsigned char Two_Menu_F3_E2_temp = 0;  //´´½¨ÁÙÊ±±äÁ¿£¬ÓÃÓÚ·Å»ØÆäËûÍâ²¿±äÁ¿
  22   1        unsigned char Two_Menu_F7_E1_temp = 0;  //´´½¨ÁÙÊ±±äÁ¿£¬ÓÃÓÚ·Å»ØÆäËûÍâ²¿±äÁ¿
  23   1      
  24   1        func_index_temp = return_func_index();  //·µ»ØËùĞèÒªµÄÍâ²¿±äÁ¿
  25   1        Two_Menu_F8_E1_temp = return_Two_Menu_F8_E1();  //·µ»ØËùĞèÒªµÄÍâ²¿±äÁ¿
  26   1        Two_Menu_F3_E1_temp = return_Two_Menu_F3_E1();  //·µ»ØËùĞèÒªµÄÍâ²¿±äÁ¿
  27   1        Two_Menu_F3_E2_temp = return_Two_Menu_F3_E2();  //·µ»ØËùĞèÒªµÄÍâ²¿±äÁ¿
  28   1        Two_Menu_F7_E1_temp = return_Two_Menu_F7_E1();  //·µ»ØËùĞèÒªµÄÍâ²¿±äÁ¿
  29   1      
  30   1        receive_rf_decoder(); //½âÂëº¯Êı
  31   1      
  32   1        if (return_again_receive_rf_decoder_finished() == 1) //±êÖ¾Î»µÈÓÚ1 ËµÃ÷ÔÚ2´Î¼ìÑéÏÂÍ¨¹ı,½ÓÊÕµ½ÓĞĞ§Âë
  33   1        {
  34   2      #ifdef DEBUG
  35   2          uart_printf("decoder_val is %02x %02x %02x .\r\n", (unsigned int)old2_RF_RECE_REG[0], (unsigned int)old2
             -_RF_RECE_REG[1], (unsigned int)old2_RF_RECE_REG[2]); //²âÊÔ°´¼ü¼üÖµ
  36   2      #endif
  37   2          switch (func_index_temp)
  38   2          {
  39   3          case MENU_STANDBY://´ı»ú×´Ì¬ÏÂ
  40   3          {
  41   4            set_logout_cycle_table(0);//Ñ­»·¸úÏúºÅÖØĞÂ¼ÆÊı
  42   4            //¼üÅÌ¹æÔò
  43   4            if ((old2_RF_RECE_REG[2] & 0xf0) == 0x00 && (((old2_RF_RECE_REG[0] >> 4) == Two_Menu_F7_E1_temp) || (Tw
             -o_Menu_F7_E1_temp == 11)))//¼üÅÌ¹æÔò£¬³ÌĞò°´Ä¬ÈÏµÄÀ´±à
  44   4            {
  45   5              temp_buff[0] = old2_RF_RECE_REG[2] & 0x0f;  //Îª°´¼üÖµ
  46   5              temp_buff[1] = old2_RF_RECE_REG[0] >> 4;  //Îª·ÀÇøºÅ
  47   5              temp_buff[2] = old2_RF_RECE_REG[0] & 0x0f;  //Îª3Î»×éÂëµÚÒ»Î»
  48   5              temp_buff[3] = old2_RF_RECE_REG[1] >> 4;  //Îª3Î»×éÂëµÚ¶şÎ»
  49   5              temp_buff[4] = old2_RF_RECE_REG[1] & 0x0f;  //Îª3Î»×éÂëµÚÈıÎ»
  50   5              temp_buff[5] = old2_RF_RECE_REG[0];     //±¸ÓÃÏî,ÔİÇÒ´æµÚÒ»Î»IDÂë
  51   5      
  52   5              tm1629_clear();//ÇåÆÁ
C51 COMPILER V9.00   DECODER                                                               09/18/2015 17:31:09 PAGE 2   

  53   5              decoder_temp_to_mcuram(display_ram, temp_buff);//½«ÁÙÊ±Êı×éµÄÊı¾İÒÆÈëµ¥Æ¬»úÔİ´æÊı×é 8×Ö½Ú×ª6×Ö½Ú
  54   5              tm1629_load();//µ¥Æ¬»ú°ÑÊı×éÄÚÈİÔØÈëÊıÂë¹ÜÏÔ´æÊı×éÖĞ
  55   5              display();//ÏÔÊ¾ÊıÂë¹Ü
  56   5              set_func_index(DECODER_MENU);//´ËÊ±ÌøÈë½âÂë²Ëµ¥£¬ÎªÏÂÒ»´Î½âÂë×ö×¼±¸
  57   5              //clear_again_receive_rf_decoder_finished();//Çå³ı½âÂëÍê³É±êÖ¾Î»
  58   5      
  59   5              break;
  60   5            }
  61   4            //ºô½ĞÆ÷×¢²á,ËÑË÷ËùĞèÒªµÄºô½ĞÆ÷
  62   4             for (j = 0; j<(CALL_TABLE_NUMBER + CANCEL_TABLE_NUMBER + ALARM_TABLE_NUMBER); j++)//ËÑË÷±êÖ¾Î»
  63   4            {
  64   5              IRcvStr(I2C_ADDRESS, j*PAGE_LENGTH, temp_buff1, PAGE_LENGTH);//¶Á³ö32¸ö×Ö½Ú±êÖ¾Î»
  65   5              delay10ms();
  66   5              for (i = 0; i<PAGE_LENGTH; i++) //¶Ô¶Á³öµÄ32×Ö½Ú±êÖ¾Î»½øĞĞ²é¿´£¬¿´ÊÇ·ñÎª0
  67   5              {
  68   6                if (temp_buff1[i] == 0)//±êÖ¾Î»Îª0´ú±í¸Ã±êÖ¾Î»Ëù¶ÔÓ¦µÄÊı¾İÇøÓĞÊı¾İ
  69   6                { 
  70   7      #ifdef DEBUG
  71   7                  uart_printf("find a table!");
  72   7      #endif
  73   7                  IRcvStr(I2C_ADDRESS, CALL_DATA_START + (j * 32 + i) * 8, temp_buff, 8);//¶Á³ö¶ÔÓ¦µÄ8¸ö×Ö½ÚµÄÊı¾İ
  74   7                  delay10ms();
  75   7                  if (((Two_Menu_F8_E1_temp != 1) && temp_buff[5] == old2_RF_RECE_REG[0] && temp_buff[6] == old2_RF_RE
             -CE_REG[1] && ((temp_buff[7] >> 4) == (old2_RF_RECE_REG[2] >> 4))) || ((Two_Menu_F8_E1_temp == 1) && temp_buff[5] == old2
             -_RF_RECE_REG[0] && temp_buff[6] == old2_RF_RECE_REG[1] && temp_buff[7] == old2_RF_RECE_REG[2]))// ½øĞĞ¶Ô±È£¬¿´¿´Êı¾İÊÇ·ñ
             -·ûºÏ
  76   7                  {
  77   8                      tm1629_clear();//ÇåÆÁ
  78   8                      decoder_temp_to_mcuram(display_ram, temp_buff);//Èç¹û·ûºÏµÄ»°  ½«ÁÙÊ±Êı×éµÄÊı¾İÒÆÈëµ¥Æ¬»úÔİ´æÊı×é 
             -8×Ö½Ú×ª6×Ö½Ú
  79   8                      tm1629_load();//µ¥Æ¬»ú°ÑÊı×éÄÚÈİÔØÈëÊıÂë¹ÜÏÔ´æÊı×éÖĞ
  80   8                      display();//ÏÔÊ¾ÊıÂë¹Ü
  81   8      #ifdef DEBUG
  82   8                      uart_printf("decoder success!"); 
  83   8      #endif
  84   8      
  85   8      #ifdef DEBUG
  86   8                      uart_printf("display_ram is %02x %02x %02x %02x.\r\n", (unsigned int)display_ram[0], (unsigned int
             -)display_ram[1], (unsigned int)display_ram[2], (unsigned int)display_ram[3]); //²âÊÔ°´¼ü¼üÖµ
  87   8      #endif
  88   8      
  89   8                      set_func_index(DECODER_MENU);;//´ËÊ±ÌøÈë½âÂë²Ëµ¥£¬ÎªÏÂÒ»´Î½âÂë×ö×¼±¸
  90   8                      clear_again_receive_rf_decoder_finished();//Çå³ı½âÂëÍê³É±êÖ¾Î»
  91   8                      break;
  92   8                      break;
  93   8                  }
  94   7                }
  95   6              }
  96   5            } 
  97   4             break;
  98   4          }
  99   3      
 100   3          case DECODER_MENU: //½âÂë²Ëµ¥ÏÂ
 101   3          {
 102   4            set_logout_cycle_table(0);//Ñ­»·¸úÏúºÅÖØĞÂ¼ÆÊı
 103   4             //¼üÅÌ¹æÔò
 104   4            if ((old2_RF_RECE_REG[2] & 0xf0) == 0x00 && (((old2_RF_RECE_REG[0] >> 4) == Two_Menu_F7_E1_temp) || (Tw
             -o_Menu_F7_E1_temp == 11)))//¼üÅÌ¹æÔò£¬³ÌĞò°´Ä¬ÈÏµÄÀ´±à
 105   4            {
 106   5              temp_buff[0] = old2_RF_RECE_REG[2] & 0x0f;  //Îª°´¼üÖµ
 107   5              temp_buff[1] = old2_RF_RECE_REG[0] >> 4;  //Îª·ÀÇøºÅ
 108   5              temp_buff[2] = old2_RF_RECE_REG[0] & 0x0f;  //Îª3Î»×éÂëµÚÒ»Î»
C51 COMPILER V9.00   DECODER                                                               09/18/2015 17:31:09 PAGE 3   

 109   5              temp_buff[3] = old2_RF_RECE_REG[1] >> 4;  //Îª3Î»×éÂëµÚ¶şÎ»
 110   5              temp_buff[4] = old2_RF_RECE_REG[1] & 0x0f;  //Îª3Î»×éÂëµÚÈıÎ»
 111   5              temp_buff[5] = old2_RF_RECE_REG[0];     //±¸ÓÃÏî,ÔİÇÒ´æµÚÒ»Î»IDÂë
 112   5              if (Two_Menu_F3_E1_temp == 1)       //Îª¼´Ê±Ä£Ê½
 113   5              {
 114   6                for (l = Two_Menu_F3_E2_temp; l>1; l--) //ÕûÌåÍùÏÂÒÆÒ»×éÊı¾İ
 115   6                {
 116   7                  mcuram_to_mcuram_down(display_ram + (l - 2) * 6);
 117   7                }
 118   6                for (l = 0; l<6; l++) //½²µÚÒ»×éÊı¾İÇå0
 119   6                {
 120   7                  display_ram[l] = 0;
 121   7                }
 122   6                decoder_temp_to_mcuram(display_ram, temp_buff); //Èç¹û·ûºÏµÄ»°  ½«ÁÙÊ±Êı×éµÄÊı¾İÒÆÈëµ¥Æ¬»úÔİ´æÊı×é 8×
             -Ö½Ú×ª6×Ö½Ú
 123   6                tm1629_load();//µ¥Æ¬»ú°ÑÊı×éÄÚÈİÔØÈëÊıÂë¹ÜÏÔ´æÊı×éÖĞ
 124   6                display();//ÏÔÊ¾ÊıÂë¹Ü
 125   6              }
 126   5              else if (Two_Menu_F3_E1_temp == 2)//ÎªÑ­»·Ä£Ê½
 127   5              {
 128   6                for (k = 0; k < Two_Menu_F3_E2_temp; k++)
 129   6                {
 130   7                  if (display_ram[k * 6] == 0)//ÕÒ³öÎ»ÓÚ¶ÓÁĞ×îºóµÄÄÇ¸öµã
 131   7                  {
 132   8                    decoder_temp_to_mcuram(display_ram + k * 6, temp_buff);//Èç¹û·ûºÏµÄ»°  ½«ÁÙÊ±Êı×éµÄÊı¾İÒÆÈëµ¥Æ¬»úÔİ
             -´æÊı×é 8×Ö½Ú×ª6×Ö½Ú
 133   8                    tm1629_load();//µ¥Æ¬»ú°ÑÊı×éÄÚÈİÔØÈëÊıÂë¹ÜÏÔ´æÊı×éÖĞ
 134   8                    display();//ÏÔÊ¾ÊıÂë¹Ü
 135   8                    break;
 136   8                  }
 137   7                }
 138   6      
 139   6              }
 140   5              //clear_again_receive_rf_decoder_finished();//Çå³ı½âÂëÍê³É±êÖ¾Î»
 141   5              break;
 142   5            }
 143   4            //ºô½ĞÆ÷×¢²á,ËÑË÷ËùĞèÒªµÄºô½ĞÆ÷
 144   4            for (j = 0; j<CALL_TABLE_NUMBER + ALARM_TABLE_NUMBER + CANCEL_TABLE_NUMBER; j++)//ËÑË÷±êÖ¾Î»
 145   4            {
 146   5              IRcvStr(I2C_ADDRESS, j*PAGE_LENGTH, temp_buff1, PAGE_LENGTH);//¶Á³ö32¸ö×Ö½Ú±êÖ¾Î»
 147   5              delay10ms();
 148   5              for (i = 0; i<PAGE_LENGTH; i++)
 149   5              {
 150   6                if (temp_buff1[i] == 0)//¶Ô¶Á³öµÄ32×Ö½Ú±êÖ¾Î»½øĞĞ²é¿´£¬¿´ÊÇ·ñÎª0
 151   6                {
 152   7                  IRcvStr(I2C_ADDRESS, CALL_DATA_START + (j * 32 + i) * 8, temp_buff, 8);//¶Á³ö¶ÔÓ¦µÄ8¸ö×Ö½ÚµÄÊı¾İ
 153   7                  delay10ms();
 154   7                  if (((Two_Menu_F8_E1_temp != 1) && temp_buff[5] == old2_RF_RECE_REG[0] && temp_buff[6] == old2_RF_RE
             -CE_REG[1] && ((temp_buff[7] >> 4) == (old2_RF_RECE_REG[2] >> 4))) || ((Two_Menu_F8_E1_temp == 1) && temp_buff[5] == old2
             -_RF_RECE_REG[0] && temp_buff[6] == old2_RF_RECE_REG[1] && temp_buff[7] == old2_RF_RECE_REG[2]))
 155   7                  {
 156   8      
 157   8                    if (Two_Menu_F3_E1_temp == 1)//Îª¼´Ê±Ä£Ê½
 158   8                    {
 159   9                      for (l = Two_Menu_F3_E2_temp; l>1; l--) //ÕûÌåÍùÏÂÒÆÒ»×éÊı¾İ
 160   9                      {
 161  10                        mcuram_to_mcuram_down(display_ram + (l - 2) * 6);
 162  10                      }
 163   9                      for (l = 0; l<6; l++)//½²µÚÒ»×éÊı¾İÇå0
 164   9                      {
 165  10                        display_ram[l] = 0;
 166  10                      }
C51 COMPILER V9.00   DECODER                                                               09/18/2015 17:31:09 PAGE 4   

 167   9                      decoder_temp_to_mcuram(display_ram, temp_buff);//Èç¹û·ûºÏµÄ»°  ½«ÁÙÊ±Êı×éµÄÊı¾İÒÆÈëµ¥Æ¬»úÔİ´æÊı×é 
             -8×Ö½Ú×ª6×Ö½Ú
 168   9                      tm1629_load();//µ¥Æ¬»ú°ÑÊı×éÄÚÈİÔØÈëÊıÂë¹ÜÏÔ´æÊı×éÖĞ
 169   9                      display();//ÏÔÊ¾ÊıÂë¹Ü
 170   9                    }
 171   8                  else if (Two_Menu_F3_E1_temp == 2)//ÎªÑ­»·Ä£Ê½
 172   8                  {
 173   9                    for (k = 0; k < Two_Menu_F3_E2_temp; k++)
 174   9                    {
 175  10                      if (display_ram[k * 6 ] == 0)//ÕÒ³öÎ»ÓÚ¶ÓÁĞ×îºóµÄÄÇ¸öµã
 176  10                      {
 177  11                        decoder_temp_to_mcuram(display_ram + k * 6, temp_buff);//  ½«ÁÙÊ±Êı×éµÄÊı¾İÒÆÈëµ¥Æ¬»úÔİ´æÊı×é 8×Ö
             -½Ú×ª6×Ö½Ú
 178  11                        tm1629_load();//µ¥Æ¬»ú°ÑÊı×éÄÚÈİÔØÈëÊıÂë¹ÜÏÔ´æÊı×éÖĞ
 179  11                        display();//ÏÔÊ¾ÊıÂë¹Ü
 180  11                        break;
 181  11                      }
 182  10                    }
 183   9                  }
 184   8      #ifdef DEBUG
 185   8                    uart_printf("decoder success!");
 186   8      #endif
 187   8      
 188   8      #ifdef DEBUG
 189   8                    uart_printf("display_ram is %02x %02x %02x %02x.\r\n", (unsigned int)display_ram[0], (unsigned int)
             -display_ram[1], (unsigned int)display_ram[2], (unsigned int)display_ram[3]); //²âÊÔ°´¼ü¼üÖµ
 190   8      #endif
 191   8                    clear_again_receive_rf_decoder_finished();
 192   8                    break;
 193   8                    break;
 194   8                  }
 195   7                }
 196   6              }
 197   5            }
 198   4            break;
 199   4          }
 200   3      
 201   3          case TWO_MENU_F1_E1_D1:
 202   3          case TWO_MENU_F1_E1_D2:
 203   3          case TWO_MENU_F1_E1_D3:
 204   3          case TWO_MENU_F1_E1_D4:
 205   3          {
 206   4            set_func_index(TWO_MENU_F1_E1_D4);
 207   4            buf_eeprom[0] = old2_RF_RECE_REG[2] & 0x0f;//°´¼üÖµ±£´æµ½0×Ö½Ú
 208   4            buf_eeprom[1] = Two_Menu_F1_E1[0];/*ÊıÖµ´æÈë1 2 3 4×Ö½Ú*/
 209   4            buf_eeprom[2] = Two_Menu_F1_E1[1];
 210   4            buf_eeprom[3] = Two_Menu_F1_E1[2];
 211   4            buf_eeprom[4] = Two_Menu_F1_E1[3];
 212   4            buf_eeprom[5] = old2_RF_RECE_REG[0];// IDÂë´æÈë 5 6 7 ×Ö½Ú
 213   4            buf_eeprom[6] = old2_RF_RECE_REG[1];
 214   4            if (Two_Menu_F8_E1_temp == 1)
 215   4            {
 216   5              buf_eeprom[7] = old2_RF_RECE_REG[2];
 217   5            }
 218   4            else
 219   4            {
 220   5              buf_eeprom[7] = old2_RF_RECE_REG[2] & 0xf0;
 221   5            }
 222   4      
 223   4            if (register_call_function(buf_eeprom))//ÊıÖµ×Ô¶¯¼Ó1
 224   4            {
 225   5      #ifdef DEBUG
C51 COMPILER V9.00   DECODER                                                               09/18/2015 17:31:09 PAGE 5   

 226   5              uart_printf("call is %02x %02x %02x .\r\n", (unsigned int)buf_eeprom[5], (unsigned int)buf_eeprom[6], 
             -(unsigned int)buf_eeprom[7]); //²âÊÔ°´¼ü¼üÖµ
 227   5              uart_printf("call is %02x %02x %02x %02x.\r\n", (unsigned int)Two_Menu_F1_E1[0], (unsigned int)Two_Men
             -u_F1_E1[1], (unsigned int)Two_Menu_F1_E1[2], (unsigned int)Two_Menu_F1_E1[3]);
 228   5              uart_printf("caller is rigister success \r\n");
 229   5      #endif          
 230   5              delay10ms();
 231   5              if (Two_Menu_F1_E1[3] == 9)
 232   5              {
 233   6                if (Two_Menu_F1_E1[2] == 9)
 234   6                {
 235   7                  if (Two_Menu_F1_E1[1] == 9)
 236   7                  {
 237   8                    Two_Menu_F1_E1[0]++;
 238   8                    Two_Menu_F1_E1[1] = 0;
 239   8                    Two_Menu_F1_E1[2] = 0;
 240   8                    if (Two_Menu_F1_E1[0] == 21)
 241   8                    {
 242   9                      Two_Menu_F1_E1[0] = 0;
 243   9                      Two_Menu_F1_E1[3] = 1;
 244   9                    }
 245   8                    else
 246   8                    {
 247   9                      Two_Menu_F1_E1[3] = 1;
 248   9                    }
 249   8                  }
 250   7                  else
 251   7                  {
 252   8                    Two_Menu_F1_E1[1]++;
 253   8                    Two_Menu_F1_E1[2] = 0;
 254   8                    Two_Menu_F1_E1[3] = 0;
 255   8                  }
 256   7                }
 257   6                else
 258   6                {
 259   7                  Two_Menu_F1_E1[2]++;
 260   7                  Two_Menu_F1_E1[3] = 0;
 261   7                }
 262   6              }
 263   5              else
 264   5                Two_Menu_F1_E1[3]++;
 265   5            }
 266   4            break;
 267   4          }
 268   3      
 269   3          case TWO_MENU_F1_E2_D1:
 270   3          case TWO_MENU_F1_E2_D2:
 271   3          case TWO_MENU_F1_E2_D3:
 272   3          case TWO_MENU_F1_E2_D4:
 273   3          {
 274   4                        set_func_index(TWO_MENU_F1_E2_D4);
 275   4                        buf_eeprom[0] = old2_RF_RECE_REG[2] & 0x0f;//°´¼üÖµ±£´æµ½0×Ö½Ú
 276   4                        buf_eeprom[1] = Two_Menu_F1_E2[0];/*ÊıÖµ´æÈë1 2 3 4×Ö½Ú*/
 277   4                        buf_eeprom[2] = Two_Menu_F1_E2[1];
 278   4                        buf_eeprom[3] = Two_Menu_F1_E2[2];
 279   4                        buf_eeprom[4] = Two_Menu_F1_E2[3];
 280   4                        buf_eeprom[5] = old2_RF_RECE_REG[0];// IDÂë´æÈë 5 6 7 ×Ö½Ú
 281   4                        buf_eeprom[6] = old2_RF_RECE_REG[1];
 282   4                        buf_eeprom[7] = old2_RF_RECE_REG[2] & 0xf0;
 283   4      
 284   4                        if (register_host_function(buf_eeprom))//ÊıÖµ×Ô¶¯¼Ó1
 285   4                        {
C51 COMPILER V9.00   DECODER                                                               09/18/2015 17:31:09 PAGE 6   

 286   5      #ifdef DEBUG
 287   5                          uart_printf("host is %02x %02x %02x .\r\n", (unsigned int)buf_eeprom[5], (unsigned int)buf_eepr
             -om[6], (unsigned int)buf_eeprom[7]); //²âÊÔ°´¼ü¼üÖµ
 288   5                          uart_printf("host is %02x %02x %02x %02x.\r\n", (unsigned int)Two_Menu_F1_E2[0], (unsigned int)
             -Two_Menu_F1_E2[1], (unsigned int)Two_Menu_F1_E2[2], (unsigned int)Two_Menu_F1_E2[3]);
 289   5                          uart_printf("host is rigister success \r\n");
 290   5      #endif          
 291   5                          delay10ms();
 292   5                          if (Two_Menu_F1_E2[3] == 9)
 293   5                          {
 294   6                            if (Two_Menu_F1_E2[2] == 9)
 295   6                            {
 296   7                              if (Two_Menu_F1_E2[1] == 9)
 297   7                              {
 298   8                                Two_Menu_F1_E2[0]++;
 299   8                                Two_Menu_F1_E2[1] = 0;
 300   8                                Two_Menu_F1_E2[2] = 0;
 301   8                                if (Two_Menu_F1_E2[0] == 21)
 302   8                                {
 303   9                                  Two_Menu_F1_E2[0] = 0;
 304   9                                  Two_Menu_F1_E2[3] = 1;
 305   9                                }
 306   8                                else
 307   8                                {
 308   9                                  Two_Menu_F1_E2[3] = 1;
 309   9                                }
 310   8      
 311   8      
 312   8                              }
 313   7                              else
 314   7                              {
 315   8                                Two_Menu_F1_E2[1]++;
 316   8                                Two_Menu_F1_E2[2] = 0;
 317   8                                Two_Menu_F1_E2[3] = 0;
 318   8                              }
 319   7                            }
 320   6                            else
 321   6                            {
 322   7                              Two_Menu_F1_E2[2]++;
 323   7                              Two_Menu_F1_E2[3] = 0;
 324   7                            }
 325   6                          }
 326   5                          else
 327   5                            Two_Menu_F1_E2[3]++;
 328   5                        }
 329   4                        break;
 330   4          }
 331   3      
 332   3          case TWO_MENU_F1_E3_D1:
 333   3          case TWO_MENU_F1_E3_D2:
 334   3          case TWO_MENU_F1_E3_D3:
 335   3          case TWO_MENU_F1_E3_D4:
 336   3          {
 337   4            set_func_index(TWO_MENU_F1_E3_D4);
 338   4            buf_eeprom[0] = old2_RF_RECE_REG[2] & 0x0f;//°´¼üÖµ±£´æµ½0×Ö½Ú
 339   4            buf_eeprom[1] = Two_Menu_F1_E3[0];/*ÊıÖµ´æÈë1 2 3 4×Ö½Ú*/
 340   4            buf_eeprom[2] = Two_Menu_F1_E3[1];
 341   4            buf_eeprom[3] = Two_Menu_F1_E3[2];
 342   4            buf_eeprom[4] = Two_Menu_F1_E3[3];
 343   4            buf_eeprom[5] = old2_RF_RECE_REG[0];// IDÂë´æÈë 5 6 7 ×Ö½Ú
 344   4            buf_eeprom[6] = old2_RF_RECE_REG[1];
 345   4            buf_eeprom[7] = old2_RF_RECE_REG[2] & 0xf0;
C51 COMPILER V9.00   DECODER                                                               09/18/2015 17:31:09 PAGE 7   

 346   4      
 347   4            if (register_alarm_function(buf_eeprom))//ÊıÖµ×Ô¶¯¼Ó1
 348   4            {
 349   5      #ifdef DEBUG
 350   5              uart_printf("alarm is %02x %02x %02x .\r\n", (unsigned int)buf_eeprom[5], (unsigned int)buf_eeprom[6],
             - (unsigned int)buf_eeprom[7]); //²âÊÔ°´¼ü¼üÖµ
 351   5              uart_printf("alarm is %02x %02x %02x %02x.\r\n", (unsigned int)Two_Menu_F1_E3[0], (unsigned int)Two_Me
             -nu_F1_E3[1], (unsigned int)Two_Menu_F1_E3[2], (unsigned int)Two_Menu_F1_E3[3]);
 352   5              uart_printf("alarm is rigister success \r\n");
 353   5      #endif          
 354   5              delay10ms();
 355   5              if (Two_Menu_F1_E3[3] == 9)
 356   5              {
 357   6                if (Two_Menu_F1_E3[2] == 9)
 358   6                {
 359   7                  if (Two_Menu_F1_E3[1] == 9)
 360   7                  {
 361   8                    Two_Menu_F1_E3[0]++;
 362   8                    Two_Menu_F1_E3[1] = 0;
 363   8                    Two_Menu_F1_E3[2] = 0;
 364   8                    if (Two_Menu_F1_E3[0] == 21)
 365   8                    {
 366   9                      Two_Menu_F1_E3[0] = 0;
 367   9                      Two_Menu_F1_E3[3] = 1;
 368   9                    }
 369   8                    else
 370   8                    {
 371   9                      Two_Menu_F1_E3[3] = 1;
 372   9                    }
 373   8                  }
 374   7                  else
 375   7                  {
 376   8                    Two_Menu_F1_E3[1]++;
 377   8                    Two_Menu_F1_E3[2] = 0;
 378   8                    Two_Menu_F1_E3[3] = 0;
 379   8                  }
 380   7                }
 381   6                else
 382   6                {
 383   7                  Two_Menu_F1_E3[2]++;
 384   7                  Two_Menu_F1_E3[3] = 0;
 385   7                }
 386   6              }
 387   5              else
 388   5                Two_Menu_F1_E2[3]++;
 389   5            }
 390   4            break;
 391   4          }
 392   3          case TWO_MENU_F1_E4_D1:
 393   3          case TWO_MENU_F1_E4_D2:
 394   3          case TWO_MENU_F1_E4_D3:
 395   3          case TWO_MENU_F1_E4_D4:
 396   3          {
 397   4            set_func_index(TWO_MENU_F1_E4_D4);
 398   4            buf_eeprom[0] = old2_RF_RECE_REG[2] & 0x0f;//°´¼üÖµ±£´æµ½0×Ö½Ú
 399   4            buf_eeprom[1] = Two_Menu_F1_E4[0];/*ÊıÖµ´æÈë1 2 3 4×Ö½Ú*/
 400   4            buf_eeprom[2] = Two_Menu_F1_E4[1];
 401   4            buf_eeprom[3] = Two_Menu_F1_E4[2];
 402   4            buf_eeprom[4] = Two_Menu_F1_E4[3];
 403   4            buf_eeprom[5] = old2_RF_RECE_REG[0];// IDÂë´æÈë 5 6 7 ×Ö½Ú
 404   4            buf_eeprom[6] = old2_RF_RECE_REG[1];
 405   4            buf_eeprom[7] = old2_RF_RECE_REG[2] & 0xf0;
C51 COMPILER V9.00   DECODER                                                               09/18/2015 17:31:09 PAGE 8   

 406   4      
 407   4            if (register_cancel_function(buf_eeprom))//ÊıÖµ×Ô¶¯¼Ó1
 408   4            {
 409   5      #ifdef DEBUG
 410   5              uart_printf("cancel is %02x %02x %02x .\r\n", (unsigned int)buf_eeprom[5], (unsigned int)buf_eeprom[6]
             -, (unsigned int)buf_eeprom[7]); //²âÊÔ°´¼ü¼üÖµ
 411   5              uart_printf("cancel is %02x %02x %02x %02x.\r\n", (unsigned int)Two_Menu_F1_E4[0], (unsigned int)Two_M
             -enu_F1_E4[1], (unsigned int)Two_Menu_F1_E4[2], (unsigned int)Two_Menu_F1_E4[3]);
 412   5              uart_printf("cancel is rigister success \r\n");
 413   5      #endif          
 414   5              delay10ms();
 415   5              if (Two_Menu_F1_E4[3] == 9)
 416   5              {
 417   6                if (Two_Menu_F1_E4[2] == 9)
 418   6                {
 419   7                  if (Two_Menu_F1_E4[1] == 9)
 420   7                  {
 421   8                    Two_Menu_F1_E4[0]++;
 422   8                    Two_Menu_F1_E4[1] = 0;
 423   8                    Two_Menu_F1_E4[2] = 0;
 424   8                    if (Two_Menu_F1_E4[0] == 21)
 425   8                    {
 426   9                      Two_Menu_F1_E4[0] = 0;
 427   9                      Two_Menu_F1_E4[3] = 1;
 428   9                    }
 429   8                    else
 430   8                    {
 431   9                      Two_Menu_F1_E4[3] = 1;
 432   9                    }
 433   8                  }
 434   7                  else
 435   7                  {
 436   8                    Two_Menu_F1_E4[1]++;
 437   8                    Two_Menu_F1_E4[2] = 0;
 438   8                    Two_Menu_F1_E4[3] = 0;
 439   8                  }
 440   7                }
 441   6                else
 442   6                {
 443   7                  Two_Menu_F1_E4[2]++;
 444   7                  Two_Menu_F1_E4[3] = 0;
 445   7                }
 446   6              }
 447   5              else
 448   5                Two_Menu_F1_E4[3]++;
 449   5            }
 450   4            break;
 451   4          }
 452   3      
 453   3      
 454   3          default:break;//Ä¬ÈÏµÄbreak
 455   3          }
 456   2          clear_again_receive_rf_decoder_finished();//Çå³ı±êÖ¾Î»
 457   2        }
 458   1        
 459   1        LogoutProcess();
 460   1        CycleProcess();
 461   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2704    ----
C51 COMPILER V9.00   DECODER                                                               09/18/2015 17:31:09 PAGE 9   

   CONSTANT SIZE    =    490    ----
   XDATA SIZE       =      8      49
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
