C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\key.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\k
                    -ey.lst) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "usart.h"
   3          #include "tm1629.h"
   4          #include "menu.h"
   5          #include "timer.h"
   6          #include "ds1302.h"
   7          #include "at24c256.h"
   8          #include "gd5800.h"
   9          #include "ev1527.h"
  10          
  11          unsigned char sound_table = 0;
  12          unsigned char accumulate_decoder = 0;
  13          
  14          unsigned char func_index = 0; //多级菜单索引变量
  15          void(*current_operation_index)();// 多级菜单函数指针
  16          
  17          unsigned char Two_Menu_F1_E1[5] = { 0, 0, 0, 1 }; //F1_E1
  18          unsigned char Two_Menu_F1_E2[5] = { 0, 0, 0, 1 }; //F1_E2
  19          unsigned char Two_Menu_F1_E3[5] = { 0, 0, 0, 1 }; //F1_E3
  20          unsigned char Two_Menu_F1_E4[5] = { 0, 0, 0, 1 }; //F1_E4
  21          unsigned char Two_Menu_F2_E1[5] = { 0, 0, 0, 1 }; //F2_E1
  22          unsigned char Two_Menu_F2_E2[5] = { 0, 0, 0, 1 }; //F2_E2
  23          unsigned char Two_Menu_F2_E3[5] = { 0, 0, 0, 1 }; //F2_E3
  24          unsigned char Two_Menu_F2_E4[5] = { 0, 0, 0, 1 }; //F2_E4
  25          
  26          unsigned char Two_Menu_F3_E1 = 1; //即时模式或者排队显示
  27          unsigned char Two_Menu_F3_E2 = 1; //呼叫时候存储数量
  28          
  29          unsigned char Two_Menu_F4_E1 = 0; //销号时间
  30          unsigned char Two_Menu_F5_E1 = 0; //循环间隔时间
  31          
  32          unsigned char Two_Menu_F6_E1 = 0; //简单报读
  33          unsigned char Two_Menu_F6_E2 = 2; //语音报读次数
  34          unsigned char Two_Menu_F6_E3 = 0; //循环时候是否报读
  35          unsigned char Two_Menu_F6_E4 = 6; //音量大小调整
  36          unsigned char Two_Menu_F6_E5 = 3; //显示屏LED亮度调整
  37          unsigned char Two_Menu_F6_E6 = 1; //语音导航调整
  38          unsigned char Two_Menu_F6_E7 = 0; //语音导航调整
  39          
  40          unsigned char Two_Menu_F7_E1 = 11; // E1默认键盘规则 999*9
  41          unsigned char Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
  42          unsigned char Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
  43          unsigned char Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
  44          
  45          unsigned char Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
  46          
  47          unsigned char Two_Menu_F8_E2 = 0; // 键位设置
  48          
  49          unsigned char Two_Menu_Fb_E1 = 1; // 设置主机有没有销号功能
  50          unsigned char Two_Menu_FC_E1 = 1; // 设置万年历待机与----待机的切换
  51          unsigned char Two_Menu_Fd_E1 = 1; // E1 E2 E3 E4 E5 E6
  52          
  53          key_table code table[100] =
  54          {       // 目标索引                 上                          下          确认                 退出         函数
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 2   

  55                  { MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, (*fun0) }, //待机
  56          
  57                  { ONE_MENU_F0, ONE_MENU_F1, ONE_MENU_Fd, TWO_MENU_F0_YEAR , MENU_STANDBY, (*fun1) }, //F0-F9
  58                  { ONE_MENU_F1, ONE_MENU_F2, ONE_MENU_F0, TWO_MENU_F1_E1   , MENU_STANDBY, (*fun2) },
  59                  { ONE_MENU_F2, ONE_MENU_F3, ONE_MENU_F1, TWO_MENU_F2_E1   , MENU_STANDBY, (*fun3) },
  60                  { ONE_MENU_F3, ONE_MENU_F4, ONE_MENU_F2, TWO_MENU_F3_E1   , MENU_STANDBY, (*fun4) },
  61                  { ONE_MENU_F4, ONE_MENU_F5, ONE_MENU_F3, TWO_MENU_F4_SET  , MENU_STANDBY, (*fun5) },
  62                  { ONE_MENU_F5, ONE_MENU_F6, ONE_MENU_F4, TWO_MENU_F5_SET  , MENU_STANDBY, (*fun6) },
  63                  { ONE_MENU_F6, ONE_MENU_F7, ONE_MENU_F5, TWO_MENU_F6_E1   , MENU_STANDBY, (*fun7) },
  64                  { ONE_MENU_F7, ONE_MENU_F8, ONE_MENU_F6, TWO_MENU_F7_E1   , MENU_STANDBY, (*fun8) },
  65                  { ONE_MENU_F8, ONE_MENU_F9, ONE_MENU_F7, TWO_MENU_F8_E1   , MENU_STANDBY, (*fun9) },
  66                  { ONE_MENU_F9, ONE_MENU_FA, ONE_MENU_F8, TWO_MENU_F9_E1   , MENU_STANDBY, (*fun10) },
  67                  { ONE_MENU_FA, ONE_MENU_Fb, ONE_MENU_F9, ONE_MENU_FA, MENU_STANDBY, (*fun11) }, //FA
  68                  { ONE_MENU_Fb, ONE_MENU_FC, ONE_MENU_FA, ONE_MENU_Fb, MENU_STANDBY, (*fun12) }, //Fb
  69                  { ONE_MENU_FC, ONE_MENU_Fd, ONE_MENU_Fb, ONE_MENU_FC, MENU_STANDBY, (*fun13) }, //FC
  70                  { ONE_MENU_Fd, ONE_MENU_F0, ONE_MENU_FC, ONE_MENU_Fd, MENU_STANDBY, (*fun14) }, //Fd
  71          
  72                  { TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_MOUTH , ONE_MENU_F0, (*fun15) }
             -, //万年历 年
  73                  { TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_DAY   , ONE_MENU_F0, (*fun16) }
             -, //万年历 月
  74                  { TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_WEEK  , ONE_MENU_F0, (*fun17) }
             -, //万年历 日
  75                  { TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_HOUR  , ONE_MENU_F0, (*fun18) }
             -, //万年历 周
  76                  { TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_MINUTE, ONE_MENU_F0, (*fun19) }
             -, //万年历 小时
  77                  { TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_YEAR  , ONE_MENU_F0, (*fun20) }
             -, //万年历 分钟
  78          
  79                  { TWO_MENU_F1_E1, TWO_MENU_F1_E2, TWO_MENU_F1_E4, TWO_MENU_F1_E1_D4, ONE_MENU_F1, (*fun21) }, //F1子菜单E
             -1
  80                  { TWO_MENU_F1_E2, TWO_MENU_F1_E3, TWO_MENU_F1_E1, TWO_MENU_F1_E2_D4, ONE_MENU_F1, (*fun22) }, //F1子菜单E
             -2
  81                  { TWO_MENU_F1_E3, TWO_MENU_F1_E4, TWO_MENU_F1_E2, TWO_MENU_F1_E3_D4, ONE_MENU_F1, (*fun23) }, //F1子菜单E
             -3
  82                  { TWO_MENU_F1_E4, TWO_MENU_F1_E1, TWO_MENU_F1_E3, TWO_MENU_F1_E4_D4, ONE_MENU_F1, (*fun24) }, //F1子菜单E
             -4
  83          
  84                  { TWO_MENU_F2_E1, TWO_MENU_F2_E2, TWO_MENU_F2_E4, TWO_MENU_F2_E1_D4, ONE_MENU_F2, (*fun25) }, //F2子菜单E
             -1
  85                  { TWO_MENU_F2_E2, TWO_MENU_F2_E3, TWO_MENU_F2_E1, TWO_MENU_F2_E2_D4, ONE_MENU_F2, (*fun26) }, //F2子菜单E
             -2
  86                  { TWO_MENU_F2_E3, TWO_MENU_F2_E4, TWO_MENU_F2_E2, TWO_MENU_F2_E3_D4, ONE_MENU_F2, (*fun27) }, //F2子菜单E
             -3
  87                  { TWO_MENU_F2_E4, TWO_MENU_F2_E1, TWO_MENU_F2_E3, TWO_MENU_F2_E4_D4, ONE_MENU_F2, (*fun28) }, //F2子菜单E
             -4
  88          
  89                  { TWO_MENU_F3_E1, TWO_MENU_F3_E2, TWO_MENU_F3_E2, TWO_MENU_F3_E1_SET, ONE_MENU_F3, (*fun29) }, //F3子菜单
             -E1
  90                  { TWO_MENU_F3_E2, TWO_MENU_F3_E1, TWO_MENU_F3_E1, TWO_MENU_F3_E2_SET, ONE_MENU_F3, (*fun30) }, //F3子菜单
             -E2
  91          
  92                  { TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, ONE_MENU_F4, (*fun31) }, //F4子菜单
  93                  { TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, ONE_MENU_F5, (*fun32) }, //F5子菜单
  94          
  95                  { TWO_MENU_F6_E1, TWO_MENU_F6_E2, TWO_MENU_F6_E7, TWO_MENU_F6_E1_SET, ONE_MENU_F6, (*fun33) }, //F6子菜单
             -E1
  96                  { TWO_MENU_F6_E2, TWO_MENU_F6_E3, TWO_MENU_F6_E1, TWO_MENU_F6_E2_SET, ONE_MENU_F6, (*fun34) }, //F6子菜单
             -E2
  97                  { TWO_MENU_F6_E3, TWO_MENU_F6_E4, TWO_MENU_F6_E2, TWO_MENU_F6_E3_SET, ONE_MENU_F6, (*fun35) }, //F6子菜单
             -E3
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 3   

  98                  { TWO_MENU_F6_E4, TWO_MENU_F6_E5, TWO_MENU_F6_E3, TWO_MENU_F6_E4_SET, ONE_MENU_F6, (*fun36) }, //F6子菜单
             -E4
  99                  { TWO_MENU_F6_E5, TWO_MENU_F6_E6, TWO_MENU_F6_E4, TWO_MENU_F6_E5_SET, ONE_MENU_F6, (*fun37) }, //F6子菜单
             -E5
 100          
 101                  { TWO_MENU_F7_E1, TWO_MENU_F7_E2, TWO_MENU_F7_E4, TWO_MENU_F7_E1_SET, ONE_MENU_F7, (*fun38) }, //F7子菜单
             -E1
 102                  { TWO_MENU_F7_E2, TWO_MENU_F7_E3, TWO_MENU_F7_E1, TWO_MENU_F7_E2_SET, ONE_MENU_F7, (*fun39) }, //F7子菜单
             -E2
 103                  { TWO_MENU_F7_E3, TWO_MENU_F7_E4, TWO_MENU_F7_E2, TWO_MENU_F7_E3_SET, ONE_MENU_F7, (*fun40) }, //F7子菜单
             -E3
 104                  { TWO_MENU_F7_E4, TWO_MENU_F7_E1, TWO_MENU_F7_E3, TWO_MENU_F7_E4_SET, ONE_MENU_F7, (*fun41) }, //F7子菜单
             -E4        
 105          
 106                  { TWO_MENU_F8_E1, TWO_MENU_F8_E2, TWO_MENU_F8_E2, TWO_MENU_F8_E1_SET, ONE_MENU_F8, (*fun42) }, //F8子菜单
             -E1
 107                  { TWO_MENU_F8_E2, TWO_MENU_F8_E1, TWO_MENU_F8_E1, TWO_MENU_F8_E2_SET, ONE_MENU_F8, (*fun43) }, //F8子菜单
             -E2
 108          
 109                  { TWO_MENU_F9_E1, TWO_MENU_F9_E2, TWO_MENU_F9_E2, 0, ONE_MENU_F9, (*fun44) }, //F9子菜单E1
 110                  { TWO_MENU_F9_E2, TWO_MENU_F9_E1, TWO_MENU_F9_E1, 0, ONE_MENU_F9, (*fun45) }, //F9子菜单E2
 111          
 112                  { TWO_MENU_FA_SET, TWO_MENU_FA_SET, TWO_MENU_FA_SET, 0, ONE_MENU_FA, (*fun46) }, //FA子菜单
 113                  { TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, 0, ONE_MENU_Fb, (*fun47) }, //Fb子菜单
 114                  { TWO_MENU_FC_SET, TWO_MENU_FC_SET, TWO_MENU_FC_SET, 0, ONE_MENU_FC, (*fun48) }, //FC子菜单
 115                  { TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, 0, ONE_MENU_Fd, (*fun49) }, //Fd子菜单
 116          
 117                  { TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1, (*fun50) },
             - //F1_E1注册呼叫器
 118                  { TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1, (*fun51) },
             - //F1_E1注册呼叫器
 119                  { TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1, (*fun52) },
             - //F1_E1注册呼叫器
 120                  { TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1, (*fun53) },
             - //F1_E1注册呼叫器
 121          
 122                  { TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2, (*fun54) },
             - //F1_E2注册管理器
 123                  { TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2, (*fun55) },
             - //F1_E2注册管理器
 124                  { TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2, (*fun56) },
             - //F1_E2注册管理器
 125                  { TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2, (*fun57) },
             - //F1_E2注册管理器
 126          
 127                  { TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3, (*fun58) },
             - //F1_E3注册报警器
 128                  { TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3, (*fun59) },
             - //F1_E3注册报警器
 129                  { TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3, (*fun60) },
             - //F1_E3注册报警器
 130                  { TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3, (*fun61) },
             - //F1_E3注册报警器
 131          
 132                  { TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4, (*fun62) },
             - //F1_E3注册取消器
 133                  { TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4, (*fun63) },
             - //F1_E3注册取消器
 134                  { TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4, (*fun64) },
             - //F1_E3注册取消器
 135                  { TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4, (*fun65) },
             - //F1_E3注册取消器
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 4   

 136          
 137                  { TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1, (*fun66) },
             - //F2_E1删除呼叫器
 138                  { TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1, (*fun67) },
             - //F2_E1删除呼叫器
 139                  { TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1, (*fun68) },
             - //F2_E1删除呼叫器
 140                  { TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1, (*fun69) },
             - //F2_E1删除呼叫器
 141          
 142                  { TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2, (*fun70) },
             - //F2_E2删除管理器
 143                  { TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2, (*fun71) },
             - //F2_E2删除管理器
 144                  { TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2, (*fun72) },
             - //F2_E2删除管理器
 145                  { TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2, (*fun73) },
             - //F2_E2删除管理器
 146          
 147                  { TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3, (*fun74) },
             - //F2_E3删除报警器
 148                  { TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3, (*fun75) },
             - //F2_E3删除报警器
 149                  { TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3, (*fun76) },
             - //F2_E3删除报警器
 150                  { TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3, (*fun77) },
             - //F2_E3删除报警器
 151          
 152                  { TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4, (*fun78) },
             - //F2_E4删除取消器
 153                  { TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4, (*fun79) },
             - //F2_E4删除取消器
 154                  { TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4, (*fun80) },
             - //F2_E4删除取消器
 155                  { TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4, (*fun81) },
             - //F2_E4删除取消器
 156          
 157                  { TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1, (*fun82
             -) }, //F3_E1设置排队显示或者循环显示
 158                  { TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2, (*fun83
             -) }, //F3_E2设置队列个数
 159          
 160                  { TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1, (*fun84
             -) }, //F6_E1语音选择
 161                  { TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2, (*fun85
             -) }, //F6_E2语音报读次数
 162                  { TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3, (*fun86
             -) }, //F6_E3循环时候是否报读
 163                  { TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4, (*fun87
             -) }, //F6_E4音量大小调整
 164                  { TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5, (*fun88
             -) }, //F6_E5屏幕亮度调整
 165          
 166                  { TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1, (*fun89
             -) }, //F7_E1 999*9
 167                  { TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2, (*fun90
             -) }, //F7_E2 9999*9
 168                  { TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3, (*fun91
             -) }, //F7_E3 999*99
 169                  { TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4, (*fun92
             -) }, //F7_E4 9999*99
 170          
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 5   

 171                  { TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1, (*fun93
             -) }, //F8_E1 单键位跟多键位切换
 172                  { TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2, (*fun94
             -) }, //F8_E2 键位设置
 173          
 174                  { DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, (*fun95)},
 175          
 176                  { TWO_MENU_F6_E6, TWO_MENU_F6_E7, TWO_MENU_F6_E5, TWO_MENU_F6_E6_SET, ONE_MENU_F6, (*fun96) },
 177                  { TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6, (*fun97
             -) },
 178                  { TWO_MENU_F6_E7, TWO_MENU_F6_E1, TWO_MENU_F6_E6, TWO_MENU_F6_E7_SET, ONE_MENU_F6, (*fun98) },
 179                  { TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7, (*fun99
             -) },
 180          };
 181          
 182          unsigned int KeyScan(void)  //Keyboard scan function
 183          {
 184   1              unsigned int Val = 0;
 185   1              HKeyPort |= 0x3C;//Row height
 186   1              if ((HKeyPort & 0x3C) != 0x3C)//Press button
 187   1              {
 188   2                      delay10ms();  //Remove jitter
 189   2                      if ((HKeyPort & 0x3C) != 0x3C)   //Press button
 190   2                      {
 191   3                              clear_return_standby_time();
 192   3                              if (func_index != TWO_MENU_F8_E2_SET && ((return_Two_Menu_F6_E6()) ? func_index > ONE_MENU_Fd : 1))
 193   3                              {
 194   4                                      GD5800_stop_music();
 195   4                                      delay10ms();
 196   4                                      GD5800_select_chapter(DI);
 197   4                              }
 198   3                                      sound_table=1;
 199   3                                      Val = HKeyPort & 0x3C;
 200   3                                      if (Val == 0x0038)
 201   3                                      {
 202   4                                              clear_main_press_time();        //清除菜单键按下的时间计算变量
 203   4                                              set_main_press_time_table(1); //设置相应的标志位，开始计算时间
 204   4                                      }
 205   3                                      while ((HKeyPort & 0x3C) != 0x3C);
 206   3                                      delay10ms();
 207   3                                      while ((HKeyPort & 0x3C) != 0x3C);
 208   3                                      set_main_press_time_table(0);//按键释放，清除相应的标志位
 209   3                                      set_logout_cycle_table(0);//循环跟销号重新计数
 210   3                                      return Val;
 211   3                      }
 212   2              }
 213   1              
 214   1              return 0x0fff;
 215   1      }
 216          
 217          unsigned char KeyDecoder(void)
 218          {
 219   1              unsigned int key_val = 0;
 220   1              unsigned char register_manager_temp = 0;
 221   1              key_val = KeyScan();
 222   1              register_manager_temp = return_register_manager();
 223   1              if (key_val == 0x0fff) /*do not key press*/
 224   1              {
 225   2                      /*sjz 有注册管理器标志*/
 226   2                      if (register_manager_temp == 1)
 227   2                      {
 228   3                              
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 6   

 229   3                              if (func_index == MENU_STANDBY )
 230   3                              {
 231   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)accumulate_decoder);
 232   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)old2_RF_RECE_REG[2] & 0x0f);
 233   4                                      if ((old2_RF_RECE_REG[2] & 0x0f) == 0x08)
 234   4                                      {
 235   5                                              accumulate_decoder++;
 236   5                                      }
 237   4                                      else
 238   4                                      {
 239   5                                              accumulate_decoder = 0;
 240   5                                      }
 241   4                                      if (accumulate_decoder>3)
 242   4                                      {
 243   5                                              set_main_press_time(20);
 244   5                                              accumulate_decoder = 0;
 245   5                                      }
 246   4                              }
 247   3                              clear_register_manager();
 248   3      
 249   3                              switch (old2_RF_RECE_REG[2] & 0x0f)
 250   3                              {
 251   4                              case 0x01:
 252   4                                      if (return_filter_other() == 0)
 253   4                                      {
 254   5                                              key_val = 0x001c;
 255   5                                              set_filter_other(5);
 256   5                                      }
 257   4                                       break;
 258   4                              case 0x02:
 259   4                                      if (return_filter_other() == 0)
 260   4                                      {
 261   5                                              key_val = 0x0034;
 262   5                                              set_filter_other(5);
 263   5                                      }
 264   4                                       break;
 265   4                              case 0x04:
 266   4                                      if (return_filter_other() == 0)
 267   4                                      {
 268   5                                              key_val = 0x002c;
 269   5                                              set_filter_other(5);
 270   5                                      }
 271   4                                       break;
 272   4                              case 0x08:
 273   4                                      if (return_filter_main() == 0 && return_filter_other() == 0)
 274   4                                      {
 275   5                                              key_val = 0x0038;
 276   5                                              set_filter_other(5);
 277   5                                      }
 278   4                                      break;
 279   4                              default:break;
 280   4                              }
 281   3                      }
 282   2              }
 283   1       
 284   1      
 285   1      #ifdef DEBUG
                      if (key_val != 0x0fff)
                      uart_printf("key_val is %x .\r\n", key_val); //测试按键键值
              #endif
 289   1              switch (key_val)
 290   1              {
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 7   

 291   2              case 0x001c:return KEY_RETURN; break;//1 按下相应的键显示相对应的码值
 292   2              case 0x0034:return KEY_DOWN; break;//2  
 293   2              case 0x002c:return KEY_UP; break;//4
 294   2              case 0x0038:return KEY_FUNC; break;//5 按下相应的键显示相对应的码值
 295   2              default:return 0xff; break;
 296   2              }
 297   1      }
 298          
 299          void KeyProcess(void)
 300          {
 301   1              unsigned char key_value = 0, main_press_time_temp = 0;
 302   1              key_value = KeyDecoder();
 303   1              switch (key_value)
 304   1              {
 305   2                      case KEY_FUNC:
 306   2                              if ((return_Two_Menu_Fb_E1() == 0 && func_index == MENU_STANDBY) || (return_Two_Menu_Fb_E1() == 1&&( fu
             -nc_index == MENU_STANDBY || func_index == DECODER_MENU) ) )  //如果索引==0  则要1秒以上进入菜单
 307   2                              {
 308   3                                      main_press_time_temp = return_main_press_time();
 309   3                                      if (main_press_time_temp >= 20)
 310   3                                      {
 311   4                                              func_index = ONE_MENU_F1;
 312   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 313   4                                              clear_main_press_time();
 314   4                                      }
 315   3                              }
 316   2                              else if (func_index == TWO_MENU_F2_E1_D1 || func_index == TWO_MENU_F2_E1_D2 || func_index == TWO_MENU_F
             -2_E1_D3 || func_index == TWO_MENU_F2_E1_D4 )
 317   2                              {
 318   3                                      main_press_time_temp = return_main_press_time();
 319   3                                      if (main_press_time_temp >= 10)
 320   3                                      {
 321   4                                              if (!delete_call_function(Two_Menu_F2_E1))
 322   4                                              {
 323   5                                                      if (return_sound_table() == 1)
 324   5                                                      {
 325   6                                                              GD5800_select_chapter(CHENGGONG);
 326   6      
 327   6                                                              set_sound_table(0);
 328   6                                                      }
 329   5                                              }
 330   4                                              delay10ms();
 331   4                                              clear_main_press_time();
 332   4                                      }
 333   3                                      else
 334   3                                              func_index = table[func_index].enter;
 335   3                              }
 336   2                              else if (func_index == TWO_MENU_F2_E2_D1 || func_index == TWO_MENU_F2_E2_D2 || func_index == TWO_MENU_F
             -2_E2_D3 || func_index == TWO_MENU_F2_E2_D4)
 337   2                              {
 338   3                                      main_press_time_temp = return_main_press_time();
 339   3                                      if ( main_press_time_temp >= 10)
 340   3                                      {
 341   4                                              if (!delete_host_function(Two_Menu_F2_E2))
 342   4                                              {
 343   5                                                      if (return_sound_table() == 1)
 344   5                                                      {
 345   6                                                              GD5800_select_chapter(CHENGGONG);
 346   6      
 347   6                                                              set_sound_table(0);
 348   6                                                      }
 349   5                                              }
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 8   

 350   4                                              delay10ms();
 351   4                                              clear_main_press_time();
 352   4                                      }
 353   3                                      else
 354   3                                              func_index = table[func_index].enter;
 355   3                              }
 356   2                              else if (func_index == TWO_MENU_F2_E3_D1 || func_index == TWO_MENU_F2_E3_D2 || func_index == TWO_MENU_F
             -2_E3_D3 || func_index == TWO_MENU_F2_E3_D4)
 357   2                              {
 358   3                                      main_press_time_temp = return_main_press_time();
 359   3                                      if (main_press_time_temp >= 10)
 360   3                                      {
 361   4                                              if (!delete_alarm_function(Two_Menu_F2_E3))
 362   4                                              {
 363   5                                                      if (return_sound_table() == 1)
 364   5                                                      {
 365   6                                                              GD5800_select_chapter(CHENGGONG);
 366   6      
 367   6                                                              set_sound_table(0);
 368   6                                                      }
 369   5                                              }
 370   4                                              delay10ms();
 371   4                                              clear_main_press_time();
 372   4                                      }
 373   3                                      else
 374   3                                              func_index = table[func_index].enter;
 375   3                              }
 376   2                              else if (func_index == TWO_MENU_F2_E4_D1 || func_index == TWO_MENU_F2_E4_D2 || func_index == TWO_MENU_F
             -2_E4_D3 || func_index == TWO_MENU_F2_E4_D4)
 377   2                              {
 378   3                                      main_press_time_temp = return_main_press_time();
 379   3                                      if (main_press_time_temp >= 10)
 380   3                                      {
 381   4                                              if (!delete_cancel_function(Two_Menu_F2_E4))
 382   4                                              {
 383   5                                                      if (return_sound_table() == 1)
 384   5                                                      {
 385   6                                                              GD5800_select_chapter(CHENGGONG);
 386   6      
 387   6                                                              set_sound_table(0);
 388   6                                                      }
 389   5                                              }
 390   4                                              delay10ms();
 391   4                                              clear_main_press_time();                        
 392   4                                      }
 393   3                                      else
 394   3                                              func_index = table[func_index].enter;
 395   3                              }
 396   2                              else if (func_index == ONE_MENU_FA)  //如果索引==FA  则要1秒以上进入菜单
 397   2                              {
 398   3                                      main_press_time_temp = return_main_press_time();
 399   3                                      if (main_press_time_temp >= 20)
 400   3                                      {
 401   4                                              func_index = TWO_MENU_FA_SET;
 402   4                                              clear_main_press_time();
 403   4                                      }
 404   3                              }
 405   2                              else if (func_index == ONE_MENU_Fb)  //如果索引==FA  则要1秒以上进入菜单
 406   2                              {
 407   3                                      main_press_time_temp = return_main_press_time();
 408   3                                      if (main_press_time_temp >= 20)
 409   3                                      {
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 9   

 410   4                                              func_index = TWO_MENU_Fb_SET;
 411   4                                              clear_main_press_time();
 412   4                                      }
 413   3                              }
 414   2                              else if (func_index == ONE_MENU_FC)  //如果索引==FA  则要1秒以上进入菜单
 415   2                              {
 416   3                                      main_press_time_temp = return_main_press_time();
 417   3                                      if (main_press_time_temp >= 20)
 418   3                                      {
 419   4                                              func_index = TWO_MENU_FC_SET;
 420   4                                              clear_main_press_time();
 421   4                                      }
 422   3                              }
 423   2                              else if (func_index == ONE_MENU_Fd)  //如果索引==FA  则要1秒以上进入菜单
 424   2                              {
 425   3                                      main_press_time_temp = return_main_press_time();
 426   3                                      if (main_press_time_temp >= 20)
 427   3                                      {
 428   4                                              func_index = TWO_MENU_Fd_SET;
 429   4                                              clear_main_press_time();
 430   4                                      }
 431   3                              }
 432   2                              else if (func_index == TWO_MENU_F9_E2)  //如果索引==FA  则要1秒以上进入菜单
 433   2                              {
 434   3                                      main_press_time_temp = return_main_press_time();
 435   3                                      if (main_press_time_temp >= 20)
 436   3                                      {
 437   4                                              GD5800_select_chapter(CHENGGONG);
 438   4                                              var_init();
 439   4                                              env_load();
 440   4                                              IAP_CONTR = 0X20;
 441   4                                              clear_main_press_time();
 442   4                                      }
 443   3                              }
 444   2                              else if (func_index == TWO_MENU_F9_E1)  //如果索引==FA  则要1秒以上进入菜单
 445   2                              {
 446   3                                      main_press_time_temp = return_main_press_time();
 447   3                                      if (main_press_time_temp >= 20)
 448   3                                      {
 449   4                                              GD5800_select_chapter(CHENGGONG);
 450   4                                              var_init();
 451   4                                              key_init();
 452   4                                              env_load();
 453   4                                              ISendStr(I2C_ADDRESS, SIN_KEY, single_key, 16);
 454   4                                              delay10ms();
 455   4                                              ISendStr(I2C_ADDRESS, MUL_KEY, multiple_key, 16);
 456   4                                              delay10ms();
 457   4                                              Delete_all_data();
 458   4                                              delay10ms();
 459   4                                              IAP_CONTR = 0X20;
 460   4                                              clear_main_press_time();
 461   4                                      }
 462   3                              }
 463   2                              else
 464   2                              {
 465   3                                      func_index = table[func_index].enter;
 466   3                                      clear_main_press_time();
 467   3                              }
 468   2                               break;
 469   2                      case KEY_RETURN:        
 470   2                              if (func_index == DECODER_MENU  && return_Two_Menu_Fb_E1() )
 471   2                              {
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 10  

 472   3                                      Logout();
 473   3                              }
 474   2                              else
 475   2                              func_index = table[func_index].esc; 
 476   2                              break;
 477   2                      case KEY_UP:
 478   2                              switch (func_index)
 479   2                              {
 480   3                              case TWO_MENU_F0_YEAR: 
 481   3                                      if (time_buf1[1] == 99) time_buf1[1] = 0;       //设置万年历 年
 482   3                                                                         else time_buf1[1]++;
 483   3                                      break;
 484   3                              case TWO_MENU_F0_MOUTH:
 485   3                                      if (time_buf1[2] == 12) time_buf1[2] = 1;       //设置万年历 月
 486   3                                      else time_buf1[2]++;
 487   3                                      break;
 488   3                              case TWO_MENU_F0_DAY:
 489   3                                      if (time_buf1[3] == 31) time_buf1[3] = 1;       //设置万年历 日
 490   3                                      else time_buf1[3]++;
 491   3                                      break;
 492   3                              case TWO_MENU_F0_WEEK:
 493   3                                      if (time_buf1[7] == 7) time_buf1[7] = 1;        //设置万年历 星期
 494   3                                      else time_buf1[7]++;
 495   3                                      break;
 496   3                              case TWO_MENU_F0_HOUR:
 497   3                                      if (time_buf1[4] == 23) time_buf1[4] = 0;       //设置万年历 小时
 498   3                                      else time_buf1[4]++;
 499   3                                      break;
 500   3                              case TWO_MENU_F0_MINUTE:
 501   3                                      if (time_buf1[5] == 59) time_buf1[5] = 0;       //设置万年历 分钟
 502   3                                      else time_buf1[5]++;
 503   3                                      break;
 504   3                              case TWO_MENU_F1_E1_D1:
 505   3                                      if (Two_Menu_F1_E1[0] == 20 ) Two_Menu_F1_E1[0] = 0;    //设置F1_E1千位
 506   3                                      else Two_Menu_F1_E1[0]++;
 507   3                                      break;
 508   3                              case TWO_MENU_F1_E1_D2:
 509   3                                      if (Two_Menu_F1_E1[1] == 9) Two_Menu_F1_E1[1] = 0;      //设置F1_E1百位
 510   3                                      else Two_Menu_F1_E1[1]++;
 511   3                                      break;
 512   3                              case TWO_MENU_F1_E1_D3:
 513   3                                      if (Two_Menu_F1_E1[2] == 9) Two_Menu_F1_E1[2] = 0;      //设置F1_E1十位
 514   3                                      else Two_Menu_F1_E1[2]++;
 515   3                                      break;
 516   3                              case TWO_MENU_F1_E1_D4:
 517   3                                      if (Two_Menu_F1_E1[3] == 9) Two_Menu_F1_E1[3] = 0;      //设置F1_E1个位
 518   3                                      else Two_Menu_F1_E1[3]++;
 519   3                                      break;
 520   3                              case TWO_MENU_F1_E2_D1:
 521   3                                      if (Two_Menu_F1_E2[0] == 20) Two_Menu_F1_E2[0] = 0;     //设置F1_E2千位
 522   3                                      else Two_Menu_F1_E2[0]++;
 523   3                                      break;
 524   3                              case TWO_MENU_F1_E2_D2:
 525   3                                      if (Two_Menu_F1_E2[1] == 9) Two_Menu_F1_E2[1] = 0;      //设置F1_E2百位
 526   3                                      else Two_Menu_F1_E2[1]++;
 527   3                                      break;
 528   3                              case TWO_MENU_F1_E2_D3:
 529   3                                      if (Two_Menu_F1_E2[2] == 9) Two_Menu_F1_E2[2] = 0;      //设置F1_E2十位
 530   3                                      else Two_Menu_F1_E2[2]++;
 531   3                                      break;
 532   3                              case TWO_MENU_F1_E2_D4:
 533   3                                      if (Two_Menu_F1_E2[3] == 9) Two_Menu_F1_E2[3] = 0;      //设置F1_E2个位
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 11  

 534   3                                      else Two_Menu_F1_E2[3]++;
 535   3                                      break;
 536   3                              case TWO_MENU_F1_E3_D1:
 537   3                                      if (Two_Menu_F1_E3[0] == 20) Two_Menu_F1_E3[0] = 0;     //设置F1_E3千位
 538   3                                      else Two_Menu_F1_E3[0]++;
 539   3                                      break;
 540   3                              case TWO_MENU_F1_E3_D2:
 541   3                                      if (Two_Menu_F1_E3[1] == 9) Two_Menu_F1_E3[1] = 0;      //设置F1_E3百位
 542   3                                      else Two_Menu_F1_E3[1]++;
 543   3                                      break;
 544   3                              case TWO_MENU_F1_E3_D3:
 545   3                                      if (Two_Menu_F1_E3[2] == 9) Two_Menu_F1_E3[2] = 0;      //设置F1_E3十位
 546   3                                      else Two_Menu_F1_E3[2]++;
 547   3                                      break;
 548   3                              case TWO_MENU_F1_E3_D4:
 549   3                                      if (Two_Menu_F1_E3[3] == 9) Two_Menu_F1_E3[3] = 0;      //设置F1_E3个位
 550   3                                      else Two_Menu_F1_E3[3]++;
 551   3                                      break;
 552   3                              case TWO_MENU_F1_E4_D1:
 553   3                                      if (Two_Menu_F1_E4[0] == 20) Two_Menu_F1_E4[0] = 0;     //设置F1_E4千位
 554   3                                      else Two_Menu_F1_E4[0]++;
 555   3                                      break;
 556   3                              case TWO_MENU_F1_E4_D2:
 557   3                                      if (Two_Menu_F1_E4[1] == 9) Two_Menu_F1_E4[1] = 0;      //设置F1_E4百位
 558   3                                      else Two_Menu_F1_E4[1]++;
 559   3                                      break;
 560   3                              case TWO_MENU_F1_E4_D3:
 561   3                                      if (Two_Menu_F1_E4[2] == 9) Two_Menu_F1_E4[2] = 0;      //设置F1_E4十位
 562   3                                      else Two_Menu_F1_E4[2]++;
 563   3                                      break;
 564   3                              case TWO_MENU_F1_E4_D4:
 565   3                                      if (Two_Menu_F1_E4[3] == 9) Two_Menu_F1_E4[3] = 0;      //设置F1_E4个位
 566   3                                      else Two_Menu_F1_E4[3]++;
 567   3                                      break;
 568   3                              case TWO_MENU_F2_E1_D1:
 569   3                                      if (Two_Menu_F2_E1[0] == 20) Two_Menu_F2_E1[0] = 0;     //设置F2_E1千位
 570   3                                      else Two_Menu_F2_E1[0]++;
 571   3                                      break;
 572   3                              case TWO_MENU_F2_E1_D2:
 573   3                                      if (Two_Menu_F2_E1[1] == 9) Two_Menu_F2_E1[1] = 0;      //设置F2_E1百位
 574   3                                      else Two_Menu_F2_E1[1]++;
 575   3                                      break;
 576   3                              case TWO_MENU_F2_E1_D3:
 577   3                                      if (Two_Menu_F2_E1[2] == 9) Two_Menu_F2_E1[2] = 0;      //设置F2_E1十位
 578   3                                      else Two_Menu_F2_E1[2]++;
 579   3                                      break;
 580   3                              case TWO_MENU_F2_E1_D4:
 581   3                                      if (Two_Menu_F2_E1[3] == 9) Two_Menu_F2_E1[3] = 0;      //设置F2_E1个位
 582   3                                      else Two_Menu_F2_E1[3]++;
 583   3                                      break;
 584   3                              case TWO_MENU_F2_E2_D1:
 585   3                                      if (Two_Menu_F2_E2[0] == 20) Two_Menu_F2_E2[0] = 0;     //设置F2_E2千位
 586   3                                      else Two_Menu_F2_E2[0]++;
 587   3                                      break;
 588   3                              case TWO_MENU_F2_E2_D2:
 589   3                                      if (Two_Menu_F2_E2[1] == 9) Two_Menu_F2_E2[1] = 0;      //设置F2_E2百位
 590   3                                      else Two_Menu_F2_E2[1]++;
 591   3                                      break;
 592   3                              case TWO_MENU_F2_E2_D3:
 593   3                                      if (Two_Menu_F2_E2[2] == 9) Two_Menu_F2_E2[2] = 0;      //设置F2_E2十位
 594   3                                      else Two_Menu_F2_E2[2]++;
 595   3                                      break;
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 12  

 596   3                              case TWO_MENU_F2_E2_D4:
 597   3                                      if (Two_Menu_F2_E2[3] == 9) Two_Menu_F2_E2[3] = 0;      //设置F2_E2个位
 598   3                                      else Two_Menu_F2_E2[3]++;
 599   3                                      break;
 600   3                              case TWO_MENU_F2_E3_D1:
 601   3                                      if (Two_Menu_F2_E3[0] == 20) Two_Menu_F2_E3[0] = 0;     //设置F2_E3千位
 602   3                                      else Two_Menu_F2_E3[0]++;
 603   3                                      break;
 604   3                              case TWO_MENU_F2_E3_D2:
 605   3                                      if (Two_Menu_F2_E3[1] == 9) Two_Menu_F2_E3[1] = 0;      //设置F2_E3百位
 606   3                                      else Two_Menu_F2_E3[1]++;
 607   3                                      break;
 608   3                              case TWO_MENU_F2_E3_D3:
 609   3                                      if (Two_Menu_F2_E3[2] == 9) Two_Menu_F2_E3[2] = 0;      //设置F2_E3十位
 610   3                                      else Two_Menu_F2_E3[2]++;
 611   3                                      break;
 612   3                              case TWO_MENU_F2_E3_D4:
 613   3                                      if (Two_Menu_F2_E3[3] == 9) Two_Menu_F2_E3[3] = 0;      //设置F2_E3个位
 614   3                                      else Two_Menu_F2_E3[3]++;
 615   3                                      break;
 616   3                              case TWO_MENU_F2_E4_D1:
 617   3                                      if (Two_Menu_F2_E4[0] == 20) Two_Menu_F2_E4[0] = 0;     //设置F2_E4千位
 618   3                                      else Two_Menu_F2_E4[0]++;
 619   3                                      break;
 620   3                              case TWO_MENU_F2_E4_D2:
 621   3                                      if (Two_Menu_F2_E4[1] == 9) Two_Menu_F2_E4[1] = 0;      //设置F2_E4百位
 622   3                                      else Two_Menu_F2_E4[1]++;
 623   3                                      break;
 624   3                              case TWO_MENU_F2_E4_D3:
 625   3                                      if (Two_Menu_F2_E4[2] == 9) Two_Menu_F2_E4[2] = 0;      //设置F2_E4十位
 626   3                                      else Two_Menu_F2_E4[2]++;
 627   3                                      break;
 628   3                              case TWO_MENU_F2_E4_D4:
 629   3                                      if (Two_Menu_F2_E4[3] == 9) Two_Menu_F2_E4[3] = 0;      //设置F2_E4个位
 630   3                                      else Two_Menu_F2_E4[3]++;
 631   3                              case TWO_MENU_F3_E1_SET:
 632   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 633   3                                      else Two_Menu_F3_E1 = 1;
 634   3                                      break;
 635   3                              case TWO_MENU_F3_E2_SET:
 636   3                                      if (Two_Menu_F3_E2 == 99) Two_Menu_F3_E2 = 1;   //存储队列个数
 637   3                                      else Two_Menu_F3_E2 ++;
 638   3                                      break;
 639   3                              case TWO_MENU_F4_SET:
 640   3                                      if (Two_Menu_F4_E1 == 99) Two_Menu_F4_E1 = 0;   //销号时间设置
 641   3                                      else Two_Menu_F4_E1++;
 642   3                                      break;
 643   3                              case TWO_MENU_F5_SET:
 644   3                                      if (Two_Menu_F5_E1 == 99) Two_Menu_F5_E1 = 0;   //循环时间设置
 645   3                                      else Two_Menu_F5_E1++;
 646   3                                      break;
 647   3                              case TWO_MENU_F6_E1_SET:
 648   3                                      if (Two_Menu_F6_E1 == 7) Two_Menu_F6_E1 = 0;    //F6_E1语音选择
 649   3                                      else Two_Menu_F6_E1++;
 650   3                                      break;
 651   3                              case TWO_MENU_F6_E2_SET:
 652   3                                      if (Two_Menu_F6_E2 == 9) Two_Menu_F6_E2 = 1;    //F6_E2语音报读次数
 653   3                                      else Two_Menu_F6_E2++;
 654   3                                      break;
 655   3                              case TWO_MENU_F6_E3_SET:
 656   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 657   3                                      else Two_Menu_F6_E3 = 0;
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 13  

 658   3                                      break;
 659   3                              case TWO_MENU_F6_E4_SET:
 660   3                                      if (Two_Menu_F6_E4 == 9) Two_Menu_F6_E4 = 0;    //F6_E4音量大小调整
 661   3                                      else Two_Menu_F6_E4++;
 662   3                                      break;
 663   3                              case TWO_MENU_F6_E5_SET:
 664   3                                      if (Two_Menu_F6_E5 == 7) Two_Menu_F6_E5 = 0;    //F6_E5屏幕亮度调整
 665   3                                      else Two_Menu_F6_E5++;
 666   3                                      break;
 667   3                              case TWO_MENU_F7_E1_SET:
 668   3                                      if (Two_Menu_F7_E1 == 11) Two_Menu_F7_E1 = 0;   //F7_E1原始规则 999*9
 669   3                                      else Two_Menu_F7_E1++;
 670   3                                      break;
 671   3                              case TWO_MENU_F7_E2_SET:
 672   3                                      if (Two_Menu_F7_E2 == 11) Two_Menu_F7_E2 = 0;   //F7_E2附加规则 9999*9
 673   3                                      else Two_Menu_F7_E2++;
 674   3                                      break;
 675   3                              case TWO_MENU_F7_E3_SET:
 676   3                                      if (Two_Menu_F7_E3 == 11) Two_Menu_F7_E3 = 0;   //F7_E3附加规则 999*99
 677   3                                      else Two_Menu_F7_E3++;
 678   3                                      break;
 679   3                              case TWO_MENU_F7_E4_SET:
 680   3                                      if (Two_Menu_F7_E4 == 11) Two_Menu_F7_E4 = 0;   //F7_E3附加规则 9999*99
 681   3                                      else Two_Menu_F7_E4++;
 682   3                                      break;
 683   3                              case TWO_MENU_F8_E1_SET:
 684   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 685   3                                      else Two_Menu_F8_E1 = 1 ;
 686   3                                      break;
 687   3                              case TWO_MENU_F8_E2_SET:
 688   3                                      if (Two_Menu_F8_E2 == 38) Two_Menu_F8_E2 = 0;   //F8_E2键位设置
 689   3                                      else Two_Menu_F8_E2++;
 690   3                                      break;
 691   3                              case DECODER_MENU:
 692   3                                      CycleUp();
 693   3                                      break;
 694   3                              case TWO_MENU_FC_SET:
 695   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 696   3                                      else Two_Menu_FC_E1 = 1;
 697   3                                      break;
 698   3                              case TWO_MENU_Fb_SET:
 699   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 700   3                                      else Two_Menu_Fb_E1 = 1;
 701   3                                      break;
 702   3                              case TWO_MENU_F6_E6_SET:
 703   3                                      if (Two_Menu_F6_E6 == 1) Two_Menu_F6_E6 = 0;    
 704   3                                      else Two_Menu_F6_E6 = 1;
 705   3                                      break;
 706   3                              case TWO_MENU_F6_E7_SET:
 707   3                                      if (Two_Menu_F6_E7 == 1) Two_Menu_F6_E7 = 0;
 708   3                                      else Two_Menu_F6_E7 = 1;
 709   3                                      break;
 710   3      
 711   3                                      default:break;
 712   3                              }       
 713   2                              func_index = table[func_index].up; break;
 714   2                      case KEY_DOWN:
 715   2                              switch (func_index)
 716   2                              {
 717   3                              case TWO_MENU_F0_YEAR:
 718   3                                      if (time_buf1[1] == 0) time_buf1[1] = 99;       //设置万年历 年
 719   3                                      else time_buf1[1]--;
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 14  

 720   3                                      break;
 721   3                              case TWO_MENU_F0_MOUTH:
 722   3                                      if (time_buf1[2] == 1) time_buf1[2] = 12;       //设置万年历 月
 723   3                                      else time_buf1[2]--;
 724   3                                      break;
 725   3                              case TWO_MENU_F0_DAY:
 726   3                                      if (time_buf1[3] == 1) time_buf1[3] = 31;       //设置万年历 日
 727   3                                      else time_buf1[3]--;
 728   3                                      break;
 729   3                              case TWO_MENU_F0_WEEK:
 730   3                                      if (time_buf1[7] == 1) time_buf1[7] = 7;        //设置万年历 星期
 731   3                                      else time_buf1[7]--;
 732   3                                      break;
 733   3                              case TWO_MENU_F0_HOUR:
 734   3                                      if (time_buf1[4] == 0) time_buf1[4] = 23;       //设置万年历 小时
 735   3                                      else time_buf1[4]--;
 736   3                                      break;
 737   3                              case TWO_MENU_F0_MINUTE:
 738   3                                      if (time_buf1[5] == 0) time_buf1[5] = 59;       //设置万年历 分钟
 739   3                                      else time_buf1[5]--;
 740   3                                      break;
 741   3                              case TWO_MENU_F1_E1_D1:
 742   3                                      if (Two_Menu_F1_E1[0] == 0) Two_Menu_F1_E1[0] = 20;     //设置F1_E1千位
 743   3                                      else Two_Menu_F1_E1[0]--;
 744   3                                      break;
 745   3                              case TWO_MENU_F1_E1_D2:
 746   3                                      if (Two_Menu_F1_E1[1] == 0) Two_Menu_F1_E1[1] = 9;      //设置F1_E1百位
 747   3                                      else Two_Menu_F1_E1[1]--;
 748   3                                      break;
 749   3                              case TWO_MENU_F1_E1_D3:
 750   3                                      if (Two_Menu_F1_E1[2] == 0) Two_Menu_F1_E1[2] = 9;      //设置F1_E1十位
 751   3                                      else Two_Menu_F1_E1[2]--;
 752   3                                      break;
 753   3                              case TWO_MENU_F1_E1_D4:
 754   3                                      if (Two_Menu_F1_E1[3] == 0) Two_Menu_F1_E1[3] = 9;      //设置F1_E1个位
 755   3                                      else Two_Menu_F1_E1[3]--;
 756   3                                      break;
 757   3                              case TWO_MENU_F1_E2_D1:
 758   3                                      if (Two_Menu_F1_E2[0] == 0) Two_Menu_F1_E2[0] = 20;     //设置F1_E2千位
 759   3                                      else Two_Menu_F1_E2[0]--;
 760   3                                      break;
 761   3                              case TWO_MENU_F1_E2_D2:
 762   3                                      if (Two_Menu_F1_E2[1] == 0) Two_Menu_F1_E2[1] = 9;      //设置F1_E2百位
 763   3                                      else Two_Menu_F1_E2[1]--;
 764   3                                      break;
 765   3                              case TWO_MENU_F1_E2_D3:
 766   3                                      if (Two_Menu_F1_E2[2] == 0) Two_Menu_F1_E2[2] = 9;      //设置F1_E2十位
 767   3                                      else Two_Menu_F1_E2[2]--;
 768   3                                      break;
 769   3                              case TWO_MENU_F1_E2_D4:
 770   3                                      if (Two_Menu_F1_E2[3] == 0) Two_Menu_F1_E2[3] = 9;      //设置F1_E2个位
 771   3                                      else Two_Menu_F1_E2[3]--;
 772   3                                      break;
 773   3                              case TWO_MENU_F1_E3_D1:
 774   3                                      if (Two_Menu_F1_E3[0] == 0) Two_Menu_F1_E3[0] = 20;     //设置F1_E3千位
 775   3                                      else Two_Menu_F1_E3[0]--;
 776   3                                      break;
 777   3                              case TWO_MENU_F1_E3_D2:
 778   3                                      if (Two_Menu_F1_E3[1] == 0) Two_Menu_F1_E3[1] = 9;      //设置F1_E3百位
 779   3                                      else Two_Menu_F1_E3[1]--;
 780   3                                      break;
 781   3                              case TWO_MENU_F1_E3_D3:
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 15  

 782   3                                      if (Two_Menu_F1_E3[2] == 0) Two_Menu_F1_E3[2] = 9;      //设置F1_E3十位
 783   3                                      else Two_Menu_F1_E3[2]--;
 784   3                                      break;
 785   3                              case TWO_MENU_F1_E3_D4:
 786   3                                      if (Two_Menu_F1_E3[3] == 0) Two_Menu_F1_E3[3] = 9;      //设置F1_E3个位
 787   3                                      else Two_Menu_F1_E3[3]--;
 788   3                                      break;
 789   3                              case TWO_MENU_F1_E4_D1:
 790   3                                      if (Two_Menu_F1_E4[0] == 0) Two_Menu_F1_E4[0] = 20;     //设置F1_E4千位
 791   3                                      else Two_Menu_F1_E4[0]--;
 792   3                                      break;
 793   3                              case TWO_MENU_F1_E4_D2:
 794   3                                      if (Two_Menu_F1_E4[1] == 0) Two_Menu_F1_E4[1] = 9;      //设置F1_E4百位
 795   3                                      else Two_Menu_F1_E4[1]--;
 796   3                                      break;
 797   3                              case TWO_MENU_F1_E4_D3:
 798   3                                      if (Two_Menu_F1_E4[2] == 0) Two_Menu_F1_E4[2] = 9;      //设置F1_E4十位
 799   3                                      else Two_Menu_F1_E4[2]--;
 800   3                                      break;
 801   3                              case TWO_MENU_F1_E4_D4:
 802   3                                      if (Two_Menu_F1_E4[3] == 0) Two_Menu_F1_E4[3] = 9;      //设置F1_E4个位
 803   3                                      else Two_Menu_F1_E4[3]--;
 804   3                                      break;
 805   3                              case TWO_MENU_F2_E1_D1:
 806   3                                      if (Two_Menu_F2_E1[0] == 0) Two_Menu_F2_E1[0] = 20;     //设置F2_E1千位
 807   3                                      else Two_Menu_F2_E1[0]--;
 808   3                                      break;
 809   3                              case TWO_MENU_F2_E1_D2:
 810   3                                      if (Two_Menu_F2_E1[1] == 0) Two_Menu_F2_E1[1] = 9;      //设置F2_E1百位
 811   3                                      else Two_Menu_F2_E1[1]--;
 812   3                                      break;
 813   3                              case TWO_MENU_F2_E1_D3:
 814   3                                      if (Two_Menu_F2_E1[2] == 0) Two_Menu_F2_E1[2] = 9;      //设置F2_E1十位
 815   3                                      else Two_Menu_F2_E1[2]--;
 816   3                                      break;
 817   3                              case TWO_MENU_F2_E1_D4:
 818   3                                      if (Two_Menu_F2_E1[3] == 0) Two_Menu_F2_E1[3] = 9;      //设置F2_E1个位
 819   3                                      else Two_Menu_F2_E1[3]--;
 820   3                                      break;
 821   3                              case TWO_MENU_F2_E2_D1:
 822   3                                      if (Two_Menu_F2_E2[0] == 0) Two_Menu_F2_E2[0] = 20;     //设置F2_E2千位
 823   3                                      else Two_Menu_F2_E2[0]--;
 824   3                                      break;
 825   3                              case TWO_MENU_F2_E2_D2:
 826   3                                      if (Two_Menu_F2_E2[1] == 0) Two_Menu_F2_E2[1] = 9;      //设置F2_E2百位
 827   3                                      else Two_Menu_F2_E2[1]--;
 828   3                                      break;
 829   3                              case TWO_MENU_F2_E2_D3:
 830   3                                      if (Two_Menu_F2_E2[2] == 0) Two_Menu_F2_E2[2] = 9;      //设置F2_E2十位
 831   3                                      else Two_Menu_F2_E2[2]--;
 832   3                                      break;
 833   3                              case TWO_MENU_F2_E2_D4:
 834   3                                      if (Two_Menu_F2_E2[3] == 0) Two_Menu_F2_E2[3] = 9;      //设置F2_E2个位
 835   3                                      else Two_Menu_F2_E2[3]--;
 836   3                                      break;
 837   3                              case TWO_MENU_F2_E3_D1:
 838   3                                      if (Two_Menu_F2_E3[0] == 0) Two_Menu_F2_E3[0] = 20;     //设置F2_E3千位
 839   3                                      else Two_Menu_F2_E3[0]--;
 840   3                                      break;
 841   3                              case TWO_MENU_F2_E3_D2:
 842   3                                      if (Two_Menu_F2_E3[1] == 0) Two_Menu_F2_E3[1] = 9;      //设置F2_E3百位
 843   3                                      else Two_Menu_F2_E3[1]--;
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 16  

 844   3                                      break;
 845   3                              case TWO_MENU_F2_E3_D3:
 846   3                                      if (Two_Menu_F2_E3[2] == 0) Two_Menu_F2_E3[2] = 9;      //设置F2_E3十位
 847   3                                      else Two_Menu_F2_E3[2]--;
 848   3                                      break;
 849   3                              case TWO_MENU_F2_E3_D4:
 850   3                                      if (Two_Menu_F2_E3[3] == 0) Two_Menu_F2_E3[3] = 9;      //设置F2_E3个位
 851   3                                      else Two_Menu_F2_E3[3]--;
 852   3                                      break;
 853   3                              case TWO_MENU_F2_E4_D1:
 854   3                                      if (Two_Menu_F2_E4[0] == 0) Two_Menu_F2_E4[0] = 20;     //设置F2_E4千位
 855   3                                      else Two_Menu_F2_E4[0]--;
 856   3                                      break;
 857   3                              case TWO_MENU_F2_E4_D2:
 858   3                                      if (Two_Menu_F2_E4[1] == 0) Two_Menu_F2_E4[1] = 9;      //设置F2_E4百位
 859   3                                      else Two_Menu_F2_E4[1]--;
 860   3                                      break;
 861   3                              case TWO_MENU_F2_E4_D3:
 862   3                                      if (Two_Menu_F2_E4[2] == 0) Two_Menu_F2_E4[2] = 9;      //设置F2_E4十位
 863   3                                      else Two_Menu_F2_E4[2]--;
 864   3                                      break;
 865   3                              case TWO_MENU_F2_E4_D4:
 866   3                                      if (Two_Menu_F2_E4[3] == 0) Two_Menu_F2_E4[3] = 9;      //设置F2_E4个位
 867   3                                      else Two_Menu_F2_E4[3]--;
 868   3                                      break;
 869   3                              case TWO_MENU_F3_E1_SET:
 870   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 871   3                                      else Two_Menu_F3_E1 = 1;
 872   3                                      break;
 873   3                              case TWO_MENU_F3_E2_SET:
 874   3                                      if (Two_Menu_F3_E2 == 1) Two_Menu_F3_E2 = 99;   //存储队列个数
 875   3                                      else Two_Menu_F3_E2--;
 876   3                                      break;
 877   3                              case TWO_MENU_F4_SET:
 878   3                                      if (Two_Menu_F4_E1 == 0) Two_Menu_F4_E1 = 99;   //销号时间设置
 879   3                                      else Two_Menu_F4_E1--;
 880   3                                      break;
 881   3                              case TWO_MENU_F5_SET:
 882   3                                      if (Two_Menu_F5_E1 == 0) Two_Menu_F5_E1 = 99;   //销号时间设置
 883   3                                      else Two_Menu_F5_E1--;
 884   3                                      break;
 885   3                              case TWO_MENU_F6_E1_SET:
 886   3                                      if (Two_Menu_F6_E1 == 0) Two_Menu_F6_E1 = 7;    //F6_E1额语音选择
 887   3                                      else Two_Menu_F6_E1--;
 888   3                                      break;
 889   3                              case TWO_MENU_F6_E2_SET:
 890   3                                      if (Two_Menu_F6_E2 == 1) Two_Menu_F6_E2 = 9;    //F6_E2语音报读次数调整
 891   3                                      else Two_Menu_F6_E2--;
 892   3                                      break;
 893   3                              case TWO_MENU_F6_E3_SET:
 894   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 895   3                                      else Two_Menu_F6_E3 = 0;
 896   3                                      break;
 897   3                              case TWO_MENU_F6_E4_SET:
 898   3                                      if (Two_Menu_F6_E4 == 0) Two_Menu_F6_E4 = 9;    //F6_E4音量大小调整
 899   3                                      else Two_Menu_F6_E4--;
 900   3                                      break;
 901   3                              case TWO_MENU_F6_E5_SET:
 902   3                                      if (Two_Menu_F6_E5 == 0) Two_Menu_F6_E5 = 7;    //F6_E5屏幕亮度调整
 903   3                                      else Two_Menu_F6_E5--;
 904   3                                      break;
 905   3                              case TWO_MENU_F7_E1_SET:
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 17  

 906   3                                      if (Two_Menu_F7_E1 == 0) Two_Menu_F7_E1 = 11;   //F7_E1原始规则 999*9
 907   3                                      else Two_Menu_F7_E1--;
 908   3                                      break;
 909   3                              case TWO_MENU_F7_E2_SET:
 910   3                                      if (Two_Menu_F7_E2 == 0) Two_Menu_F7_E2 = 11;   //F7_E2附加规则 9999*9
 911   3                                      else Two_Menu_F7_E2--;
 912   3                                      break;
 913   3                              case TWO_MENU_F7_E3_SET:
 914   3                                      if (Two_Menu_F7_E3 == 0) Two_Menu_F7_E3 = 11;   //F7_E3附加规则 999*99
 915   3                                      else Two_Menu_F7_E3--;
 916   3                                      break;
 917   3                              case TWO_MENU_F7_E4_SET:
 918   3                                      if (Two_Menu_F7_E4 == 0) Two_Menu_F7_E4 = 11;   //F7_E3附加规则 9999*99
 919   3                                      else Two_Menu_F7_E4--;
 920   3                                      break;
 921   3                              case TWO_MENU_F8_E1_SET:
 922   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 923   3                                      else Two_Menu_F8_E1 = 1;
 924   3                                      break;
 925   3                              case TWO_MENU_F8_E2_SET:
 926   3                                      if (Two_Menu_F8_E2 == 0) Two_Menu_F8_E2 = 38;   //F8_E2键位设置
 927   3                                      else Two_Menu_F8_E2--;
 928   3                                      break;
 929   3                              case DECODER_MENU:
 930   3                                      CycleDown();
 931   3                                      break;
 932   3                              case TWO_MENU_FC_SET:
 933   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 934   3                                      else Two_Menu_FC_E1 = 1;
 935   3                                      break;
 936   3                              case TWO_MENU_Fb_SET:
 937   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 938   3                                      else Two_Menu_Fb_E1 = 1;
 939   3                                      break;
 940   3                              case TWO_MENU_F6_E6_SET:
 941   3                                      if (Two_Menu_F6_E6 == 1) Two_Menu_F6_E6 = 0;
 942   3                                      else Two_Menu_F6_E6 = 1;
 943   3                                      break;
 944   3                              case TWO_MENU_F6_E7_SET:
 945   3                                      if (Two_Menu_F6_E7 == 1) Two_Menu_F6_E7 = 0;
 946   3                                      else Two_Menu_F6_E7 = 1;
 947   3                                      break;
 948   3      
 949   3                                      default:break;
 950   3                              }
 951   2                              func_index = table[func_index].down; break;
 952   2                      default:break;
 953   2              }
 954   1              env_load();
 955   1              current_operation_index = table[func_index].index_operation;
 956   1              (*current_operation_index)();//执行当前操作函数
 957   1      }
 958          
 959          void delay10ms(void)   //误差 -0.054253472222us
 960          {
 961   1              unsigned char a, b, c;
 962   1              for (c = 4; c>0; c--)
 963   1              for (b = 52; b>0; b--)
 964   1              for (a = 220; a>0; a--);
 965   1              _nop_();  //if Keil,require use intrins.h
 966   1      }
 967          
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 18  

 968          unsigned char return_func_index(void)
 969          {
 970   1              unsigned char func_index_temp = 0;
 971   1              func_index_temp = func_index;
 972   1              return func_index_temp;
 973   1      }
 974          
 975          void set_func_index(unsigned char temp)
 976          {
 977   1              func_index = temp;
 978   1      }
 979          
 980          unsigned char return_Two_Menu_F3_E1(void)
 981          {
 982   1              unsigned char temp = 0;
 983   1              temp = Two_Menu_F3_E1;
 984   1              return temp;
 985   1      }
 986          
 987          unsigned char return_Two_Menu_F3_E2(void)
 988          {
 989   1              unsigned char temp = 0;
 990   1              temp = Two_Menu_F3_E2;
 991   1              return temp;
 992   1      }
 993          
 994          unsigned char return_Two_Menu_F4_E1(void)
 995          {
 996   1              unsigned char temp = 0;
 997   1              temp = Two_Menu_F4_E1;
 998   1              return temp;
 999   1      }
1000          
1001          unsigned char return_Two_Menu_F5_E1(void)
1002          {
1003   1              unsigned char temp = 0;
1004   1              temp = Two_Menu_F5_E1;
1005   1              return temp;
1006   1      }
1007          
1008          unsigned char return_Two_Menu_F6_E1(void)
1009          {
1010   1              unsigned char temp = 0;
1011   1              temp = Two_Menu_F6_E1;
1012   1              return temp;
1013   1      }
1014          
1015          unsigned char return_Two_Menu_F6_E2(void)
1016          {
1017   1              unsigned char temp = 0;
1018   1              temp = Two_Menu_F6_E2;
1019   1              return temp;
1020   1      }
1021          
1022          unsigned char return_Two_Menu_F6_E3(void)
1023          {
1024   1              unsigned char temp = 0;
1025   1              temp = Two_Menu_F6_E3;
1026   1              return temp;
1027   1      }
1028          
1029          unsigned char return_Two_Menu_F6_E4(void)
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 19  

1030          {
1031   1              unsigned char temp = 0;
1032   1              temp = Two_Menu_F6_E4;
1033   1              return temp;
1034   1      }
1035          
1036          unsigned char return_Two_Menu_F6_E5(void)
1037          {
1038   1              unsigned char temp = 0;
1039   1              temp = Two_Menu_F6_E5;
1040   1              return temp;
1041   1      }
1042          unsigned char return_Two_Menu_F6_E6(void)
1043          {
1044   1              unsigned char temp = 0;
1045   1              temp = Two_Menu_F6_E6;
1046   1              return temp;
1047   1      }
1048          
1049          unsigned char return_Two_Menu_F6_E7(void)
1050          {
1051   1              unsigned char temp = 0;
1052   1              temp = Two_Menu_F6_E7;
1053   1              return temp;
1054   1      }
1055          
1056          
1057          unsigned char return_Two_Menu_F7_E1(void)
1058          {
1059   1              unsigned char temp = 0;
1060   1              temp = Two_Menu_F7_E1;
1061   1              return temp;
1062   1      }
1063          
1064          unsigned char return_Two_Menu_F7_E2(void)
1065          {
1066   1              unsigned char temp = 0;
1067   1              temp = Two_Menu_F7_E2;
1068   1              return temp;
1069   1      }
1070          
1071          unsigned char return_Two_Menu_F7_E3(void)
1072          {
1073   1              unsigned char temp = 0;
1074   1              temp = Two_Menu_F7_E3;
1075   1              return temp;
1076   1      }
1077          
1078          unsigned char return_Two_Menu_F7_E4(void)
1079          {
1080   1              unsigned char temp = 0;
1081   1              temp = Two_Menu_F7_E4;
1082   1              return temp;
1083   1      }
1084          
1085          unsigned char return_Two_Menu_F8_E1(void)
1086          {
1087   1              unsigned char temp = 0;
1088   1              temp = Two_Menu_F8_E1;
1089   1              return temp;
1090   1      }
1091          
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 20  

1092          unsigned char return_Two_Menu_F8_E2(void)
1093          {
1094   1              unsigned char temp = 0;
1095   1              temp = Two_Menu_F8_E2;
1096   1              return temp;
1097   1      }
1098          
1099          unsigned char return_sound_table(void)
1100          {
1101   1              unsigned char temp = 0;
1102   1              temp = sound_table;
1103   1              return temp;
1104   1      }
1105          
1106          void set_sound_table(unsigned char temp)
1107          {
1108   1              sound_table = temp;
1109   1      }
1110          
1111          unsigned char return_Two_Menu_FC_E1(void)
1112          {
1113   1              unsigned char temp = 0;
1114   1              temp = Two_Menu_FC_E1;
1115   1              return temp;
1116   1      }
1117          
1118          unsigned char return_Two_Menu_Fb_E1(void)
1119          {
1120   1              unsigned char temp = 0;
1121   1              temp = Two_Menu_Fb_E1;
1122   1              return temp;
1123   1      }
1124          
1125          void env_load(void)
1126          {
1127   1              
1128   1              EEPROM.Two_Menu_F3_E1 = Two_Menu_F3_E1;
1129   1              EEPROM.Two_Menu_F3_E2 = Two_Menu_F3_E2;
1130   1              EEPROM.Two_Menu_F4_E1 = Two_Menu_F4_E1;
1131   1              EEPROM.Two_Menu_F5_E1 = Two_Menu_F5_E1;
1132   1              EEPROM.Two_Menu_F6_E1 = Two_Menu_F6_E1;
1133   1              EEPROM.Two_Menu_F6_E2 = Two_Menu_F6_E2;
1134   1              EEPROM.Two_Menu_F6_E3 = Two_Menu_F6_E3;
1135   1              EEPROM.Two_Menu_F6_E4 = Two_Menu_F6_E4;
1136   1              EEPROM.Two_Menu_F6_E5 = Two_Menu_F6_E5;
1137   1              EEPROM.Two_Menu_F6_E6 = Two_Menu_F6_E6;
1138   1              EEPROM.Two_Menu_F6_E7 = Two_Menu_F6_E7;
1139   1              EEPROM.Two_Menu_F7_E1 = Two_Menu_F7_E1;
1140   1              EEPROM.Two_Menu_F8_E1 = Two_Menu_F8_E1;
1141   1              EEPROM.Two_Menu_Fb_E1 = Two_Menu_Fb_E1;
1142   1              EEPROM.Two_Menu_FC_E1 = Two_Menu_FC_E1;
1143   1      
1144   1              ISendStr(I2C_ADDRESS, BACK, (uint8_t *)&EEPROM, 15);
1145   1              delay10ms();
1146   1      }
1147          
1148          void env_init(void)
1149          {
1150   1              IRcvStr(I2C_ADDRESS, SIN_KEY, single_key, 16);
1151   1              delay10ms();
1152   1              IRcvStr(I2C_ADDRESS, MUL_KEY, multiple_key, 16);
1153   1              delay10ms();
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 21  

1154   1              IRcvStr(I2C_ADDRESS, BACK, (uint8_t *)&EEPROM, 15);
1155   1              delay10ms();
1156   1      
1157   1              Two_Menu_F3_E1 =  EEPROM.Two_Menu_F3_E1 ;
1158   1              Two_Menu_F3_E2 =  EEPROM.Two_Menu_F3_E2 ;
1159   1              Two_Menu_F4_E1 =  EEPROM.Two_Menu_F4_E1 ;
1160   1              Two_Menu_F5_E1 =  EEPROM.Two_Menu_F5_E1 ;
1161   1              Two_Menu_F6_E1 =  EEPROM.Two_Menu_F6_E1 ;
1162   1              Two_Menu_F6_E2 =  EEPROM.Two_Menu_F6_E2 ;
1163   1              Two_Menu_F6_E3 =  EEPROM.Two_Menu_F6_E3 ;
1164   1              Two_Menu_F6_E4 =  EEPROM.Two_Menu_F6_E4 ;
1165   1              Two_Menu_F6_E5 =  EEPROM.Two_Menu_F6_E5 ;
1166   1              Two_Menu_F6_E6 =  EEPROM.Two_Menu_F6_E6 ;
1167   1              Two_Menu_F6_E7 =  EEPROM.Two_Menu_F6_E7 ;
1168   1              Two_Menu_F7_E1 =  EEPROM.Two_Menu_F7_E1 ;
1169   1              Two_Menu_F8_E1 =  EEPROM.Two_Menu_F8_E1;
1170   1              Two_Menu_Fb_E1 =  EEPROM.Two_Menu_Fb_E1;
1171   1              Two_Menu_FC_E1 =  EEPROM.Two_Menu_FC_E1;
1172   1      
1173   1              if (EEPROM.Two_Menu_F3_E1 > 2)
1174   1              {
1175   2                      Two_Menu_F3_E1 = 1;
1176   2              }
1177   1              if (EEPROM.Two_Menu_F3_E2 > 99)
1178   1              {
1179   2                      Two_Menu_F3_E2 = 1;
1180   2              }
1181   1              if (EEPROM.Two_Menu_F4_E1 > 99)
1182   1              {
1183   2                      Two_Menu_F4_E1 = 1;
1184   2              }
1185   1              if (EEPROM.Two_Menu_F5_E1 > 99)
1186   1              {
1187   2                      Two_Menu_F5_E1 = 1;
1188   2              }
1189   1              if (EEPROM.Two_Menu_F6_E1 > 7)
1190   1              {
1191   2                      Two_Menu_F6_E1 = 0;
1192   2              }
1193   1              if (EEPROM.Two_Menu_F6_E2 > 9)
1194   1              {
1195   2                      Two_Menu_F6_E2 = 2;
1196   2              }
1197   1              if (EEPROM.Two_Menu_F6_E3 > 1)
1198   1              {
1199   2                      Two_Menu_F6_E3 = 0;
1200   2              }
1201   1              if (EEPROM.Two_Menu_F6_E4 > 9)
1202   1              {
1203   2                      Two_Menu_F6_E4 = 6;
1204   2              }
1205   1              if (EEPROM.Two_Menu_F6_E5 > 7)
1206   1              {
1207   2                      Two_Menu_F6_E5 = 3;
1208   2              }
1209   1              if (EEPROM.Two_Menu_F6_E6 > 1)
1210   1              {
1211   2                      Two_Menu_F6_E6 = 0;
1212   2              }
1213   1              if (EEPROM.Two_Menu_F6_E7 > 1)
1214   1              {
1215   2                      Two_Menu_F6_E7 = 0;
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 22  

1216   2              }
1217   1              if (EEPROM.Two_Menu_F7_E1 > 11)
1218   1              {
1219   2                      Two_Menu_F7_E1 = 11;
1220   2              }
1221   1              if (EEPROM.Two_Menu_F8_E1 > 2)
1222   1              {
1223   2                      Two_Menu_F8_E1 = 2;
1224   2              }
1225   1              if (EEPROM.Two_Menu_Fb_E1 > 1)
1226   1              {
1227   2                      Two_Menu_Fb_E1 = 1;
1228   2              }
1229   1              if (EEPROM.Two_Menu_FC_E1 > 2)
1230   1              {
1231   2                      Two_Menu_FC_E1 = 1;
1232   2              }
1233   1      }
1234          
1235          void var_init(void)
1236          {
1237   1              Two_Menu_F3_E1 = 1; //即时模式或者排队显示
1238   1              Two_Menu_F3_E2 = 1; //呼叫时候存储数量
1239   1      
1240   1              Two_Menu_F4_E1 = 0; //销号时间
1241   1              Two_Menu_F5_E1 = 0; //循环间隔时间
1242   1      
1243   1              Two_Menu_F6_E1 = 0; //简单报读
1244   1              Two_Menu_F6_E2 = 2; //语音报读次数
1245   1              Two_Menu_F6_E3 = 0; //循环时候是否报读
1246   1              Two_Menu_F6_E4 = 6; //音量大小调整
1247   1              Two_Menu_F6_E5 = 3; //显示屏LED亮度调整
1248   1              Two_Menu_F6_E6 = 1; //语音导航调整
1249   1              Two_Menu_F6_E7 = 0; //语音导航调整
1250   1      
1251   1              Two_Menu_F7_E1 = 11; // E1默认键盘规则 999*9
1252   1              Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
1253   1              Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
1254   1              Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
1255   1      
1256   1              Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
1257   1      
1258   1              Two_Menu_F8_E2 = 0; // 键位设置
1259   1      
1260   1              Two_Menu_Fb_E1 = 1; // 设置主机有没有销号功能
1261   1              Two_Menu_FC_E1 = 1; // 设置万年历待机与----待机的切换
1262   1              Two_Menu_Fd_E1 = 1; // E1 E2 E3 E4 E5 E6
1263   1      
1264   1      }
1265          
1266          void key_init(void)
1267          {
1268   1              unsigned char i;
1269   1              for (i = 0; i < 16; i++)
1270   1              {
1271   2                      single_key[i] = 0x01;
1272   2              }
1273   1      
1274   1              multiple_key[0] = 0X01;
1275   1              multiple_key[1] = QUXIAO - QUXIAO;
1276   1              multiple_key[2] = JIEZHANG - QUXIAO;
1277   1              multiple_key[3] = DIANDANG - QUXIAO;
C51 COMPILER V9.00   KEY                                                                   10/30/2015 16:53:23 PAGE 23  

1278   1              multiple_key[4] = JIUSHUI - QUXIAO;
1279   1              multiple_key[5] = 0X01;
1280   1              multiple_key[6] = 0x01;
1281   1              multiple_key[7] = JIASHUI - QUXIAO;
1282   1              multiple_key[8] = HUJIAO - QUXIAO;
1283   1              multiple_key[9] =  0x01;
1284   1              multiple_key[10] = 0x01;
1285   1              multiple_key[11] = 0x01;
1286   1              multiple_key[12] = 0x01;
1287   1              multiple_key[13] = 0x01;
1288   1              multiple_key[14] = 0x01;
1289   1              multiple_key[15] = 0x01;
1290   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4357    ----
   CONSTANT SIZE    =    800    ----
   XDATA SIZE       =     66       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
