C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\key.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\k
                    -ey.lst) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "usart.h"
   3          #include "tm1629.h"
   4          #include "menu.h"
   5          #include "timer.h"
   6          #include "ds1302.h"
   7          #include "at24c256.h"
   8          #include "gd5800.h"
   9          #include "ev1527.h"
  10          
  11          unsigned char sound_table = 0;
  12          unsigned char accumulate_decoder = 0;
  13          
  14          unsigned char func_index = 0; //多级菜单索引变量
  15          void(*current_operation_index)();// 多级菜单函数指针
  16          
  17          unsigned char Two_Menu_F1_E1[5] = { 0, 0, 0, 1 }; //F1_E1
  18          unsigned char Two_Menu_F1_E2[5] = { 0, 0, 0, 1 }; //F1_E2
  19          unsigned char Two_Menu_F1_E3[5] = { 0, 0, 0, 1 }; //F1_E3
  20          unsigned char Two_Menu_F1_E4[5] = { 0, 0, 0, 1 }; //F1_E4
  21          unsigned char Two_Menu_F2_E1[5] = { 0, 0, 0, 1 }; //F2_E1
  22          unsigned char Two_Menu_F2_E2[5] = { 0, 0, 0, 1 }; //F2_E2
  23          unsigned char Two_Menu_F2_E3[5] = { 0, 0, 0, 1 }; //F2_E3
  24          unsigned char Two_Menu_F2_E4[5] = { 0, 0, 0, 1 }; //F2_E4
  25          
  26          unsigned char Two_Menu_F3_E1 = 1; //即时模式或者排队显示
  27          unsigned char Two_Menu_F3_E2 = 1; //呼叫时候存储数量
  28          
  29          unsigned char Two_Menu_F4_E1 = 0; //销号时间
  30          unsigned char Two_Menu_F5_E1 = 0; //循环间隔时间
  31          
  32          unsigned char Two_Menu_F6_E1 = 0; //简单报读
  33          unsigned char Two_Menu_F6_E2 = 2; //语音报读次数
  34          unsigned char Two_Menu_F6_E3 = 0; //循环时候是否报读
  35          unsigned char Two_Menu_F6_E4 = 6; //音量大小调整
  36          unsigned char Two_Menu_F6_E5 = 3; //显示屏LED亮度调整
  37          unsigned char Two_Menu_F6_E6 = 1; //语音导航调整
  38          unsigned char Two_Menu_F6_E7 = 0; //语音导航调整
  39          
  40          unsigned char Two_Menu_F7_E1 = 11; // E1默认键盘规则 999*9
  41          unsigned char Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
  42          unsigned char Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
  43          unsigned char Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
  44          
  45          unsigned char Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
  46          
  47          unsigned char Two_Menu_F8_E2 = 0; // 键位设置
  48          
  49          unsigned char Two_Menu_Fb_E1 = 1; // 设置主机有没有销号功能
  50          unsigned char Two_Menu_FC_E1 = 1; // 设置万年历待机与----待机的切换
  51          unsigned char Two_Menu_Fd_E1 = 1; // E1 E2 E3 E4 E5 E6
  52          
  53          key_table code table[100] =
  54          {       // 目标索引                 上                          下          确认                 退出         函数
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 2   

  55                  { MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, (*fun0) }, //待机
  56          
  57                  { ONE_MENU_F0, ONE_MENU_F1, ONE_MENU_Fd, TWO_MENU_F0_MINUTE, MENU_STANDBY, (*fun1) }, //F0-F9
  58                  { ONE_MENU_F1, ONE_MENU_F2, ONE_MENU_F0, TWO_MENU_F1_E1   , MENU_STANDBY, (*fun2) },
  59                  { ONE_MENU_F2, ONE_MENU_F3, ONE_MENU_F1, TWO_MENU_F2_E1   , MENU_STANDBY, (*fun3) },
  60                  { ONE_MENU_F3, ONE_MENU_F4, ONE_MENU_F2, TWO_MENU_F3_E1   , MENU_STANDBY, (*fun4) },
  61                  { ONE_MENU_F4, ONE_MENU_F5, ONE_MENU_F3, TWO_MENU_F4_SET  , MENU_STANDBY, (*fun5) },
  62                  { ONE_MENU_F5, ONE_MENU_F6, ONE_MENU_F4, TWO_MENU_F5_SET  , MENU_STANDBY, (*fun6) },
  63                  { ONE_MENU_F6, ONE_MENU_F7, ONE_MENU_F5, TWO_MENU_F6_E1   , MENU_STANDBY, (*fun7) },
  64                  { ONE_MENU_F7, ONE_MENU_F8, ONE_MENU_F6, TWO_MENU_F7_E1   , MENU_STANDBY, (*fun8) },
  65                  { ONE_MENU_F8, ONE_MENU_F9, ONE_MENU_F7, TWO_MENU_F8_E1   , MENU_STANDBY, (*fun9) },
  66                  { ONE_MENU_F9, ONE_MENU_FA, ONE_MENU_F8, TWO_MENU_F9_E1   , MENU_STANDBY, (*fun10) },
  67                  { ONE_MENU_FA, ONE_MENU_Fb, ONE_MENU_F9, ONE_MENU_FA, MENU_STANDBY, (*fun11) }, //FA
  68                  { ONE_MENU_Fb, ONE_MENU_FC, ONE_MENU_FA, ONE_MENU_Fb, MENU_STANDBY, (*fun12) }, //Fb
  69                  { ONE_MENU_FC, ONE_MENU_Fd, ONE_MENU_Fb, ONE_MENU_FC, MENU_STANDBY, (*fun13) }, //FC
  70                  { ONE_MENU_Fd, ONE_MENU_F0, ONE_MENU_FC, ONE_MENU_Fd, MENU_STANDBY, (*fun14) }, //Fd
  71          
  72                  { TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_MINUTE , ONE_MENU_F0, (*fun15) 
             -}, //万年历 年
  73                  { TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_YEAR   , ONE_MENU_F0, (*fun16) 
             -}, //万年历 月
  74                  { TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_MOUTH  , ONE_MENU_F0, (*fun17) 
             -}, //万年历 日
  75                  { TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_DAY  , ONE_MENU_F0, (*fun18) },
             - //万年历 周
  76                  { TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_WEEK, ONE_MENU_F0, (*fun19) }, 
             -//万年历 小时
  77                  { TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_HOUR  , ONE_MENU_F0, (*fun20) }
             -, //万年历 分钟
  78          
  79                  { TWO_MENU_F1_E1, TWO_MENU_F1_E2, TWO_MENU_F1_E4, TWO_MENU_F1_E1_D4, ONE_MENU_F1, (*fun21) }, //F1子菜单E
             -1
  80                  { TWO_MENU_F1_E2, TWO_MENU_F1_E3, TWO_MENU_F1_E1, TWO_MENU_F1_E2_D4, ONE_MENU_F1, (*fun22) }, //F1子菜单E
             -2
  81                  { TWO_MENU_F1_E3, TWO_MENU_F1_E4, TWO_MENU_F1_E2, TWO_MENU_F1_E3_D4, ONE_MENU_F1, (*fun23) }, //F1子菜单E
             -3
  82                  { TWO_MENU_F1_E4, TWO_MENU_F1_E1, TWO_MENU_F1_E3, TWO_MENU_F1_E4_D4, ONE_MENU_F1, (*fun24) }, //F1子菜单E
             -4
  83          
  84                  { TWO_MENU_F2_E1, TWO_MENU_F2_E2, TWO_MENU_F2_E4, TWO_MENU_F2_E1_D4, ONE_MENU_F2, (*fun25) }, //F2子菜单E
             -1
  85                  { TWO_MENU_F2_E2, TWO_MENU_F2_E3, TWO_MENU_F2_E1, TWO_MENU_F2_E2_D4, ONE_MENU_F2, (*fun26) }, //F2子菜单E
             -2
  86                  { TWO_MENU_F2_E3, TWO_MENU_F2_E4, TWO_MENU_F2_E2, TWO_MENU_F2_E3_D4, ONE_MENU_F2, (*fun27) }, //F2子菜单E
             -3
  87                  { TWO_MENU_F2_E4, TWO_MENU_F2_E1, TWO_MENU_F2_E3, TWO_MENU_F2_E4_D4, ONE_MENU_F2, (*fun28) }, //F2子菜单E
             -4
  88          
  89                  { TWO_MENU_F3_E1, TWO_MENU_F3_E2, TWO_MENU_F3_E2, TWO_MENU_F3_E1_SET, ONE_MENU_F3, (*fun29) }, //F3子菜单
             -E1
  90                  { TWO_MENU_F3_E2, TWO_MENU_F3_E1, TWO_MENU_F3_E1, TWO_MENU_F3_E2_SET, ONE_MENU_F3, (*fun30) }, //F3子菜单
             -E2
  91          
  92                  { TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, ONE_MENU_F4, (*fun31) }, //F4子菜单
  93                  { TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, ONE_MENU_F5, (*fun32) }, //F5子菜单
  94          
  95                  { TWO_MENU_F6_E1, TWO_MENU_F6_E2, TWO_MENU_F6_E7, TWO_MENU_F6_E1_SET, ONE_MENU_F6, (*fun33) }, //F6子菜单
             -E1
  96                  { TWO_MENU_F6_E2, TWO_MENU_F6_E3, TWO_MENU_F6_E1, TWO_MENU_F6_E2_SET, ONE_MENU_F6, (*fun34) }, //F6子菜单
             -E2
  97                  { TWO_MENU_F6_E3, TWO_MENU_F6_E4, TWO_MENU_F6_E2, TWO_MENU_F6_E3_SET, ONE_MENU_F6, (*fun35) }, //F6子菜单
             -E3
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 3   

  98                  { TWO_MENU_F6_E4, TWO_MENU_F6_E5, TWO_MENU_F6_E3, TWO_MENU_F6_E4_SET, ONE_MENU_F6, (*fun36) }, //F6子菜单
             -E4
  99                  { TWO_MENU_F6_E5, TWO_MENU_F6_E6, TWO_MENU_F6_E4, TWO_MENU_F6_E5_SET, ONE_MENU_F6, (*fun37) }, //F6子菜单
             -E5
 100          
 101                  { TWO_MENU_F7_E1, TWO_MENU_F7_E2, TWO_MENU_F7_E4, TWO_MENU_F7_E1_SET, ONE_MENU_F7, (*fun38) }, //F7子菜单
             -E1
 102                  { TWO_MENU_F7_E2, TWO_MENU_F7_E3, TWO_MENU_F7_E1, TWO_MENU_F7_E2_SET, ONE_MENU_F7, (*fun39) }, //F7子菜单
             -E2
 103                  { TWO_MENU_F7_E3, TWO_MENU_F7_E4, TWO_MENU_F7_E2, TWO_MENU_F7_E3_SET, ONE_MENU_F7, (*fun40) }, //F7子菜单
             -E3
 104                  { TWO_MENU_F7_E4, TWO_MENU_F7_E1, TWO_MENU_F7_E3, TWO_MENU_F7_E4_SET, ONE_MENU_F7, (*fun41) }, //F7子菜单
             -E4        
 105          
 106                  { TWO_MENU_F8_E1, TWO_MENU_F8_E2, TWO_MENU_F8_E2, TWO_MENU_F8_E1_SET, ONE_MENU_F8, (*fun42) }, //F8子菜单
             -E1
 107                  { TWO_MENU_F8_E2, TWO_MENU_F8_E1, TWO_MENU_F8_E1, TWO_MENU_F8_E2_SET, ONE_MENU_F8, (*fun43) }, //F8子菜单
             -E2
 108          
 109                  { TWO_MENU_F9_E1, TWO_MENU_F9_E2, TWO_MENU_F9_E2, 0, ONE_MENU_F9, (*fun44) }, //F9子菜单E1
 110                  { TWO_MENU_F9_E2, TWO_MENU_F9_E1, TWO_MENU_F9_E1, 0, ONE_MENU_F9, (*fun45) }, //F9子菜单E2
 111          
 112                  { TWO_MENU_FA_SET, TWO_MENU_FA_SET, TWO_MENU_FA_SET, 0, ONE_MENU_FA, (*fun46) }, //FA子菜单
 113                  { TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, 0, ONE_MENU_Fb, (*fun47) }, //Fb子菜单
 114                  { TWO_MENU_FC_SET, TWO_MENU_FC_SET, TWO_MENU_FC_SET, 0, ONE_MENU_FC, (*fun48) }, //FC子菜单
 115                  { TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, 0, ONE_MENU_Fd, (*fun49) }, //Fd子菜单
 116          
 117                  { TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1, (*fun50) },
             - //F1_E1注册呼叫器
 118                  { TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1, (*fun51) },
             - //F1_E1注册呼叫器
 119                  { TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1, (*fun52) },
             - //F1_E1注册呼叫器
 120                  { TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1, (*fun53) },
             - //F1_E1注册呼叫器
 121          
 122                  { TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2, (*fun54) },
             - //F1_E2注册管理器
 123                  { TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2, (*fun55) },
             - //F1_E2注册管理器
 124                  { TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2, (*fun56) },
             - //F1_E2注册管理器
 125                  { TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2, (*fun57) },
             - //F1_E2注册管理器
 126          
 127                  { TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3, (*fun58) },
             - //F1_E3注册报警器
 128                  { TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3, (*fun59) },
             - //F1_E3注册报警器
 129                  { TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3, (*fun60) },
             - //F1_E3注册报警器
 130                  { TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3, (*fun61) },
             - //F1_E3注册报警器
 131          
 132                  { TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4, (*fun62) },
             - //F1_E3注册取消器
 133                  { TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4, (*fun63) },
             - //F1_E3注册取消器
 134                  { TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4, (*fun64) },
             - //F1_E3注册取消器
 135                  { TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4, (*fun65) },
             - //F1_E3注册取消器
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 4   

 136          
 137                  { TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1, (*fun66) },
             - //F2_E1删除呼叫器
 138                  { TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1, (*fun67) },
             - //F2_E1删除呼叫器
 139                  { TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1, (*fun68) },
             - //F2_E1删除呼叫器
 140                  { TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1, (*fun69) },
             - //F2_E1删除呼叫器
 141          
 142                  { TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2, (*fun70) },
             - //F2_E2删除管理器
 143                  { TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2, (*fun71) },
             - //F2_E2删除管理器
 144                  { TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2, (*fun72) },
             - //F2_E2删除管理器
 145                  { TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2, (*fun73) },
             - //F2_E2删除管理器
 146          
 147                  { TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3, (*fun74) },
             - //F2_E3删除报警器
 148                  { TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3, (*fun75) },
             - //F2_E3删除报警器
 149                  { TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3, (*fun76) },
             - //F2_E3删除报警器
 150                  { TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3, (*fun77) },
             - //F2_E3删除报警器
 151          
 152                  { TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4, (*fun78) },
             - //F2_E4删除取消器
 153                  { TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4, (*fun79) },
             - //F2_E4删除取消器
 154                  { TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4, (*fun80) },
             - //F2_E4删除取消器
 155                  { TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4, (*fun81) },
             - //F2_E4删除取消器
 156          
 157                  { TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1, (*fun82
             -) }, //F3_E1设置排队显示或者循环显示
 158                  { TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2, (*fun83
             -) }, //F3_E2设置队列个数
 159          
 160                  { TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1, (*fun84
             -) }, //F6_E1语音选择
 161                  { TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2, (*fun85
             -) }, //F6_E2语音报读次数
 162                  { TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3, (*fun86
             -) }, //F6_E3循环时候是否报读
 163                  { TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4, (*fun87
             -) }, //F6_E4音量大小调整
 164                  { TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5, (*fun88
             -) }, //F6_E5屏幕亮度调整
 165          
 166                  { TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1, (*fun89
             -) }, //F7_E1 999*9
 167                  { TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2, (*fun90
             -) }, //F7_E2 9999*9
 168                  { TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3, (*fun91
             -) }, //F7_E3 999*99
 169                  { TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4, (*fun92
             -) }, //F7_E4 9999*99
 170          
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 5   

 171                  { TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1, (*fun93
             -) }, //F8_E1 单键位跟多键位切换
 172                  { TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2, (*fun94
             -) }, //F8_E2 键位设置
 173          
 174                  { DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, (*fun95)},
 175          
 176                  { TWO_MENU_F6_E6, TWO_MENU_F6_E7, TWO_MENU_F6_E5, TWO_MENU_F6_E6_SET, ONE_MENU_F6, (*fun96) },
 177                  { TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6, (*fun97
             -) },
 178                  { TWO_MENU_F6_E7, TWO_MENU_F6_E1, TWO_MENU_F6_E6, TWO_MENU_F6_E7_SET, ONE_MENU_F6, (*fun98) },
 179                  { TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7, (*fun99
             -) },
 180          };
 181          
 182          unsigned int KeyScan(void)  //Keyboard scan function
 183          {
 184   1              unsigned int Val = 0;
 185   1              HKeyPort |= 0x3C;//Row height
 186   1              if ((HKeyPort & 0x3C) != 0x3C)//Press button
 187   1              {
 188   2                      delay10ms();  //Remove jitter
 189   2                      if ((HKeyPort & 0x3C) != 0x3C)   //Press button
 190   2                      {
 191   3                              clear_return_standby_time();
 192   3                                      
 193   3                                      Val = HKeyPort & 0x3C;
 194   3                                      if (Val == 0x0038)
 195   3                                      {
 196   4                                              clear_main_press_time();        //清除菜单键按下的时间计算变量
 197   4                                              set_main_press_time_table(1); //设置相应的标志位，开始计算时间
 198   4                                      }
 199   3                                      while ((HKeyPort & 0x3C) != 0x3C);
 200   3                                      delay10ms();
 201   3                                      while ((HKeyPort & 0x3C) != 0x3C);
 202   3                                      set_main_press_time_table(0);//按键释放，清除相应的标志位
 203   3                                      set_logout_cycle_table(0);//循环跟销号重新计数
 204   3                                      if (func_index != TWO_MENU_F8_E2_SET && ((return_Two_Menu_F6_E6()) ? func_index > ONE_MENU_Fd : 1))
 205   3                                      {
 206   4                                              GD5800_select_chapter_new(DI);
 207   4                                      }
 208   3                                      sound_table = 1;
 209   3                                      return Val;
 210   3                      }
 211   2              }
 212   1              
 213   1              return 0x0fff;
 214   1      }
 215          
 216          unsigned char KeyDecoder(void)
 217          {
 218   1              unsigned int key_val = 0;
 219   1              unsigned char register_manager_temp = 0;
 220   1              key_val = KeyScan();
 221   1              register_manager_temp = return_register_manager();
 222   1              if (key_val == 0x0fff) /*do not key press*/
 223   1              {
 224   2                      /*sjz 有注册管理器标志*/
 225   2                      if (register_manager_temp == 1)
 226   2                      {
 227   3                              
 228   3                              if (func_index == MENU_STANDBY || func_index == ONE_MENU_FA || func_index == ONE_MENU_Fb || func_index 
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 6   

             -== ONE_MENU_FC || func_index == ONE_MENU_Fd || func_index == TWO_MENU_F9_E2 || func_index == TWO_MENU_F9_E1)
 229   3                              {
 230   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)accumulate_decoder);
 231   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)old2_RF_RECE_REG[2] & 0x0f);
 232   4                                      if ((old2_RF_RECE_REG[2] & 0x0f) == 0x08)
 233   4                                      {
 234   5                                              accumulate_decoder++;
 235   5                                      }
 236   4                                      else
 237   4                                      {
 238   5                                              accumulate_decoder = 0;
 239   5                                      }
 240   4                                      if (accumulate_decoder>3)
 241   4                                      {
 242   5                                              set_main_press_time(20);
 243   5                                              accumulate_decoder = 0;
 244   5                                      }
 245   4                              }
 246   3                              clear_register_manager();
 247   3      
 248   3                              switch (old2_RF_RECE_REG[2] & 0x0f)
 249   3                              {
 250   4                              case 0x01:
 251   4                                      if (return_filter_other() == 0)
 252   4                                      {
 253   5                                              key_val = 0x001c;
 254   5                                              set_filter_other(5);
 255   5                                      }
 256   4                                       break;
 257   4                              case 0x02:
 258   4                                      if (return_filter_other() == 0)
 259   4                                      {
 260   5                                              key_val = 0x0034;
 261   5                                              set_filter_other(5);
 262   5                                      }
 263   4                                       break;
 264   4                              case 0x04:
 265   4                                      if (return_filter_other() == 0)
 266   4                                      {
 267   5                                              key_val = 0x002c;
 268   5                                              set_filter_other(5);
 269   5                                      }
 270   4                                       break;
 271   4                              case 0x08:
 272   4                                      if (return_filter_main() == 0 && return_filter_other() == 0)
 273   4                                      {
 274   5                                              key_val = 0x0038;
 275   5                                              set_filter_other(5);
 276   5                                      }
 277   4                                      break;
 278   4                              default:break;
 279   4                              }
 280   3                      }
 281   2              }
 282   1       
 283   1      
 284   1      #ifdef DEBUG
                      if (key_val != 0x0fff)
                      uart_printf("key_val is %x .\r\n", key_val); //测试按键键值
              #endif
 288   1              switch (key_val)
 289   1              {
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 7   

 290   2              case 0x001c:return KEY_RETURN; break;//1 按下相应的键显示相对应的码值
 291   2              case 0x0034:return KEY_DOWN; break;//2  
 292   2              case 0x002c:return KEY_UP; break;//4
 293   2              case 0x0038:return KEY_FUNC; break;//5 按下相应的键显示相对应的码值
 294   2              default:return 0xff; break;
 295   2              }
 296   1      }
 297          
 298          void KeyProcess(void)
 299          {
 300   1              unsigned char key_value = 0, main_press_time_temp = 0;
 301   1              key_value = KeyDecoder();
 302   1              switch (key_value)
 303   1              {
 304   2                      case KEY_FUNC:
 305   2                              if ((return_Two_Menu_Fb_E1() == 0 && func_index == MENU_STANDBY) || (return_Two_Menu_Fb_E1() == 1&&( fu
             -nc_index == MENU_STANDBY || func_index == DECODER_MENU) ) )  //如果索引==0  则要1秒以上进入菜单
 306   2                              {
 307   3                                      main_press_time_temp = return_main_press_time();
 308   3                                      if (main_press_time_temp >= 20)
 309   3                                      {
 310   4                                              func_index = ONE_MENU_F1;
 311   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 312   4                                              clear_main_press_time();
 313   4                                      }
 314   3                              }
 315   2                              else if (func_index == TWO_MENU_F2_E1_D1 || func_index == TWO_MENU_F2_E1_D2 || func_index == TWO_MENU_F
             -2_E1_D3 || func_index == TWO_MENU_F2_E1_D4 )
 316   2                              {
 317   3                                      main_press_time_temp = return_main_press_time();
 318   3                                      if (main_press_time_temp >= 10)
 319   3                                      {
 320   4                                              if (!delete_call_function(Two_Menu_F2_E1))
 321   4                                              {
 322   5                                                      if (return_sound_table() == 1)
 323   5                                                      {
 324   6                                                              GD5800_select_chapter(CHENGGONG);
 325   6      
 326   6                                                              set_sound_table(0);
 327   6                                                      }
 328   5                                              }
 329   4                                              delay10ms();
 330   4                                              clear_main_press_time();
 331   4                                      }
 332   3                                      else
 333   3                                              func_index = table[func_index].enter;
 334   3                              }
 335   2                              else if (func_index == TWO_MENU_F2_E2_D1 || func_index == TWO_MENU_F2_E2_D2 || func_index == TWO_MENU_F
             -2_E2_D3 || func_index == TWO_MENU_F2_E2_D4)
 336   2                              {
 337   3                                      main_press_time_temp = return_main_press_time();
 338   3                                      if ( main_press_time_temp >= 10)
 339   3                                      {
 340   4                                              if (!delete_host_function(Two_Menu_F2_E2))
 341   4                                              {
 342   5                                                      if (return_sound_table() == 1)
 343   5                                                      {
 344   6                                                              GD5800_select_chapter(CHENGGONG);
 345   6      
 346   6                                                              set_sound_table(0);
 347   6                                                      }
 348   5                                              }
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 8   

 349   4                                              delay10ms();
 350   4                                              clear_main_press_time();
 351   4                                      }
 352   3                                      else
 353   3                                              func_index = table[func_index].enter;
 354   3                              }
 355   2                              else if (func_index == TWO_MENU_F2_E3_D1 || func_index == TWO_MENU_F2_E3_D2 || func_index == TWO_MENU_F
             -2_E3_D3 || func_index == TWO_MENU_F2_E3_D4)
 356   2                              {
 357   3                                      main_press_time_temp = return_main_press_time();
 358   3                                      if (main_press_time_temp >= 10)
 359   3                                      {
 360   4                                              if (!delete_alarm_function(Two_Menu_F2_E3))
 361   4                                              {
 362   5                                                      if (return_sound_table() == 1)
 363   5                                                      {
 364   6                                                              GD5800_select_chapter(CHENGGONG);
 365   6      
 366   6                                                              set_sound_table(0);
 367   6                                                      }
 368   5                                              }
 369   4                                              delay10ms();
 370   4                                              clear_main_press_time();
 371   4                                      }
 372   3                                      else
 373   3                                              func_index = table[func_index].enter;
 374   3                              }
 375   2                              else if (func_index == TWO_MENU_F2_E4_D1 || func_index == TWO_MENU_F2_E4_D2 || func_index == TWO_MENU_F
             -2_E4_D3 || func_index == TWO_MENU_F2_E4_D4)
 376   2                              {
 377   3                                      main_press_time_temp = return_main_press_time();
 378   3                                      if (main_press_time_temp >= 10)
 379   3                                      {
 380   4                                              if (!delete_cancel_function(Two_Menu_F2_E4))
 381   4                                              {
 382   5                                                      if (return_sound_table() == 1)
 383   5                                                      {
 384   6                                                              GD5800_select_chapter(CHENGGONG);
 385   6      
 386   6                                                              set_sound_table(0);
 387   6                                                      }
 388   5                                              }
 389   4                                              delay10ms();
 390   4                                              clear_main_press_time();                        
 391   4                                      }
 392   3                                      else
 393   3                                              func_index = table[func_index].enter;
 394   3                              }
 395   2                              else if (func_index == ONE_MENU_FA)  //如果索引==FA  则要1秒以上进入菜单
 396   2                              {
 397   3                                      main_press_time_temp = return_main_press_time();
 398   3                                      if (main_press_time_temp >= 20)
 399   3                                      {
 400   4                                              func_index = TWO_MENU_FA_SET;
 401   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 402   4                                              clear_main_press_time();
 403   4                                      }
 404   3                              }
 405   2                              else if (func_index == ONE_MENU_Fb)  //如果索引==FA  则要1秒以上进入菜单
 406   2                              {
 407   3                                      main_press_time_temp = return_main_press_time();
 408   3                                      if (main_press_time_temp >= 20)
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 9   

 409   3                                      {
 410   4                                              func_index = TWO_MENU_Fb_SET;
 411   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 412   4                                              clear_main_press_time();
 413   4                                      }
 414   3                              }
 415   2                              else if (func_index == ONE_MENU_FC)  //如果索引==FA  则要1秒以上进入菜单
 416   2                              {
 417   3                                      main_press_time_temp = return_main_press_time();
 418   3                                      if (main_press_time_temp >= 20)
 419   3                                      {
 420   4                                              func_index = TWO_MENU_FC_SET;
 421   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 422   4                                              clear_main_press_time();
 423   4                                      }
 424   3                              }
 425   2                              else if (func_index == ONE_MENU_Fd)  //如果索引==FA  则要1秒以上进入菜单
 426   2                              {
 427   3                                      main_press_time_temp = return_main_press_time();
 428   3                                      if (main_press_time_temp >= 20)
 429   3                                      {
 430   4                                              func_index = TWO_MENU_Fd_SET;
 431   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 432   4                                              clear_main_press_time();
 433   4                                      }
 434   3                              }
 435   2                              else if (func_index == TWO_MENU_F9_E2)  //如果索引==FA  则要1秒以上进入菜单
 436   2                              {
 437   3                                      main_press_time_temp = return_main_press_time();
 438   3                                      if (main_press_time_temp >= 20)
 439   3                                      {
 440   4                                              GD5800_select_chapter(CHENGGONG);
 441   4                                              var_init();
 442   4                                              env_load();
 443   4                                              IAP_CONTR = 0X20;
 444   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 445   4                                              clear_main_press_time();
 446   4                                      }
 447   3                              }
 448   2                              else if (func_index == TWO_MENU_F9_E1)  //如果索引==FA  则要1秒以上进入菜单
 449   2                              {
 450   3                                      main_press_time_temp = return_main_press_time();
 451   3                                      if (main_press_time_temp >= 20)
 452   3                                      {
 453   4                                              GD5800_select_chapter(CHENGGONG);
 454   4                                              var_init();
 455   4                                              key_init();
 456   4                                              env_load();
 457   4                                              ISendStr(I2C_ADDRESS, SIN_KEY, single_key, 16);
 458   4                                              delay10ms();
 459   4                                              ISendStr(I2C_ADDRESS, MUL_KEY, multiple_key, 16);
 460   4                                              delay10ms();
 461   4                                              Delete_all_data();
 462   4                                              delay10ms();
 463   4                                              IAP_CONTR = 0X20;
 464   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 465   4                                              clear_main_press_time();
 466   4                                      }
 467   3                              }
 468   2                              else
 469   2                              {
 470   3                                      func_index = table[func_index].enter;
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 10  

 471   3                                      clear_main_press_time();
 472   3                              }
 473   2                               break;
 474   2                      case KEY_RETURN:        
 475   2                              if (func_index == DECODER_MENU  && return_Two_Menu_Fb_E1() )
 476   2                              {
 477   3                                      Logout();
 478   3                              }
 479   2                              else
 480   2                              func_index = table[func_index].esc; 
 481   2                              break;
 482   2                      case KEY_UP:
 483   2                              switch (func_index)
 484   2                              {
 485   3                              case TWO_MENU_F0_YEAR: 
 486   3                                      if (time_buf1[1] == 99) time_buf1[1] = 0;       //设置万年历 年
 487   3                                                                         else time_buf1[1]++;
 488   3                                      break;
 489   3                              case TWO_MENU_F0_MOUTH:
 490   3                                      if (time_buf1[2] == 12) time_buf1[2] = 1;       //设置万年历 月
 491   3                                      else time_buf1[2]++;
 492   3                                      break;
 493   3                              case TWO_MENU_F0_DAY:
 494   3                                      if (time_buf1[3] == 31) time_buf1[3] = 1;       //设置万年历 日
 495   3                                      else time_buf1[3]++;
 496   3                                      break;
 497   3                              case TWO_MENU_F0_WEEK:
 498   3                                      if (time_buf1[7] == 7) time_buf1[7] = 1;        //设置万年历 星期
 499   3                                      else time_buf1[7]++;
 500   3                                      break;
 501   3                              case TWO_MENU_F0_HOUR:
 502   3                                      if (time_buf1[4] == 23) time_buf1[4] = 0;       //设置万年历 小时
 503   3                                      else time_buf1[4]++;
 504   3                                      break;
 505   3                              case TWO_MENU_F0_MINUTE:
 506   3                                      if (time_buf1[5] == 59) time_buf1[5] = 0;       //设置万年历 分钟
 507   3                                      else time_buf1[5]++;
 508   3                                      break;
 509   3                              case TWO_MENU_F1_E1_D1:
 510   3                                      if (Two_Menu_F1_E1[0] == 20 ) Two_Menu_F1_E1[0] = 0;    //设置F1_E1千位
 511   3                                      else Two_Menu_F1_E1[0]++;
 512   3                                      break;
 513   3                              case TWO_MENU_F1_E1_D2:
 514   3                                      if (Two_Menu_F1_E1[1] == 9) Two_Menu_F1_E1[1] = 0;      //设置F1_E1百位
 515   3                                      else Two_Menu_F1_E1[1]++;
 516   3                                      break;
 517   3                              case TWO_MENU_F1_E1_D3:
 518   3                                      if (Two_Menu_F1_E1[2] == 9) Two_Menu_F1_E1[2] = 0;      //设置F1_E1十位
 519   3                                      else Two_Menu_F1_E1[2]++;
 520   3                                      break;
 521   3                              case TWO_MENU_F1_E1_D4:
 522   3                                      if (Two_Menu_F1_E1[3] == 9) Two_Menu_F1_E1[3] = 0;      //设置F1_E1个位
 523   3                                      else Two_Menu_F1_E1[3]++;
 524   3                                      break;
 525   3                              case TWO_MENU_F1_E2_D1:
 526   3                                      if (Two_Menu_F1_E2[0] == 20) Two_Menu_F1_E2[0] = 0;     //设置F1_E2千位
 527   3                                      else Two_Menu_F1_E2[0]++;
 528   3                                      break;
 529   3                              case TWO_MENU_F1_E2_D2:
 530   3                                      if (Two_Menu_F1_E2[1] == 9) Two_Menu_F1_E2[1] = 0;      //设置F1_E2百位
 531   3                                      else Two_Menu_F1_E2[1]++;
 532   3                                      break;
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 11  

 533   3                              case TWO_MENU_F1_E2_D3:
 534   3                                      if (Two_Menu_F1_E2[2] == 9) Two_Menu_F1_E2[2] = 0;      //设置F1_E2十位
 535   3                                      else Two_Menu_F1_E2[2]++;
 536   3                                      break;
 537   3                              case TWO_MENU_F1_E2_D4:
 538   3                                      if (Two_Menu_F1_E2[3] == 9) Two_Menu_F1_E2[3] = 0;      //设置F1_E2个位
 539   3                                      else Two_Menu_F1_E2[3]++;
 540   3                                      break;
 541   3                              case TWO_MENU_F1_E3_D1:
 542   3                                      if (Two_Menu_F1_E3[0] == 20) Two_Menu_F1_E3[0] = 0;     //设置F1_E3千位
 543   3                                      else Two_Menu_F1_E3[0]++;
 544   3                                      break;
 545   3                              case TWO_MENU_F1_E3_D2:
 546   3                                      if (Two_Menu_F1_E3[1] == 9) Two_Menu_F1_E3[1] = 0;      //设置F1_E3百位
 547   3                                      else Two_Menu_F1_E3[1]++;
 548   3                                      break;
 549   3                              case TWO_MENU_F1_E3_D3:
 550   3                                      if (Two_Menu_F1_E3[2] == 9) Two_Menu_F1_E3[2] = 0;      //设置F1_E3十位
 551   3                                      else Two_Menu_F1_E3[2]++;
 552   3                                      break;
 553   3                              case TWO_MENU_F1_E3_D4:
 554   3                                      if (Two_Menu_F1_E3[3] == 9) Two_Menu_F1_E3[3] = 0;      //设置F1_E3个位
 555   3                                      else Two_Menu_F1_E3[3]++;
 556   3                                      break;
 557   3                              case TWO_MENU_F1_E4_D1:
 558   3                                      if (Two_Menu_F1_E4[0] == 20) Two_Menu_F1_E4[0] = 0;     //设置F1_E4千位
 559   3                                      else Two_Menu_F1_E4[0]++;
 560   3                                      break;
 561   3                              case TWO_MENU_F1_E4_D2:
 562   3                                      if (Two_Menu_F1_E4[1] == 9) Two_Menu_F1_E4[1] = 0;      //设置F1_E4百位
 563   3                                      else Two_Menu_F1_E4[1]++;
 564   3                                      break;
 565   3                              case TWO_MENU_F1_E4_D3:
 566   3                                      if (Two_Menu_F1_E4[2] == 9) Two_Menu_F1_E4[2] = 0;      //设置F1_E4十位
 567   3                                      else Two_Menu_F1_E4[2]++;
 568   3                                      break;
 569   3                              case TWO_MENU_F1_E4_D4:
 570   3                                      if (Two_Menu_F1_E4[3] == 9) Two_Menu_F1_E4[3] = 0;      //设置F1_E4个位
 571   3                                      else Two_Menu_F1_E4[3]++;
 572   3                                      break;
 573   3                              case TWO_MENU_F2_E1_D1:
 574   3                                      if (Two_Menu_F2_E1[0] == 20) Two_Menu_F2_E1[0] = 0;     //设置F2_E1千位
 575   3                                      else Two_Menu_F2_E1[0]++;
 576   3                                      break;
 577   3                              case TWO_MENU_F2_E1_D2:
 578   3                                      if (Two_Menu_F2_E1[1] == 9) Two_Menu_F2_E1[1] = 0;      //设置F2_E1百位
 579   3                                      else Two_Menu_F2_E1[1]++;
 580   3                                      break;
 581   3                              case TWO_MENU_F2_E1_D3:
 582   3                                      if (Two_Menu_F2_E1[2] == 9) Two_Menu_F2_E1[2] = 0;      //设置F2_E1十位
 583   3                                      else Two_Menu_F2_E1[2]++;
 584   3                                      break;
 585   3                              case TWO_MENU_F2_E1_D4:
 586   3                                      if (Two_Menu_F2_E1[3] == 9) Two_Menu_F2_E1[3] = 0;      //设置F2_E1个位
 587   3                                      else Two_Menu_F2_E1[3]++;
 588   3                                      break;
 589   3                              case TWO_MENU_F2_E2_D1:
 590   3                                      if (Two_Menu_F2_E2[0] == 20) Two_Menu_F2_E2[0] = 0;     //设置F2_E2千位
 591   3                                      else Two_Menu_F2_E2[0]++;
 592   3                                      break;
 593   3                              case TWO_MENU_F2_E2_D2:
 594   3                                      if (Two_Menu_F2_E2[1] == 9) Two_Menu_F2_E2[1] = 0;      //设置F2_E2百位
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 12  

 595   3                                      else Two_Menu_F2_E2[1]++;
 596   3                                      break;
 597   3                              case TWO_MENU_F2_E2_D3:
 598   3                                      if (Two_Menu_F2_E2[2] == 9) Two_Menu_F2_E2[2] = 0;      //设置F2_E2十位
 599   3                                      else Two_Menu_F2_E2[2]++;
 600   3                                      break;
 601   3                              case TWO_MENU_F2_E2_D4:
 602   3                                      if (Two_Menu_F2_E2[3] == 9) Two_Menu_F2_E2[3] = 0;      //设置F2_E2个位
 603   3                                      else Two_Menu_F2_E2[3]++;
 604   3                                      break;
 605   3                              case TWO_MENU_F2_E3_D1:
 606   3                                      if (Two_Menu_F2_E3[0] == 20) Two_Menu_F2_E3[0] = 0;     //设置F2_E3千位
 607   3                                      else Two_Menu_F2_E3[0]++;
 608   3                                      break;
 609   3                              case TWO_MENU_F2_E3_D2:
 610   3                                      if (Two_Menu_F2_E3[1] == 9) Two_Menu_F2_E3[1] = 0;      //设置F2_E3百位
 611   3                                      else Two_Menu_F2_E3[1]++;
 612   3                                      break;
 613   3                              case TWO_MENU_F2_E3_D3:
 614   3                                      if (Two_Menu_F2_E3[2] == 9) Two_Menu_F2_E3[2] = 0;      //设置F2_E3十位
 615   3                                      else Two_Menu_F2_E3[2]++;
 616   3                                      break;
 617   3                              case TWO_MENU_F2_E3_D4:
 618   3                                      if (Two_Menu_F2_E3[3] == 9) Two_Menu_F2_E3[3] = 0;      //设置F2_E3个位
 619   3                                      else Two_Menu_F2_E3[3]++;
 620   3                                      break;
 621   3                              case TWO_MENU_F2_E4_D1:
 622   3                                      if (Two_Menu_F2_E4[0] == 20) Two_Menu_F2_E4[0] = 0;     //设置F2_E4千位
 623   3                                      else Two_Menu_F2_E4[0]++;
 624   3                                      break;
 625   3                              case TWO_MENU_F2_E4_D2:
 626   3                                      if (Two_Menu_F2_E4[1] == 9) Two_Menu_F2_E4[1] = 0;      //设置F2_E4百位
 627   3                                      else Two_Menu_F2_E4[1]++;
 628   3                                      break;
 629   3                              case TWO_MENU_F2_E4_D3:
 630   3                                      if (Two_Menu_F2_E4[2] == 9) Two_Menu_F2_E4[2] = 0;      //设置F2_E4十位
 631   3                                      else Two_Menu_F2_E4[2]++;
 632   3                                      break;
 633   3                              case TWO_MENU_F2_E4_D4:
 634   3                                      if (Two_Menu_F2_E4[3] == 9) Two_Menu_F2_E4[3] = 0;      //设置F2_E4个位
 635   3                                      else Two_Menu_F2_E4[3]++;
 636   3                              case TWO_MENU_F3_E1_SET:
 637   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 638   3                                      else Two_Menu_F3_E1 = 1;
 639   3                                      break;
 640   3                              case TWO_MENU_F3_E2_SET:
 641   3                                      if (Two_Menu_F3_E2 == 99) Two_Menu_F3_E2 = 1;   //存储队列个数
 642   3                                      else Two_Menu_F3_E2 ++;
 643   3                                      break;
 644   3                              case TWO_MENU_F4_SET:
 645   3                                      if (Two_Menu_F4_E1 == 99) Two_Menu_F4_E1 = 0;   //销号时间设置
 646   3                                      else Two_Menu_F4_E1++;
 647   3                                      break;
 648   3                              case TWO_MENU_F5_SET:
 649   3                                      if (Two_Menu_F5_E1 == 99) Two_Menu_F5_E1 = 0;   //循环时间设置
 650   3                                      else Two_Menu_F5_E1++;
 651   3                                      break;
 652   3                              case TWO_MENU_F6_E1_SET:
 653   3                                      if (Two_Menu_F6_E1 == 7) Two_Menu_F6_E1 = 0;    //F6_E1语音选择
 654   3                                      else Two_Menu_F6_E1++;
 655   3                                      break;
 656   3                              case TWO_MENU_F6_E2_SET:
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 13  

 657   3                                      if (Two_Menu_F6_E2 == 9) Two_Menu_F6_E2 = 1;    //F6_E2语音报读次数
 658   3                                      else Two_Menu_F6_E2++;
 659   3                                      break;
 660   3                              case TWO_MENU_F6_E3_SET:
 661   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 662   3                                      else Two_Menu_F6_E3 = 0;
 663   3                                      break;
 664   3                              case TWO_MENU_F6_E4_SET:
 665   3                                      if (Two_Menu_F6_E4 == 9) Two_Menu_F6_E4 = 0;    //F6_E4音量大小调整
 666   3                                      else Two_Menu_F6_E4++;
 667   3                                      break;
 668   3                              case TWO_MENU_F6_E5_SET:
 669   3                                      if (Two_Menu_F6_E5 == 7) Two_Menu_F6_E5 = 0;    //F6_E5屏幕亮度调整
 670   3                                      else Two_Menu_F6_E5++;
 671   3                                      break;
 672   3                              case TWO_MENU_F7_E1_SET:
 673   3                                      if (Two_Menu_F7_E1 == 10) Two_Menu_F7_E1 = 0;   //F7_E1原始规则 999*9
 674   3                                      else Two_Menu_F7_E1++;
 675   3                                      break;
 676   3                              case TWO_MENU_F7_E2_SET:
 677   3                                      if (Two_Menu_F7_E2 == 11) Two_Menu_F7_E2 = 0;   //F7_E2附加规则 9999*9
 678   3                                      else Two_Menu_F7_E2++;
 679   3                                      break;
 680   3                              case TWO_MENU_F7_E3_SET:
 681   3                                      if (Two_Menu_F7_E3 == 11) Two_Menu_F7_E3 = 0;   //F7_E3附加规则 999*99
 682   3                                      else Two_Menu_F7_E3++;
 683   3                                      break;
 684   3                              case TWO_MENU_F7_E4_SET:
 685   3                                      if (Two_Menu_F7_E4 == 11) Two_Menu_F7_E4 = 0;   //F7_E3附加规则 9999*99
 686   3                                      else Two_Menu_F7_E4++;
 687   3                                      break;
 688   3                              case TWO_MENU_F8_E1_SET:
 689   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 690   3                                      else Two_Menu_F8_E1 = 1 ;
 691   3                                      break;
 692   3                              case TWO_MENU_F8_E2_SET:
 693   3                                      if (Two_Menu_F8_E2 == 38) Two_Menu_F8_E2 = 0;   //F8_E2键位设置
 694   3                                      else Two_Menu_F8_E2++;
 695   3                                      break;
 696   3                              case DECODER_MENU:
 697   3                                      CycleUp();
 698   3                                      break;
 699   3                              case TWO_MENU_FC_SET:
 700   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 701   3                                      else Two_Menu_FC_E1 = 1;
 702   3                                      break;
 703   3                              case TWO_MENU_Fb_SET:
 704   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 705   3                                      else Two_Menu_Fb_E1 = 1;
 706   3                                      break;
 707   3                              case TWO_MENU_F6_E6_SET:
 708   3                                      if (Two_Menu_F6_E6 == 1) Two_Menu_F6_E6 = 0;    
 709   3                                      else Two_Menu_F6_E6 = 1;
 710   3                                      break;
 711   3                              case TWO_MENU_F6_E7_SET:
 712   3                                      if (Two_Menu_F6_E7 == 1) Two_Menu_F6_E7 = 0;
 713   3                                      else Two_Menu_F6_E7 = 1;
 714   3                                      break;
 715   3      
 716   3                                      default:break;
 717   3                              }       
 718   2                              func_index = table[func_index].up; break;
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 14  

 719   2                      case KEY_DOWN:
 720   2                              switch (func_index)
 721   2                              {
 722   3                              case TWO_MENU_F0_YEAR:
 723   3                                      if (time_buf1[1] == 0) time_buf1[1] = 99;       //设置万年历 年
 724   3                                      else time_buf1[1]--;
 725   3                                      break;
 726   3                              case TWO_MENU_F0_MOUTH:
 727   3                                      if (time_buf1[2] == 1) time_buf1[2] = 12;       //设置万年历 月
 728   3                                      else time_buf1[2]--;
 729   3                                      break;
 730   3                              case TWO_MENU_F0_DAY:
 731   3                                      if (time_buf1[3] == 1) time_buf1[3] = 31;       //设置万年历 日
 732   3                                      else time_buf1[3]--;
 733   3                                      break;
 734   3                              case TWO_MENU_F0_WEEK:
 735   3                                      if (time_buf1[7] == 1) time_buf1[7] = 7;        //设置万年历 星期
 736   3                                      else time_buf1[7]--;
 737   3                                      break;
 738   3                              case TWO_MENU_F0_HOUR:
 739   3                                      if (time_buf1[4] == 0) time_buf1[4] = 23;       //设置万年历 小时
 740   3                                      else time_buf1[4]--;
 741   3                                      break;
 742   3                              case TWO_MENU_F0_MINUTE:
 743   3                                      if (time_buf1[5] == 0) time_buf1[5] = 59;       //设置万年历 分钟
 744   3                                      else time_buf1[5]--;
 745   3                                      break;
 746   3                              case TWO_MENU_F1_E1_D1:
 747   3                                      if (Two_Menu_F1_E1[0] == 0) Two_Menu_F1_E1[0] = 20;     //设置F1_E1千位
 748   3                                      else Two_Menu_F1_E1[0]--;
 749   3                                      break;
 750   3                              case TWO_MENU_F1_E1_D2:
 751   3                                      if (Two_Menu_F1_E1[1] == 0) Two_Menu_F1_E1[1] = 9;      //设置F1_E1百位
 752   3                                      else Two_Menu_F1_E1[1]--;
 753   3                                      break;
 754   3                              case TWO_MENU_F1_E1_D3:
 755   3                                      if (Two_Menu_F1_E1[2] == 0) Two_Menu_F1_E1[2] = 9;      //设置F1_E1十位
 756   3                                      else Two_Menu_F1_E1[2]--;
 757   3                                      break;
 758   3                              case TWO_MENU_F1_E1_D4:
 759   3                                      if (Two_Menu_F1_E1[3] == 0) Two_Menu_F1_E1[3] = 9;      //设置F1_E1个位
 760   3                                      else Two_Menu_F1_E1[3]--;
 761   3                                      break;
 762   3                              case TWO_MENU_F1_E2_D1:
 763   3                                      if (Two_Menu_F1_E2[0] == 0) Two_Menu_F1_E2[0] = 20;     //设置F1_E2千位
 764   3                                      else Two_Menu_F1_E2[0]--;
 765   3                                      break;
 766   3                              case TWO_MENU_F1_E2_D2:
 767   3                                      if (Two_Menu_F1_E2[1] == 0) Two_Menu_F1_E2[1] = 9;      //设置F1_E2百位
 768   3                                      else Two_Menu_F1_E2[1]--;
 769   3                                      break;
 770   3                              case TWO_MENU_F1_E2_D3:
 771   3                                      if (Two_Menu_F1_E2[2] == 0) Two_Menu_F1_E2[2] = 9;      //设置F1_E2十位
 772   3                                      else Two_Menu_F1_E2[2]--;
 773   3                                      break;
 774   3                              case TWO_MENU_F1_E2_D4:
 775   3                                      if (Two_Menu_F1_E2[3] == 0) Two_Menu_F1_E2[3] = 9;      //设置F1_E2个位
 776   3                                      else Two_Menu_F1_E2[3]--;
 777   3                                      break;
 778   3                              case TWO_MENU_F1_E3_D1:
 779   3                                      if (Two_Menu_F1_E3[0] == 0) Two_Menu_F1_E3[0] = 20;     //设置F1_E3千位
 780   3                                      else Two_Menu_F1_E3[0]--;
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 15  

 781   3                                      break;
 782   3                              case TWO_MENU_F1_E3_D2:
 783   3                                      if (Two_Menu_F1_E3[1] == 0) Two_Menu_F1_E3[1] = 9;      //设置F1_E3百位
 784   3                                      else Two_Menu_F1_E3[1]--;
 785   3                                      break;
 786   3                              case TWO_MENU_F1_E3_D3:
 787   3                                      if (Two_Menu_F1_E3[2] == 0) Two_Menu_F1_E3[2] = 9;      //设置F1_E3十位
 788   3                                      else Two_Menu_F1_E3[2]--;
 789   3                                      break;
 790   3                              case TWO_MENU_F1_E3_D4:
 791   3                                      if (Two_Menu_F1_E3[3] == 0) Two_Menu_F1_E3[3] = 9;      //设置F1_E3个位
 792   3                                      else Two_Menu_F1_E3[3]--;
 793   3                                      break;
 794   3                              case TWO_MENU_F1_E4_D1:
 795   3                                      if (Two_Menu_F1_E4[0] == 0) Two_Menu_F1_E4[0] = 20;     //设置F1_E4千位
 796   3                                      else Two_Menu_F1_E4[0]--;
 797   3                                      break;
 798   3                              case TWO_MENU_F1_E4_D2:
 799   3                                      if (Two_Menu_F1_E4[1] == 0) Two_Menu_F1_E4[1] = 9;      //设置F1_E4百位
 800   3                                      else Two_Menu_F1_E4[1]--;
 801   3                                      break;
 802   3                              case TWO_MENU_F1_E4_D3:
 803   3                                      if (Two_Menu_F1_E4[2] == 0) Two_Menu_F1_E4[2] = 9;      //设置F1_E4十位
 804   3                                      else Two_Menu_F1_E4[2]--;
 805   3                                      break;
 806   3                              case TWO_MENU_F1_E4_D4:
 807   3                                      if (Two_Menu_F1_E4[3] == 0) Two_Menu_F1_E4[3] = 9;      //设置F1_E4个位
 808   3                                      else Two_Menu_F1_E4[3]--;
 809   3                                      break;
 810   3                              case TWO_MENU_F2_E1_D1:
 811   3                                      if (Two_Menu_F2_E1[0] == 0) Two_Menu_F2_E1[0] = 20;     //设置F2_E1千位
 812   3                                      else Two_Menu_F2_E1[0]--;
 813   3                                      break;
 814   3                              case TWO_MENU_F2_E1_D2:
 815   3                                      if (Two_Menu_F2_E1[1] == 0) Two_Menu_F2_E1[1] = 9;      //设置F2_E1百位
 816   3                                      else Two_Menu_F2_E1[1]--;
 817   3                                      break;
 818   3                              case TWO_MENU_F2_E1_D3:
 819   3                                      if (Two_Menu_F2_E1[2] == 0) Two_Menu_F2_E1[2] = 9;      //设置F2_E1十位
 820   3                                      else Two_Menu_F2_E1[2]--;
 821   3                                      break;
 822   3                              case TWO_MENU_F2_E1_D4:
 823   3                                      if (Two_Menu_F2_E1[3] == 0) Two_Menu_F2_E1[3] = 9;      //设置F2_E1个位
 824   3                                      else Two_Menu_F2_E1[3]--;
 825   3                                      break;
 826   3                              case TWO_MENU_F2_E2_D1:
 827   3                                      if (Two_Menu_F2_E2[0] == 0) Two_Menu_F2_E2[0] = 20;     //设置F2_E2千位
 828   3                                      else Two_Menu_F2_E2[0]--;
 829   3                                      break;
 830   3                              case TWO_MENU_F2_E2_D2:
 831   3                                      if (Two_Menu_F2_E2[1] == 0) Two_Menu_F2_E2[1] = 9;      //设置F2_E2百位
 832   3                                      else Two_Menu_F2_E2[1]--;
 833   3                                      break;
 834   3                              case TWO_MENU_F2_E2_D3:
 835   3                                      if (Two_Menu_F2_E2[2] == 0) Two_Menu_F2_E2[2] = 9;      //设置F2_E2十位
 836   3                                      else Two_Menu_F2_E2[2]--;
 837   3                                      break;
 838   3                              case TWO_MENU_F2_E2_D4:
 839   3                                      if (Two_Menu_F2_E2[3] == 0) Two_Menu_F2_E2[3] = 9;      //设置F2_E2个位
 840   3                                      else Two_Menu_F2_E2[3]--;
 841   3                                      break;
 842   3                              case TWO_MENU_F2_E3_D1:
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 16  

 843   3                                      if (Two_Menu_F2_E3[0] == 0) Two_Menu_F2_E3[0] = 20;     //设置F2_E3千位
 844   3                                      else Two_Menu_F2_E3[0]--;
 845   3                                      break;
 846   3                              case TWO_MENU_F2_E3_D2:
 847   3                                      if (Two_Menu_F2_E3[1] == 0) Two_Menu_F2_E3[1] = 9;      //设置F2_E3百位
 848   3                                      else Two_Menu_F2_E3[1]--;
 849   3                                      break;
 850   3                              case TWO_MENU_F2_E3_D3:
 851   3                                      if (Two_Menu_F2_E3[2] == 0) Two_Menu_F2_E3[2] = 9;      //设置F2_E3十位
 852   3                                      else Two_Menu_F2_E3[2]--;
 853   3                                      break;
 854   3                              case TWO_MENU_F2_E3_D4:
 855   3                                      if (Two_Menu_F2_E3[3] == 0) Two_Menu_F2_E3[3] = 9;      //设置F2_E3个位
 856   3                                      else Two_Menu_F2_E3[3]--;
 857   3                                      break;
 858   3                              case TWO_MENU_F2_E4_D1:
 859   3                                      if (Two_Menu_F2_E4[0] == 0) Two_Menu_F2_E4[0] = 20;     //设置F2_E4千位
 860   3                                      else Two_Menu_F2_E4[0]--;
 861   3                                      break;
 862   3                              case TWO_MENU_F2_E4_D2:
 863   3                                      if (Two_Menu_F2_E4[1] == 0) Two_Menu_F2_E4[1] = 9;      //设置F2_E4百位
 864   3                                      else Two_Menu_F2_E4[1]--;
 865   3                                      break;
 866   3                              case TWO_MENU_F2_E4_D3:
 867   3                                      if (Two_Menu_F2_E4[2] == 0) Two_Menu_F2_E4[2] = 9;      //设置F2_E4十位
 868   3                                      else Two_Menu_F2_E4[2]--;
 869   3                                      break;
 870   3                              case TWO_MENU_F2_E4_D4:
 871   3                                      if (Two_Menu_F2_E4[3] == 0) Two_Menu_F2_E4[3] = 9;      //设置F2_E4个位
 872   3                                      else Two_Menu_F2_E4[3]--;
 873   3                                      break;
 874   3                              case TWO_MENU_F3_E1_SET:
 875   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 876   3                                      else Two_Menu_F3_E1 = 1;
 877   3                                      break;
 878   3                              case TWO_MENU_F3_E2_SET:
 879   3                                      if (Two_Menu_F3_E2 == 1) Two_Menu_F3_E2 = 99;   //存储队列个数
 880   3                                      else Two_Menu_F3_E2--;
 881   3                                      break;
 882   3                              case TWO_MENU_F4_SET:
 883   3                                      if (Two_Menu_F4_E1 == 0) Two_Menu_F4_E1 = 99;   //销号时间设置
 884   3                                      else Two_Menu_F4_E1--;
 885   3                                      break;
 886   3                              case TWO_MENU_F5_SET:
 887   3                                      if (Two_Menu_F5_E1 == 0) Two_Menu_F5_E1 = 99;   //销号时间设置
 888   3                                      else Two_Menu_F5_E1--;
 889   3                                      break;
 890   3                              case TWO_MENU_F6_E1_SET:
 891   3                                      if (Two_Menu_F6_E1 == 0) Two_Menu_F6_E1 = 7;    //F6_E1额语音选择
 892   3                                      else Two_Menu_F6_E1--;
 893   3                                      break;
 894   3                              case TWO_MENU_F6_E2_SET:
 895   3                                      if (Two_Menu_F6_E2 == 1) Two_Menu_F6_E2 = 9;    //F6_E2语音报读次数调整
 896   3                                      else Two_Menu_F6_E2--;
 897   3                                      break;
 898   3                              case TWO_MENU_F6_E3_SET:
 899   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 900   3                                      else Two_Menu_F6_E3 = 0;
 901   3                                      break;
 902   3                              case TWO_MENU_F6_E4_SET:
 903   3                                      if (Two_Menu_F6_E4 == 0) Two_Menu_F6_E4 = 9;    //F6_E4音量大小调整
 904   3                                      else Two_Menu_F6_E4--;
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 17  

 905   3                                      break;
 906   3                              case TWO_MENU_F6_E5_SET:
 907   3                                      if (Two_Menu_F6_E5 == 0) Two_Menu_F6_E5 = 7;    //F6_E5屏幕亮度调整
 908   3                                      else Two_Menu_F6_E5--;
 909   3                                      break;
 910   3                              case TWO_MENU_F7_E1_SET:
 911   3                                      if (Two_Menu_F7_E1 == 0) Two_Menu_F7_E1 = 10;   //F7_E1原始规则 999*9
 912   3                                      else Two_Menu_F7_E1--;
 913   3                                      break;
 914   3                              case TWO_MENU_F7_E2_SET:
 915   3                                      if (Two_Menu_F7_E2 == 0) Two_Menu_F7_E2 = 11;   //F7_E2附加规则 9999*9
 916   3                                      else Two_Menu_F7_E2--;
 917   3                                      break;
 918   3                              case TWO_MENU_F7_E3_SET:
 919   3                                      if (Two_Menu_F7_E3 == 0) Two_Menu_F7_E3 = 11;   //F7_E3附加规则 999*99
 920   3                                      else Two_Menu_F7_E3--;
 921   3                                      break;
 922   3                              case TWO_MENU_F7_E4_SET:
 923   3                                      if (Two_Menu_F7_E4 == 0) Two_Menu_F7_E4 = 11;   //F7_E3附加规则 9999*99
 924   3                                      else Two_Menu_F7_E4--;
 925   3                                      break;
 926   3                              case TWO_MENU_F8_E1_SET:
 927   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 928   3                                      else Two_Menu_F8_E1 = 1;
 929   3                                      break;
 930   3                              case TWO_MENU_F8_E2_SET:
 931   3                                      if (Two_Menu_F8_E2 == 0) Two_Menu_F8_E2 = 38;   //F8_E2键位设置
 932   3                                      else Two_Menu_F8_E2--;
 933   3                                      break;
 934   3                              case DECODER_MENU:
 935   3                                      CycleDown();
 936   3                                      break;
 937   3                              case TWO_MENU_FC_SET:
 938   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 939   3                                      else Two_Menu_FC_E1 = 1;
 940   3                                      break;
 941   3                              case TWO_MENU_Fb_SET:
 942   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 943   3                                      else Two_Menu_Fb_E1 = 1;
 944   3                                      break;
 945   3                              case TWO_MENU_F6_E6_SET:
 946   3                                      if (Two_Menu_F6_E6 == 1) Two_Menu_F6_E6 = 0;
 947   3                                      else Two_Menu_F6_E6 = 1;
 948   3                                      break;
 949   3                              case TWO_MENU_F6_E7_SET:
 950   3                                      if (Two_Menu_F6_E7 == 1) Two_Menu_F6_E7 = 0;
 951   3                                      else Two_Menu_F6_E7 = 1;
 952   3                                      break;
 953   3      
 954   3                                      default:break;
 955   3                              }
 956   2                              func_index = table[func_index].down; break;
 957   2                      default:break;
 958   2              }
 959   1              env_load();
 960   1              current_operation_index = table[func_index].index_operation;
 961   1              (*current_operation_index)();//执行当前操作函数
 962   1      }
 963          
 964          void delay10ms(void)   //误差 -0.054253472222us
 965          {
 966   1              unsigned char a, b, c;
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 18  

 967   1              for (c = 4; c>0; c--)
 968   1              for (b = 52; b>0; b--)
 969   1              for (a = 220; a>0; a--);
 970   1              _nop_();  //if Keil,require use intrins.h
 971   1      }
 972          
 973          unsigned char return_func_index(void)
 974          {
 975   1              unsigned char func_index_temp = 0;
 976   1              func_index_temp = func_index;
 977   1              return func_index_temp;
 978   1      }
 979          
 980          void set_func_index(unsigned char temp)
 981          {
 982   1              func_index = temp;
 983   1      }
 984          
 985          unsigned char return_Two_Menu_F3_E1(void)
 986          {
 987   1              unsigned char temp = 0;
 988   1              temp = Two_Menu_F3_E1;
 989   1              return temp;
 990   1      }
 991          
 992          unsigned char return_Two_Menu_F3_E2(void)
 993          {
 994   1              unsigned char temp = 0;
 995   1              temp = Two_Menu_F3_E2;
 996   1              return temp;
 997   1      }
 998          
 999          unsigned char return_Two_Menu_F4_E1(void)
1000          {
1001   1              unsigned char temp = 0;
1002   1              temp = Two_Menu_F4_E1;
1003   1              return temp;
1004   1      }
1005          
1006          unsigned char return_Two_Menu_F5_E1(void)
1007          {
1008   1              unsigned char temp = 0;
1009   1              temp = Two_Menu_F5_E1;
1010   1              return temp;
1011   1      }
1012          
1013          unsigned char return_Two_Menu_F6_E1(void)
1014          {
1015   1              unsigned char temp = 0;
1016   1              temp = Two_Menu_F6_E1;
1017   1              return temp;
1018   1      }
1019          
1020          unsigned char return_Two_Menu_F6_E2(void)
1021          {
1022   1              unsigned char temp = 0;
1023   1              temp = Two_Menu_F6_E2;
1024   1              return temp;
1025   1      }
1026          
1027          unsigned char return_Two_Menu_F6_E3(void)
1028          {
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 19  

1029   1              unsigned char temp = 0;
1030   1              temp = Two_Menu_F6_E3;
1031   1              return temp;
1032   1      }
1033          
1034          unsigned char return_Two_Menu_F6_E4(void)
1035          {
1036   1              unsigned char temp = 0;
1037   1              temp = Two_Menu_F6_E4;
1038   1              return temp;
1039   1      }
1040          
1041          unsigned char return_Two_Menu_F6_E5(void)
1042          {
1043   1              unsigned char temp = 0;
1044   1              temp = Two_Menu_F6_E5;
1045   1              return temp;
1046   1      }
1047          unsigned char return_Two_Menu_F6_E6(void)
1048          {
1049   1              unsigned char temp = 0;
1050   1              temp = Two_Menu_F6_E6;
1051   1              return temp;
1052   1      }
1053          
1054          unsigned char return_Two_Menu_F6_E7(void)
1055          {
1056   1              unsigned char temp = 0;
1057   1              temp = Two_Menu_F6_E7;
1058   1              return temp;
1059   1      }
1060          
1061          
1062          unsigned char return_Two_Menu_F7_E1(void)
1063          {
1064   1              unsigned char temp = 0;
1065   1              temp = Two_Menu_F7_E1;
1066   1              return temp;
1067   1      }
1068          
1069          unsigned char return_Two_Menu_F7_E2(void)
1070          {
1071   1              unsigned char temp = 0;
1072   1              temp = Two_Menu_F7_E2;
1073   1              return temp;
1074   1      }
1075          
1076          unsigned char return_Two_Menu_F7_E3(void)
1077          {
1078   1              unsigned char temp = 0;
1079   1              temp = Two_Menu_F7_E3;
1080   1              return temp;
1081   1      }
1082          
1083          unsigned char return_Two_Menu_F7_E4(void)
1084          {
1085   1              unsigned char temp = 0;
1086   1              temp = Two_Menu_F7_E4;
1087   1              return temp;
1088   1      }
1089          
1090          unsigned char return_Two_Menu_F8_E1(void)
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 20  

1091          {
1092   1              unsigned char temp = 0;
1093   1              temp = Two_Menu_F8_E1;
1094   1              return temp;
1095   1      }
1096          
1097          unsigned char return_Two_Menu_F8_E2(void)
1098          {
1099   1              unsigned char temp = 0;
1100   1              temp = Two_Menu_F8_E2;
1101   1              return temp;
1102   1      }
1103          
1104          unsigned char return_sound_table(void)
1105          {
1106   1              unsigned char temp = 0;
1107   1              temp = sound_table;
1108   1              return temp;
1109   1      }
1110          
1111          void set_sound_table(unsigned char temp)
1112          {
1113   1              sound_table = temp;
1114   1      }
1115          
1116          unsigned char return_Two_Menu_FC_E1(void)
1117          {
1118   1              unsigned char temp = 0;
1119   1              temp = Two_Menu_FC_E1;
1120   1              return temp;
1121   1      }
1122          
1123          unsigned char return_Two_Menu_Fb_E1(void)
1124          {
1125   1              unsigned char temp = 0;
1126   1              temp = Two_Menu_Fb_E1;
1127   1              return temp;
1128   1      }
1129          
1130          void env_load(void)
1131          {
1132   1              
1133   1              EEPROM.Two_Menu_F3_E1 = Two_Menu_F3_E1;
1134   1              EEPROM.Two_Menu_F3_E2 = Two_Menu_F3_E2;
1135   1              EEPROM.Two_Menu_F4_E1 = Two_Menu_F4_E1;
1136   1              EEPROM.Two_Menu_F5_E1 = Two_Menu_F5_E1;
1137   1              EEPROM.Two_Menu_F6_E1 = Two_Menu_F6_E1;
1138   1              EEPROM.Two_Menu_F6_E2 = Two_Menu_F6_E2;
1139   1              EEPROM.Two_Menu_F6_E3 = Two_Menu_F6_E3;
1140   1              EEPROM.Two_Menu_F6_E4 = Two_Menu_F6_E4;
1141   1              EEPROM.Two_Menu_F6_E5 = Two_Menu_F6_E5;
1142   1              EEPROM.Two_Menu_F6_E6 = Two_Menu_F6_E6;
1143   1              EEPROM.Two_Menu_F6_E7 = Two_Menu_F6_E7;
1144   1              EEPROM.Two_Menu_F7_E1 = Two_Menu_F7_E1;
1145   1              EEPROM.Two_Menu_F8_E1 = Two_Menu_F8_E1;
1146   1              EEPROM.Two_Menu_Fb_E1 = Two_Menu_Fb_E1;
1147   1              EEPROM.Two_Menu_FC_E1 = Two_Menu_FC_E1;
1148   1      
1149   1              ISendStr(I2C_ADDRESS, BACK, (uint8_t *)&EEPROM, 15);
1150   1              delay10ms();
1151   1      }
1152          
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 21  

1153          void env_init(void)
1154          {
1155   1              IRcvStr(I2C_ADDRESS, SIN_KEY, single_key, 16);
1156   1              delay10ms();
1157   1              IRcvStr(I2C_ADDRESS, MUL_KEY, multiple_key, 16);
1158   1              delay10ms();
1159   1              IRcvStr(I2C_ADDRESS, BACK, (uint8_t *)&EEPROM, 15);
1160   1              delay10ms();
1161   1      
1162   1              Two_Menu_F3_E1 =  EEPROM.Two_Menu_F3_E1 ;
1163   1              Two_Menu_F3_E2 =  EEPROM.Two_Menu_F3_E2 ;
1164   1              Two_Menu_F4_E1 =  EEPROM.Two_Menu_F4_E1 ;
1165   1              Two_Menu_F5_E1 =  EEPROM.Two_Menu_F5_E1 ;
1166   1              Two_Menu_F6_E1 =  EEPROM.Two_Menu_F6_E1 ;
1167   1              Two_Menu_F6_E2 =  EEPROM.Two_Menu_F6_E2 ;
1168   1              Two_Menu_F6_E3 =  EEPROM.Two_Menu_F6_E3 ;
1169   1              Two_Menu_F6_E4 =  EEPROM.Two_Menu_F6_E4 ;
1170   1              Two_Menu_F6_E5 =  EEPROM.Two_Menu_F6_E5 ;
1171   1              Two_Menu_F6_E6 =  EEPROM.Two_Menu_F6_E6 ;
1172   1              Two_Menu_F6_E7 =  EEPROM.Two_Menu_F6_E7 ;
1173   1              Two_Menu_F7_E1 =  EEPROM.Two_Menu_F7_E1 ;
1174   1              Two_Menu_F8_E1 =  EEPROM.Two_Menu_F8_E1;
1175   1              Two_Menu_Fb_E1 =  EEPROM.Two_Menu_Fb_E1;
1176   1              Two_Menu_FC_E1 =  EEPROM.Two_Menu_FC_E1;
1177   1      
1178   1              if (EEPROM.Two_Menu_F3_E1 > 2)
1179   1              {
1180   2                      Two_Menu_F3_E1 = 1;
1181   2              }
1182   1              if (EEPROM.Two_Menu_F3_E2 > 99)
1183   1              {
1184   2                      Two_Menu_F3_E2 = 1;
1185   2              }
1186   1              if (EEPROM.Two_Menu_F4_E1 > 99)
1187   1              {
1188   2                      Two_Menu_F4_E1 = 1;
1189   2              }
1190   1              if (EEPROM.Two_Menu_F5_E1 > 99)
1191   1              {
1192   2                      Two_Menu_F5_E1 = 1;
1193   2              }
1194   1              if (EEPROM.Two_Menu_F6_E1 > 7)
1195   1              {
1196   2                      Two_Menu_F6_E1 = 0;
1197   2              }
1198   1              if (EEPROM.Two_Menu_F6_E2 > 9)
1199   1              {
1200   2                      Two_Menu_F6_E2 = 2;
1201   2              }
1202   1              if (EEPROM.Two_Menu_F6_E3 > 1)
1203   1              {
1204   2                      Two_Menu_F6_E3 = 0;
1205   2              }
1206   1              if (EEPROM.Two_Menu_F6_E4 > 9)
1207   1              {
1208   2                      Two_Menu_F6_E4 = 6;
1209   2              }
1210   1              if (EEPROM.Two_Menu_F6_E5 > 7)
1211   1              {
1212   2                      Two_Menu_F6_E5 = 3;
1213   2              }
1214   1              if (EEPROM.Two_Menu_F6_E6 > 1)
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 22  

1215   1              {
1216   2                      Two_Menu_F6_E6 = 0;
1217   2              }
1218   1              if (EEPROM.Two_Menu_F6_E7 > 1)
1219   1              {
1220   2                      Two_Menu_F6_E7 = 0;
1221   2              }
1222   1              if (EEPROM.Two_Menu_F7_E1 > 10)
1223   1              {
1224   2                      Two_Menu_F7_E1 = 10;
1225   2              }
1226   1              if (EEPROM.Two_Menu_F8_E1 > 2)
1227   1              {
1228   2                      Two_Menu_F8_E1 = 2;
1229   2              }
1230   1              if (EEPROM.Two_Menu_Fb_E1 > 1)
1231   1              {
1232   2                      Two_Menu_Fb_E1 = 1;
1233   2              }
1234   1              if (EEPROM.Two_Menu_FC_E1 > 2)
1235   1              {
1236   2                      Two_Menu_FC_E1 = 1;
1237   2              }
1238   1      }
1239          
1240          void var_init(void)
1241          {
1242   1              Two_Menu_F3_E1 = 1; //即时模式或者排队显示
1243   1              Two_Menu_F3_E2 = 1; //呼叫时候存储数量
1244   1      
1245   1              Two_Menu_F4_E1 = 0; //销号时间
1246   1              Two_Menu_F5_E1 = 0; //循环间隔时间
1247   1      
1248   1              Two_Menu_F6_E1 = 0; //简单报读
1249   1              Two_Menu_F6_E2 = 2; //语音报读次数
1250   1              Two_Menu_F6_E3 = 0; //循环时候是否报读
1251   1              Two_Menu_F6_E4 = 6; //音量大小调整
1252   1              Two_Menu_F6_E5 = 3; //显示屏LED亮度调整
1253   1              Two_Menu_F6_E6 = 1; //语音导航调整
1254   1      
1255   1              Two_Menu_F7_E1 = 10; // E1默认键盘规则 999*9
1256   1              Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
1257   1              Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
1258   1              Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
1259   1      
1260   1              Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
1261   1      
1262   1              Two_Menu_F8_E2 = 0; // 键位设置
1263   1      
1264   1      
1265   1      }
1266          
1267          void key_init(void)
1268          {
1269   1              unsigned char i;
1270   1              for (i = 0; i < 16; i++)
1271   1              {
1272   2                      single_key[i] = 0x01;
1273   2              }
1274   1      
1275   1              multiple_key[0] = 0X01;
1276   1              multiple_key[1] = QUXIAO - QUXIAO;
C51 COMPILER V9.00   KEY                                                                   11/07/2015 09:59:58 PAGE 23  

1277   1              multiple_key[2] = JIEZHANG - QUXIAO;
1278   1              multiple_key[3] = DIANDANG - QUXIAO;
1279   1              multiple_key[4] = JIUSHUI - QUXIAO;
1280   1              multiple_key[5] = 0X01;
1281   1              multiple_key[6] = 0x01;
1282   1              multiple_key[7] = JIASHUI - QUXIAO;
1283   1              multiple_key[8] = HUJIAO - QUXIAO;
1284   1              multiple_key[9] =  0x01;
1285   1              multiple_key[10] = 0x01;
1286   1              multiple_key[11] = 0x01;
1287   1              multiple_key[12] = 0x01;
1288   1              multiple_key[13] = 0x01;
1289   1              multiple_key[14] = 0x01;
1290   1              multiple_key[15] = 0x01;
1291   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4382    ----
   CONSTANT SIZE    =    800    ----
   XDATA SIZE       =     66       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
