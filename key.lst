C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\key.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\k
                    -ey.lst) TABS(2) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "usart.h"
   3          #include "tm1629.h"
   4          #include "menu.h"
   5          #include "timer.h"
   6          #include "ds1302.h"
   7          #include "at24c256.h"
   8          
   9          unsigned char sound_table = 0;
  10          
  11          unsigned char func_index = 0; //多级菜单索引变量
  12          void(*current_operation_index)();// 多级菜单函数指针
  13          
  14          unsigned char Two_Menu_F1_E1[4] = { 0, 0, 0, 1 }; //F1_E1
  15          unsigned char Two_Menu_F1_E2[4] = { 0, 0, 0, 1 }; //F1_E2
  16          unsigned char Two_Menu_F1_E3[4] = { 0, 0, 0, 1 }; //F1_E3
  17          unsigned char Two_Menu_F1_E4[4] = { 0, 0, 0, 1 }; //F1_E4
  18          unsigned char Two_Menu_F2_E1[4] = { 0, 0, 0, 1 }; //F2_E1
  19          unsigned char Two_Menu_F2_E2[4] = { 0, 0, 0, 1 }; //F2_E2
  20          unsigned char Two_Menu_F2_E3[4] = { 0, 0, 0, 1 }; //F2_E3
  21          unsigned char Two_Menu_F2_E4[4] = { 0, 0, 0, 1 }; //F2_E4
  22          
  23          unsigned char Two_Menu_F3_E1 = 1; //即时模式或者排队显示
  24          unsigned char Two_Menu_F3_E2 = 12; //呼叫时候存储数量
  25          
  26          unsigned char Two_Menu_F4_E1 = 0; //销号时间
  27          unsigned char Two_Menu_F5_E1 = 0; //循环间隔时间
  28          
  29          unsigned char Two_Menu_F6_E1 = 0; //简单报读
  30          unsigned char Two_Menu_F6_E2 = 1; //语音报读次数
  31          unsigned char Two_Menu_F6_E3 = 0; //循环时候是否报读
  32          unsigned char Two_Menu_F6_E4 = 0; //音量大小调整
  33          unsigned char Two_Menu_F6_E5 = 0; //显示屏LED亮度调整
  34          
  35          unsigned char Two_Menu_F7_E1 = 0; // E1默认键盘规则 999*9
  36          unsigned char Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
  37          unsigned char Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
  38          unsigned char Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
  39          
  40          unsigned char Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
  41          unsigned char Two_Menu_F8_E2 = 0; // 键位设置
  42          
  43          unsigned char Two_Menu_Fb_E1 = 0; // 设置主机有没有销号功能
  44          unsigned char Two_Menu_FC_E1 = 0; // 设置万年历待机与----待机的切换
  45          unsigned char Two_Menu_Fd_E1 = 0; // E1 E2 E3 E4 E5 E6
  46          
  47          key_table code table[100] =
  48          { // 目标索引       上        下          确认     退出         函数
  49            { MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, (*fun0) }, //待机
  50          
  51            { ONE_MENU_F0, ONE_MENU_F1, ONE_MENU_Fd, TWO_MENU_F0_YEAR , MENU_STANDBY, (*fun1) }, //F0-F9
  52            { ONE_MENU_F1, ONE_MENU_F2, ONE_MENU_F0, TWO_MENU_F1_E1   , MENU_STANDBY, (*fun2) },
  53            { ONE_MENU_F2, ONE_MENU_F3, ONE_MENU_F1, TWO_MENU_F2_E1   , MENU_STANDBY, (*fun3) },
  54            { ONE_MENU_F3, ONE_MENU_F4, ONE_MENU_F2, TWO_MENU_F3_E1   , MENU_STANDBY, (*fun4) },
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 2   

  55            { ONE_MENU_F4, ONE_MENU_F5, ONE_MENU_F3, TWO_MENU_F4_SET  , MENU_STANDBY, (*fun5) },
  56            { ONE_MENU_F5, ONE_MENU_F6, ONE_MENU_F4, TWO_MENU_F5_SET  , MENU_STANDBY, (*fun6) },
  57            { ONE_MENU_F6, ONE_MENU_F7, ONE_MENU_F5, TWO_MENU_F6_E1   , MENU_STANDBY, (*fun7) },
  58            { ONE_MENU_F7, ONE_MENU_F8, ONE_MENU_F6, TWO_MENU_F7_E1   , MENU_STANDBY, (*fun8) },
  59            { ONE_MENU_F8, ONE_MENU_F9, ONE_MENU_F7, TWO_MENU_F8_E1   , MENU_STANDBY, (*fun9) },
  60            { ONE_MENU_F9, ONE_MENU_FA, ONE_MENU_F8, TWO_MENU_F9_E1   , MENU_STANDBY, (*fun10) },
  61            { ONE_MENU_FA, ONE_MENU_Fb, ONE_MENU_F9, TWO_MENU_FA_SET  , MENU_STANDBY, (*fun11) }, //FA
  62            { ONE_MENU_Fb, ONE_MENU_FC, ONE_MENU_FA, TWO_MENU_Fb_SET  , MENU_STANDBY, (*fun12) }, //Fb
  63            { ONE_MENU_FC, ONE_MENU_Fd, ONE_MENU_Fb, TWO_MENU_FC_SET  , MENU_STANDBY, (*fun13) }, //FC
  64            { ONE_MENU_Fd, ONE_MENU_F0, ONE_MENU_FC, TWO_MENU_Fd_SET  , MENU_STANDBY, (*fun14) }, //Fd
  65          
  66            { TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_MOUTH , ONE_MENU_F0, (*fun15) }
             -, //万年历 年
  67            { TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_DAY   , ONE_MENU_F0, (*fun16) }
             -, //万年历 月
  68            { TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_WEEK  , ONE_MENU_F0, (*fun17) }
             -, //万年历 日
  69            { TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_HOUR  , ONE_MENU_F0, (*fun18) }
             -, //万年历 周
  70            { TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_MINUTE, ONE_MENU_F0, (*fun19) }
             -, //万年历 小时
  71            { TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_YEAR  , ONE_MENU_F0, (*fun20) }
             -, //万年历 分钟
  72          
  73            { TWO_MENU_F1_E1, TWO_MENU_F1_E2, TWO_MENU_F1_E4, TWO_MENU_F1_E1_D4, ONE_MENU_F1, (*fun21) }, //F1子菜单E
             -1
  74            { TWO_MENU_F1_E2, TWO_MENU_F1_E3, TWO_MENU_F1_E1, TWO_MENU_F1_E2_D4, ONE_MENU_F1, (*fun22) }, //F1子菜单E
             -2
  75            { TWO_MENU_F1_E3, TWO_MENU_F1_E4, TWO_MENU_F1_E2, TWO_MENU_F1_E3_D4, ONE_MENU_F1, (*fun23) }, //F1子菜单E
             -3
  76            { TWO_MENU_F1_E4, TWO_MENU_F1_E1, TWO_MENU_F1_E3, TWO_MENU_F1_E4_D4, ONE_MENU_F1, (*fun24) }, //F1子菜单E
             -4
  77          
  78            { TWO_MENU_F2_E1, TWO_MENU_F2_E2, TWO_MENU_F2_E4, TWO_MENU_F2_E1_D4, ONE_MENU_F2, (*fun25) }, //F2子菜单E
             -1
  79            { TWO_MENU_F2_E2, TWO_MENU_F2_E3, TWO_MENU_F2_E1, TWO_MENU_F2_E2_D4, ONE_MENU_F2, (*fun26) }, //F2子菜单E
             -2
  80            { TWO_MENU_F2_E3, TWO_MENU_F2_E4, TWO_MENU_F2_E2, TWO_MENU_F2_E3_D4, ONE_MENU_F2, (*fun27) }, //F2子菜单E
             -3
  81            { TWO_MENU_F2_E4, TWO_MENU_F2_E1, TWO_MENU_F2_E3, TWO_MENU_F2_E4_D4, ONE_MENU_F2, (*fun28) }, //F2子菜单E
             -4
  82          
  83            { TWO_MENU_F3_E1, TWO_MENU_F3_E2, TWO_MENU_F3_E2, TWO_MENU_F3_E1_SET, ONE_MENU_F3, (*fun29) }, //F3子菜单
             -E1
  84            { TWO_MENU_F3_E2, TWO_MENU_F3_E1, TWO_MENU_F3_E1, TWO_MENU_F3_E2_SET, ONE_MENU_F3, (*fun30) }, //F3子菜单
             -E2
  85          
  86            { TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, ONE_MENU_F4, (*fun31) }, //F4子菜单
  87            { TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, ONE_MENU_F5, (*fun32) }, //F5子菜单
  88          
  89            { TWO_MENU_F6_E1, TWO_MENU_F6_E2, TWO_MENU_F6_E5, TWO_MENU_F6_E1_SET, ONE_MENU_F6, (*fun33) }, //F6子菜单
             -E1
  90            { TWO_MENU_F6_E2, TWO_MENU_F6_E3, TWO_MENU_F6_E1, TWO_MENU_F6_E2_SET, ONE_MENU_F6, (*fun34) }, //F6子菜单
             -E2
  91            { TWO_MENU_F6_E3, TWO_MENU_F6_E4, TWO_MENU_F6_E2, TWO_MENU_F6_E3_SET, ONE_MENU_F6, (*fun35) }, //F6子菜单
             -E3
  92            { TWO_MENU_F6_E4, TWO_MENU_F6_E5, TWO_MENU_F6_E3, TWO_MENU_F6_E4_SET, ONE_MENU_F6, (*fun36) }, //F6子菜单
             -E4
  93            { TWO_MENU_F6_E5, TWO_MENU_F6_E1, TWO_MENU_F6_E4, TWO_MENU_F6_E5_SET, ONE_MENU_F6, (*fun37) }, //F6子菜单
             -E5
  94          
  95            { TWO_MENU_F7_E1, TWO_MENU_F7_E2, TWO_MENU_F7_E4, TWO_MENU_F7_E1_SET, ONE_MENU_F7, (*fun38) }, //F7子菜单
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 3   

             -E1
  96            { TWO_MENU_F7_E2, TWO_MENU_F7_E3, TWO_MENU_F7_E1, TWO_MENU_F7_E2_SET, ONE_MENU_F7, (*fun39) }, //F7子菜单
             -E2
  97            { TWO_MENU_F7_E3, TWO_MENU_F7_E4, TWO_MENU_F7_E2, TWO_MENU_F7_E3_SET, ONE_MENU_F7, (*fun40) }, //F7子菜单
             -E3
  98            { TWO_MENU_F7_E4, TWO_MENU_F7_E1, TWO_MENU_F7_E3, TWO_MENU_F7_E4_SET, ONE_MENU_F7, (*fun41) }, //F7子菜单
             -E4  
  99          
 100            { TWO_MENU_F8_E1, TWO_MENU_F8_E2, TWO_MENU_F8_E2, TWO_MENU_F8_E1_SET, ONE_MENU_F8, (*fun42) }, //F8子菜单
             -E1
 101            { TWO_MENU_F8_E2, TWO_MENU_F8_E1, TWO_MENU_F8_E1, TWO_MENU_F8_E2_SET, ONE_MENU_F8, (*fun43) }, //F8子菜单
             -E2
 102          
 103            { TWO_MENU_F9_E1, TWO_MENU_F9_E2, TWO_MENU_F9_E2, 0, ONE_MENU_F9, (*fun44) }, //F9子菜单E1
 104            { TWO_MENU_F9_E2, TWO_MENU_F9_E1, TWO_MENU_F9_E1, 0, ONE_MENU_F9, (*fun45) }, //F9子菜单E2
 105          
 106            { TWO_MENU_FA_SET, TWO_MENU_FA_SET, TWO_MENU_FA_SET, 0, ONE_MENU_FA, (*fun46) }, //FA子菜单
 107            { TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, 0, ONE_MENU_Fb, (*fun47) }, //Fb子菜单
 108            { TWO_MENU_FC_SET, TWO_MENU_FC_SET, TWO_MENU_FC_SET, 0, ONE_MENU_FC, (*fun48) }, //FC子菜单
 109            { TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, 0, ONE_MENU_Fd, (*fun49) }, //Fd子菜单
 110          
 111            { TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1, (*fun50) },
             - //F1_E1注册呼叫器
 112            { TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1, (*fun51) },
             - //F1_E1注册呼叫器
 113            { TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1, (*fun52) },
             - //F1_E1注册呼叫器
 114            { TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1, (*fun53) },
             - //F1_E1注册呼叫器
 115          
 116            { TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2, (*fun54) },
             - //F1_E2注册管理器
 117            { TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2, (*fun55) },
             - //F1_E2注册管理器
 118            { TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2, (*fun56) },
             - //F1_E2注册管理器
 119            { TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2, (*fun57) },
             - //F1_E2注册管理器
 120          
 121            { TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3, (*fun58) },
             - //F1_E3注册报警器
 122            { TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3, (*fun59) },
             - //F1_E3注册报警器
 123            { TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3, (*fun60) },
             - //F1_E3注册报警器
 124            { TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3, (*fun61) },
             - //F1_E3注册报警器
 125          
 126            { TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4, (*fun62) },
             - //F1_E3注册取消器
 127            { TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4, (*fun63) },
             - //F1_E3注册取消器
 128            { TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4, (*fun64) },
             - //F1_E3注册取消器
 129            { TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4, (*fun65) },
             - //F1_E3注册取消器
 130          
 131            { TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1, (*fun66) },
             - //F2_E1删除呼叫器
 132            { TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1, (*fun67) },
             - //F2_E1删除呼叫器
 133            { TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1, (*fun68) },
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 4   

             - //F2_E1删除呼叫器
 134            { TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1, (*fun69) },
             - //F2_E1删除呼叫器
 135          
 136            { TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2, (*fun70) },
             - //F2_E2删除管理器
 137            { TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2, (*fun71) },
             - //F2_E2删除管理器
 138            { TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2, (*fun72) },
             - //F2_E2删除管理器
 139            { TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2, (*fun73) },
             - //F2_E2删除管理器
 140          
 141            { TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3, (*fun74) },
             - //F2_E3删除报警器
 142            { TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3, (*fun75) },
             - //F2_E3删除报警器
 143            { TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3, (*fun76) },
             - //F2_E3删除报警器
 144            { TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3, (*fun77) },
             - //F2_E3删除报警器
 145          
 146            { TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4, (*fun78) },
             - //F2_E4删除取消器
 147            { TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4, (*fun79) },
             - //F2_E4删除取消器
 148            { TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4, (*fun80) },
             - //F2_E4删除取消器
 149            { TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4, (*fun81) },
             - //F2_E4删除取消器
 150          
 151            { TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1, (*fun82
             -) }, //F3_E1设置排队显示或者循环显示
 152            { TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2, (*fun83
             -) }, //F3_E2设置队列个数
 153          
 154            { TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1, (*fun84
             -) }, //F6_E1语音选择
 155            { TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2, (*fun85
             -) }, //F6_E2语音报读次数
 156            { TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3, (*fun86
             -) }, //F6_E3循环时候是否报读
 157            { TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4, (*fun87
             -) }, //F6_E4音量大小调整
 158            { TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5, (*fun88
             -) }, //F6_E5屏幕亮度调整
 159          
 160            { TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1, (*fun89
             -) }, //F7_E1 999*9
 161            { TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2, (*fun90
             -) }, //F7_E2 9999*9
 162            { TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3, (*fun91
             -) }, //F7_E3 999*99
 163            { TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4, (*fun92
             -) }, //F7_E4 9999*99
 164          
 165            { TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1, (*fun93
             -) }, //F8_E1 单键位跟多键位切换
 166            { TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2, (*fun94
             -) }, //F8_E2 键位设置
 167          
 168            { DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, (*fun95)},
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 5   

 169          };
 170          
 171          unsigned int KeyScan(void)  //Keyboard scan function
 172          {
 173   1        unsigned int Val = 0;
 174   1        HKeyPort |= 0x7C;//Row height
 175   1        LKeyPort &= 0x07;
 176   1        if ((HKeyPort & 0x7C) != 0x1f)//Press button
 177   1        {
 178   2          delay10ms();  //Remove jitter
 179   2          if ((HKeyPort & 0x7C) != 0x7C)   //Press button
 180   2          {
 181   3            clear_return_standby_time();
 182   3      
 183   3            HKeyPort |= 0x7C; //检测第一列
 184   3            LKeyPort |= 0xf8;
 185   3            LKeyPort &= 0x7f;
 186   3            if ((HKeyPort & 0x7C) != 0x7C)
 187   3            {
 188   4              
 189   4              sound_table=1;
 190   4              Val = HKeyPort & 0x7C;
 191   4              Val <<= 8;
 192   4              Val += (LKeyPort & 0xf8);
 193   4              if (Val == 0x7878)
 194   4              {
 195   5                clear_main_press_time();  //清除菜单键按下的时间计算变量
 196   5                set_main_press_time_table(1); //设置相应的标志位，开始计算时间
 197   5              }
 198   4              while ((HKeyPort & 0x7C) != 0x7C);
 199   4              delay10ms();
 200   4              while ((HKeyPort & 0x7C) != 0x7C);
 201   4              set_main_press_time_table(0);//按键释放，清除相应的标志位
 202   4              set_logout_cycle_table(0);//循环跟销号重新计数
 203   4              return Val;
 204   4            }
 205   3          }
 206   2        }
 207   1        return 0x0fff;
 208   1      }
 209          
 210          unsigned char KeyDecoder(void)
 211          {
 212   1        unsigned int key_val = 0;
 213   1      
 214   1        key_val = KeyScan();
 215   1      #if 0   
                if (key_val == 0x0fff) /*do not key press*/
                {
                  /*sjz 有注册管理器标志*/
                  if (register_manager == 1)
                  {
              
                    if (func_index == FUNC_STANDBY)
                    {
                      if ((old2_RF_RECE_REG[2] & 0x0f) == 0x01)
                      {
                        accumulate_decoder++;
                      }
                      else
                      {
                        accumulate_decoder = 0;
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 6   

                      }
                      if (accumulate_decoder>10)
                      {
                        accumulate_50ms = 20;
                        accumulate_decoder = 0;
                      }
                    }
                    register_manager = 0;
                    switch (old2_RF_RECE_REG[2] & 0x0f)
                    {
                    case 0x01:key_val = 0x1778; break;
                    case 0x02:key_val = 0x1b78; break;
                    case 0x04:key_val = 0x1d78; break;
                    case 0x08:key_val = 0x1e78; break;
                    default:break;
                    }
                  }
                }
              #endif   
 250   1      
 251   1      #ifdef DEBUG
 252   1        if (key_val != 0x0fff)
 253   1        uart_printf("key_val is %x .\r\n", key_val); //测试按键键值
 254   1      #endif
 255   1        switch (key_val)
 256   1        {
 257   2        case 0x5c78:return KEY_RETURN; break;//1 按下相应的键显示相对应的码值
 258   2        case 0x6c78:return KEY_DOWN; break;//2  
 259   2        case 0x7478:return KEY_UP; break;//4
 260   2        case 0x7878:return KEY_FUNC; break;//5 按下相应的键显示相对应的码值
 261   2        default:return 0xff; break;
 262   2        }
 263   1      }
 264          
 265          void KeyProcess(void)
 266          {
 267   1        unsigned char key_value = 0, main_press_time_temp = 0;
 268   1        key_value = KeyDecoder();
 269   1        switch (key_value)
 270   1        {
 271   2          case KEY_FUNC:
 272   2            if (func_index == MENU_STANDBY || func_index == DECODER_MENU)  //如果索引==0  则要1秒以上进入菜单
 273   2            {
 274   3              main_press_time_temp = return_main_press_time();
 275   3              if (main_press_time_temp >= 20)
 276   3              {
 277   4                func_index = ONE_MENU_F0;
 278   4                clear_main_press_time();
 279   4              }
 280   3            }
 281   2            else if (func_index == TWO_MENU_F2_E1_D1 || func_index == TWO_MENU_F2_E1_D2 || func_index == TWO_MENU_F
             -2_E1_D3 || func_index == TWO_MENU_F2_E1_D4 )
 282   2            {
 283   3              main_press_time_temp = return_main_press_time();
 284   3              if (main_press_time_temp >= 10)
 285   3              {
 286   4                delete_call_function(Two_Menu_F2_E1);
 287   4                delay10ms();
 288   4                clear_main_press_time();
 289   4      //          if (sound_table == 1)
 290   4      //          {
 291   4      //#if SOUND
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 7   

 292   4      //            GD5800_select_chapter(SETSUCCESS_POSITION);
 293   4      //#endif
 294   4      //            sound_table = 0;
 295   4      //          }
 296   4              }
 297   3              else
 298   3                func_index = table[func_index].enter;
 299   3            }
 300   2            else if (func_index == TWO_MENU_F2_E2_D1 || func_index == TWO_MENU_F2_E2_D2 || func_index == TWO_MENU_F
             -2_E2_D3 || func_index == TWO_MENU_F2_E2_D4)
 301   2            {
 302   3              main_press_time_temp = return_main_press_time();
 303   3              if (main_press_time_temp >= 10)
 304   3              {
 305   4                delete_host_function(Two_Menu_F2_E2);
 306   4                delay10ms();
 307   4                clear_main_press_time();
 308   4                //          if (sound_table == 1)
 309   4                //          {
 310   4                //#if SOUND
 311   4                //            GD5800_select_chapter(SETSUCCESS_POSITION);
 312   4                //#endif
 313   4                //            sound_table = 0;
 314   4                //          }
 315   4              }
 316   3              else
 317   3                func_index = table[func_index].enter;
 318   3            }
 319   2            else if (func_index == TWO_MENU_F2_E3_D1 || func_index == TWO_MENU_F2_E3_D2 || func_index == TWO_MENU_F
             -2_E3_D3 || func_index == TWO_MENU_F2_E3_D4)
 320   2            {
 321   3              main_press_time_temp = return_main_press_time();
 322   3              if (main_press_time_temp >= 10)
 323   3              {
 324   4                delete_alarm_function(Two_Menu_F2_E3);
 325   4                delay10ms();
 326   4                clear_main_press_time();
 327   4                //          if (sound_table == 1)
 328   4                //          {
 329   4                //#if SOUND
 330   4                //            GD5800_select_chapter(SETSUCCESS_POSITION);
 331   4                //#endif
 332   4                //            sound_table = 0;
 333   4                //          }
 334   4              }
 335   3              else
 336   3                func_index = table[func_index].enter;
 337   3            }
 338   2            else if (func_index == TWO_MENU_F2_E4_D1 || func_index == TWO_MENU_F2_E4_D2 || func_index == TWO_MENU_F
             -2_E4_D3 || func_index == TWO_MENU_F2_E4_D4)
 339   2            {
 340   3              main_press_time_temp = return_main_press_time();
 341   3              if (main_press_time_temp >= 10)
 342   3              {
 343   4                delete_cancel_function(Two_Menu_F2_E4);
 344   4                delay10ms();
 345   4                clear_main_press_time();
 346   4                //          if (sound_table == 1)
 347   4                //          {
 348   4                //#if SOUND
 349   4                //            GD5800_select_chapter(SETSUCCESS_POSITION);
 350   4                //#endif
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 8   

 351   4                //            sound_table = 0;
 352   4                //          }
 353   4              }
 354   3              else
 355   3                func_index = table[func_index].enter;
 356   3            }
 357   2            else
 358   2            {
 359   3              func_index = table[func_index].enter;
 360   3              clear_main_press_time();
 361   3            }
 362   2             break;
 363   2          case KEY_RETURN:  
 364   2            if (func_index == DECODER_MENU)
 365   2            {
 366   3              Logout();
 367   3            }
 368   2            else
 369   2            func_index = table[func_index].esc; 
 370   2            break;
 371   2          case KEY_UP:
 372   2            switch (func_index)
 373   2            {
 374   3            case TWO_MENU_F0_YEAR: 
 375   3              if (time_buf1[1] == 99) time_buf1[1] = 0; //设置万年历 年
 376   3                         else time_buf1[1]++;
 377   3              break;
 378   3            case TWO_MENU_F0_MOUTH:
 379   3              if (time_buf1[2] == 12) time_buf1[2] = 1; //设置万年历 月
 380   3              else time_buf1[2]++;
 381   3              break;
 382   3            case TWO_MENU_F0_DAY:
 383   3              if (time_buf1[3] == 31) time_buf1[3] = 1; //设置万年历 日
 384   3              else time_buf1[3]++;
 385   3              break;
 386   3            case TWO_MENU_F0_WEEK:
 387   3              if (time_buf1[7] == 7) time_buf1[7] = 1;  //设置万年历 星期
 388   3              else time_buf1[7]++;
 389   3              break;
 390   3            case TWO_MENU_F0_HOUR:
 391   3              if (time_buf1[4] == 23) time_buf1[4] = 0; //设置万年历 小时
 392   3              else time_buf1[4]++;
 393   3              break;
 394   3            case TWO_MENU_F0_MINUTE:
 395   3              if (time_buf1[5] == 59) time_buf1[5] = 0; //设置万年历 分钟
 396   3              else time_buf1[5]++;
 397   3              break;
 398   3            case TWO_MENU_F1_E1_D1:
 399   3              if (Two_Menu_F1_E1[0] == 20 ) Two_Menu_F1_E1[0] = 0;  //设置F1_E1千位
 400   3              else Two_Menu_F1_E1[0]++;
 401   3              break;
 402   3            case TWO_MENU_F1_E1_D2:
 403   3              if (Two_Menu_F1_E1[1] == 9) Two_Menu_F1_E1[1] = 0;  //设置F1_E1百位
 404   3              else Two_Menu_F1_E1[1]++;
 405   3              break;
 406   3            case TWO_MENU_F1_E1_D3:
 407   3              if (Two_Menu_F1_E1[2] == 9) Two_Menu_F1_E1[2] = 0;  //设置F1_E1十位
 408   3              else Two_Menu_F1_E1[2]++;
 409   3              break;
 410   3            case TWO_MENU_F1_E1_D4:
 411   3              if (Two_Menu_F1_E1[3] == 9) Two_Menu_F1_E1[3] = 0;  //设置F1_E1个位
 412   3              else Two_Menu_F1_E1[3]++;
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 9   

 413   3              break;
 414   3            case TWO_MENU_F1_E2_D1:
 415   3              if (Two_Menu_F1_E2[0] == 20) Two_Menu_F1_E2[0] = 0; //设置F1_E2千位
 416   3              else Two_Menu_F1_E2[0]++;
 417   3              break;
 418   3            case TWO_MENU_F1_E2_D2:
 419   3              if (Two_Menu_F1_E2[1] == 9) Two_Menu_F1_E2[1] = 0;  //设置F1_E2百位
 420   3              else Two_Menu_F1_E2[1]++;
 421   3              break;
 422   3            case TWO_MENU_F1_E2_D3:
 423   3              if (Two_Menu_F1_E2[2] == 9) Two_Menu_F1_E2[2] = 0;  //设置F1_E2十位
 424   3              else Two_Menu_F1_E2[2]++;
 425   3              break;
 426   3            case TWO_MENU_F1_E2_D4:
 427   3              if (Two_Menu_F1_E2[3] == 9) Two_Menu_F1_E2[3] = 0;  //设置F1_E2个位
 428   3              else Two_Menu_F1_E2[3]++;
 429   3              break;
 430   3            case TWO_MENU_F1_E3_D1:
 431   3              if (Two_Menu_F1_E3[0] == 20) Two_Menu_F1_E3[0] = 0; //设置F1_E3千位
 432   3              else Two_Menu_F1_E3[0]++;
 433   3              break;
 434   3            case TWO_MENU_F1_E3_D2:
 435   3              if (Two_Menu_F1_E3[1] == 9) Two_Menu_F1_E3[1] = 0;  //设置F1_E3百位
 436   3              else Two_Menu_F1_E3[1]++;
 437   3              break;
 438   3            case TWO_MENU_F1_E3_D3:
 439   3              if (Two_Menu_F1_E3[2] == 9) Two_Menu_F1_E3[2] = 0;  //设置F1_E3十位
 440   3              else Two_Menu_F1_E3[2]++;
 441   3              break;
 442   3            case TWO_MENU_F1_E3_D4:
 443   3              if (Two_Menu_F1_E3[3] == 9) Two_Menu_F1_E3[3] = 0;  //设置F1_E3个位
 444   3              else Two_Menu_F1_E3[3]++;
 445   3              break;
 446   3            case TWO_MENU_F1_E4_D1:
 447   3              if (Two_Menu_F1_E4[0] == 20) Two_Menu_F1_E4[0] = 0; //设置F1_E4千位
 448   3              else Two_Menu_F1_E4[0]++;
 449   3              break;
 450   3            case TWO_MENU_F1_E4_D2:
 451   3              if (Two_Menu_F1_E4[1] == 9) Two_Menu_F1_E4[1] = 0;  //设置F1_E4百位
 452   3              else Two_Menu_F1_E4[1]++;
 453   3              break;
 454   3            case TWO_MENU_F1_E4_D3:
 455   3              if (Two_Menu_F1_E4[2] == 9) Two_Menu_F1_E4[2] = 0;  //设置F1_E4十位
 456   3              else Two_Menu_F1_E4[2]++;
 457   3              break;
 458   3            case TWO_MENU_F1_E4_D4:
 459   3              if (Two_Menu_F1_E4[3] == 9) Two_Menu_F1_E4[3] = 0;  //设置F1_E4个位
 460   3              else Two_Menu_F1_E4[3]++;
 461   3              break;
 462   3            case TWO_MENU_F2_E1_D1:
 463   3              if (Two_Menu_F2_E1[0] == 20) Two_Menu_F2_E1[0] = 0; //设置F2_E1千位
 464   3              else Two_Menu_F2_E1[0]++;
 465   3              break;
 466   3            case TWO_MENU_F2_E1_D2:
 467   3              if (Two_Menu_F2_E1[1] == 9) Two_Menu_F2_E1[1] = 0;  //设置F2_E1百位
 468   3              else Two_Menu_F2_E1[1]++;
 469   3              break;
 470   3            case TWO_MENU_F2_E1_D3:
 471   3              if (Two_Menu_F2_E1[2] == 9) Two_Menu_F2_E1[2] = 0;  //设置F2_E1十位
 472   3              else Two_Menu_F2_E1[2]++;
 473   3              break;
 474   3            case TWO_MENU_F2_E1_D4:
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 10  

 475   3              if (Two_Menu_F2_E1[3] == 9) Two_Menu_F2_E1[3] = 0;  //设置F2_E1个位
 476   3              else Two_Menu_F2_E1[3]++;
 477   3              break;
 478   3            case TWO_MENU_F2_E2_D1:
 479   3              if (Two_Menu_F2_E2[0] == 20) Two_Menu_F2_E2[0] = 0; //设置F2_E2千位
 480   3              else Two_Menu_F2_E2[0]++;
 481   3              break;
 482   3            case TWO_MENU_F2_E2_D2:
 483   3              if (Two_Menu_F2_E2[1] == 9) Two_Menu_F2_E2[1] = 0;  //设置F2_E2百位
 484   3              else Two_Menu_F2_E2[1]++;
 485   3              break;
 486   3            case TWO_MENU_F2_E2_D3:
 487   3              if (Two_Menu_F2_E2[2] == 9) Two_Menu_F2_E2[2] = 0;  //设置F2_E2十位
 488   3              else Two_Menu_F2_E2[2]++;
 489   3              break;
 490   3            case TWO_MENU_F2_E2_D4:
 491   3              if (Two_Menu_F2_E2[3] == 9) Two_Menu_F2_E2[3] = 0;  //设置F2_E2个位
 492   3              else Two_Menu_F2_E2[3]++;
 493   3              break;
 494   3            case TWO_MENU_F2_E3_D1:
 495   3              if (Two_Menu_F2_E3[0] == 20) Two_Menu_F2_E3[0] = 0; //设置F2_E3千位
 496   3              else Two_Menu_F2_E3[0]++;
 497   3              break;
 498   3            case TWO_MENU_F2_E3_D2:
 499   3              if (Two_Menu_F2_E3[1] == 9) Two_Menu_F2_E3[1] = 0;  //设置F2_E3百位
 500   3              else Two_Menu_F2_E3[1]++;
 501   3              break;
 502   3            case TWO_MENU_F2_E3_D3:
 503   3              if (Two_Menu_F2_E3[2] == 9) Two_Menu_F2_E3[2] = 0;  //设置F2_E3十位
 504   3              else Two_Menu_F2_E3[2]++;
 505   3              break;
 506   3            case TWO_MENU_F2_E3_D4:
 507   3              if (Two_Menu_F2_E3[3] == 9) Two_Menu_F2_E3[3] = 0;  //设置F2_E3个位
 508   3              else Two_Menu_F2_E3[3]++;
 509   3              break;
 510   3            case TWO_MENU_F2_E4_D1:
 511   3              if (Two_Menu_F2_E4[0] == 20) Two_Menu_F2_E4[0] = 0; //设置F2_E4千位
 512   3              else Two_Menu_F2_E4[0]++;
 513   3              break;
 514   3            case TWO_MENU_F2_E4_D2:
 515   3              if (Two_Menu_F2_E4[1] == 9) Two_Menu_F2_E4[1] = 0;  //设置F2_E4百位
 516   3              else Two_Menu_F2_E4[1]++;
 517   3              break;
 518   3            case TWO_MENU_F2_E4_D3:
 519   3              if (Two_Menu_F2_E4[2] == 9) Two_Menu_F2_E4[2] = 0;  //设置F2_E4十位
 520   3              else Two_Menu_F2_E4[2]++;
 521   3              break;
 522   3            case TWO_MENU_F2_E4_D4:
 523   3              if (Two_Menu_F2_E4[3] == 9) Two_Menu_F2_E4[3] = 0;  //设置F2_E4个位
 524   3              else Two_Menu_F2_E4[3]++;
 525   3            case TWO_MENU_F3_E1_SET:
 526   3              if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;  //排队显示 或者 循环显示
 527   3              else Two_Menu_F3_E1 = 1;
 528   3              break;
 529   3            case TWO_MENU_F3_E2_SET:
 530   3              if (Two_Menu_F3_E2 == 20) Two_Menu_F3_E2 = 1; //存储队列个数
 531   3              else Two_Menu_F3_E2 ++;
 532   3              break;
 533   3            case TWO_MENU_F4_SET:
 534   3              if (Two_Menu_F4_E1 == 99) Two_Menu_F4_E1 = 0; //销号时间设置
 535   3              else Two_Menu_F4_E1++;
 536   3              break;
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 11  

 537   3            case TWO_MENU_F5_SET:
 538   3              if (Two_Menu_F5_E1 == 99) Two_Menu_F5_E1 = 0; //循环时间设置
 539   3              else Two_Menu_F5_E1++;
 540   3              break;
 541   3            case TWO_MENU_F6_E1_SET:
 542   3              if (Two_Menu_F6_E1 == 5) Two_Menu_F6_E1 = 0;  //F6_E1语音选择
 543   3              else Two_Menu_F6_E1++;
 544   3              break;
 545   3            case TWO_MENU_F6_E2_SET:
 546   3              if (Two_Menu_F6_E2 == 9) Two_Menu_F6_E2 = 1;  //F6_E2语音报读次数
 547   3              else Two_Menu_F6_E2++;
 548   3              break;
 549   3            case TWO_MENU_F6_E3_SET:
 550   3              if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;  //F6_E3循环时候是否报读
 551   3              else Two_Menu_F6_E3 = 0;
 552   3              break;
 553   3            case TWO_MENU_F6_E4_SET:
 554   3              if (Two_Menu_F6_E4 == 9) Two_Menu_F6_E4 = 0;  //F6_E4音量大小调整
 555   3              else Two_Menu_F6_E4++;
 556   3              break;
 557   3            case TWO_MENU_F6_E5_SET:
 558   3              if (Two_Menu_F6_E5 == 7) Two_Menu_F6_E5 = 0;  //F6_E5屏幕亮度调整
 559   3              else Two_Menu_F6_E5++;
 560   3              break;
 561   3            case TWO_MENU_F7_E1_SET:
 562   3              if (Two_Menu_F7_E1 == 11) Two_Menu_F7_E1 = 0; //F7_E1原始规则 999*9
 563   3              else Two_Menu_F7_E1++;
 564   3              break;
 565   3            case TWO_MENU_F7_E2_SET:
 566   3              if (Two_Menu_F7_E2 == 11) Two_Menu_F7_E2 = 0; //F7_E2附加规则 9999*9
 567   3              else Two_Menu_F7_E2++;
 568   3              break;
 569   3            case TWO_MENU_F7_E3_SET:
 570   3              if (Two_Menu_F7_E3 == 11) Two_Menu_F7_E3 = 0; //F7_E3附加规则 999*99
 571   3              else Two_Menu_F7_E3++;
 572   3              break;
 573   3            case TWO_MENU_F7_E4_SET:
 574   3              if (Two_Menu_F7_E4 == 11) Two_Menu_F7_E4 = 0; //F7_E3附加规则 9999*99
 575   3              else Two_Menu_F7_E4++;
 576   3              break;
 577   3            case TWO_MENU_F8_E1_SET:
 578   3              if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;  //F8_E1单键位跟多键位切换
 579   3              else Two_Menu_F8_E1 = 1 ;
 580   3              break;
 581   3            case TWO_MENU_F8_E2_SET:
 582   3              if (Two_Menu_F8_E2 == 43) Two_Menu_F8_E2 = 0; //F8_E2键位设置
 583   3              else Two_Menu_F8_E2++;
 584   3              break;
 585   3            case DECODER_MENU:
 586   3              CycleUp();
 587   3              break;
 588   3      
 589   3              default:break;
 590   3            } 
 591   2            func_index = table[func_index].up; break;
 592   2          case KEY_DOWN:
 593   2            switch (func_index)
 594   2            {
 595   3            case TWO_MENU_F0_YEAR:
 596   3              if (time_buf1[1] == 0) time_buf1[1] = 99; //设置万年历 年
 597   3              else time_buf1[1]--;
 598   3              break;
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 12  

 599   3            case TWO_MENU_F0_MOUTH:
 600   3              if (time_buf1[2] == 1) time_buf1[2] = 12; //设置万年历 月
 601   3              else time_buf1[2]--;
 602   3              break;
 603   3            case TWO_MENU_F0_DAY:
 604   3              if (time_buf1[3] == 1) time_buf1[3] = 31; //设置万年历 日
 605   3              else time_buf1[3]--;
 606   3              break;
 607   3            case TWO_MENU_F0_WEEK:
 608   3              if (time_buf1[7] == 1) time_buf1[7] = 7;  //设置万年历 星期
 609   3              else time_buf1[7]--;
 610   3              break;
 611   3            case TWO_MENU_F0_HOUR:
 612   3              if (time_buf1[4] == 0) time_buf1[4] = 23; //设置万年历 小时
 613   3              else time_buf1[4]--;
 614   3              break;
 615   3            case TWO_MENU_F0_MINUTE:
 616   3              if (time_buf1[5] == 0) time_buf1[5] = 59; //设置万年历 分钟
 617   3              else time_buf1[5]--;
 618   3              break;
 619   3            case TWO_MENU_F1_E1_D1:
 620   3              if (Two_Menu_F1_E1[0] == 0) Two_Menu_F1_E1[0] = 20; //设置F1_E1千位
 621   3              else Two_Menu_F1_E1[0]--;
 622   3              break;
 623   3            case TWO_MENU_F1_E1_D2:
 624   3              if (Two_Menu_F1_E1[1] == 0) Two_Menu_F1_E1[1] = 9;  //设置F1_E1百位
 625   3              else Two_Menu_F1_E1[1]--;
 626   3              break;
 627   3            case TWO_MENU_F1_E1_D3:
 628   3              if (Two_Menu_F1_E1[2] == 0) Two_Menu_F1_E1[2] = 9;  //设置F1_E1十位
 629   3              else Two_Menu_F1_E1[2]--;
 630   3              break;
 631   3            case TWO_MENU_F1_E1_D4:
 632   3              if (Two_Menu_F1_E1[3] == 0) Two_Menu_F1_E1[3] = 9;  //设置F1_E1个位
 633   3              else Two_Menu_F1_E1[3]--;
 634   3              break;
 635   3            case TWO_MENU_F1_E2_D1:
 636   3              if (Two_Menu_F1_E2[0] == 0) Two_Menu_F1_E2[0] = 20; //设置F1_E2千位
 637   3              else Two_Menu_F1_E2[0]--;
 638   3              break;
 639   3            case TWO_MENU_F1_E2_D2:
 640   3              if (Two_Menu_F1_E2[1] == 0) Two_Menu_F1_E2[1] = 9;  //设置F1_E2百位
 641   3              else Two_Menu_F1_E2[1]--;
 642   3              break;
 643   3            case TWO_MENU_F1_E2_D3:
 644   3              if (Two_Menu_F1_E2[2] == 0) Two_Menu_F1_E2[2] = 9;  //设置F1_E2十位
 645   3              else Two_Menu_F1_E2[2]--;
 646   3              break;
 647   3            case TWO_MENU_F1_E2_D4:
 648   3              if (Two_Menu_F1_E2[3] == 0) Two_Menu_F1_E2[3] = 9;  //设置F1_E2个位
 649   3              else Two_Menu_F1_E2[3]--;
 650   3              break;
 651   3            case TWO_MENU_F1_E3_D1:
 652   3              if (Two_Menu_F1_E3[0] == 0) Two_Menu_F1_E3[0] = 20; //设置F1_E3千位
 653   3              else Two_Menu_F1_E3[0]--;
 654   3              break;
 655   3            case TWO_MENU_F1_E3_D2:
 656   3              if (Two_Menu_F1_E3[1] == 0) Two_Menu_F1_E3[1] = 9;  //设置F1_E3百位
 657   3              else Two_Menu_F1_E3[1]--;
 658   3              break;
 659   3            case TWO_MENU_F1_E3_D3:
 660   3              if (Two_Menu_F1_E3[2] == 0) Two_Menu_F1_E3[2] = 9;  //设置F1_E3十位
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 13  

 661   3              else Two_Menu_F1_E3[2]--;
 662   3              break;
 663   3            case TWO_MENU_F1_E3_D4:
 664   3              if (Two_Menu_F1_E3[3] == 0) Two_Menu_F1_E3[3] = 9;  //设置F1_E3个位
 665   3              else Two_Menu_F1_E3[3]--;
 666   3              break;
 667   3            case TWO_MENU_F1_E4_D1:
 668   3              if (Two_Menu_F1_E4[0] == 0) Two_Menu_F1_E4[0] = 20; //设置F1_E4千位
 669   3              else Two_Menu_F1_E4[0]--;
 670   3              break;
 671   3            case TWO_MENU_F1_E4_D2:
 672   3              if (Two_Menu_F1_E4[1] == 0) Two_Menu_F1_E4[1] = 9;  //设置F1_E4百位
 673   3              else Two_Menu_F1_E4[1]--;
 674   3              break;
 675   3            case TWO_MENU_F1_E4_D3:
 676   3              if (Two_Menu_F1_E4[2] == 0) Two_Menu_F1_E4[2] = 9;  //设置F1_E4十位
 677   3              else Two_Menu_F1_E4[2]--;
 678   3              break;
 679   3            case TWO_MENU_F1_E4_D4:
 680   3              if (Two_Menu_F1_E4[3] == 0) Two_Menu_F1_E4[3] = 9;  //设置F1_E4个位
 681   3              else Two_Menu_F1_E4[3]--;
 682   3              break;
 683   3            case TWO_MENU_F2_E1_D1:
 684   3              if (Two_Menu_F2_E1[0] == 0) Two_Menu_F2_E1[0] = 20; //设置F2_E1千位
 685   3              else Two_Menu_F2_E1[0]--;
 686   3              break;
 687   3            case TWO_MENU_F2_E1_D2:
 688   3              if (Two_Menu_F2_E1[1] == 0) Two_Menu_F2_E1[1] = 9;  //设置F2_E1百位
 689   3              else Two_Menu_F2_E1[1]--;
 690   3              break;
 691   3            case TWO_MENU_F2_E1_D3:
 692   3              if (Two_Menu_F2_E1[2] == 0) Two_Menu_F2_E1[2] = 9;  //设置F2_E1十位
 693   3              else Two_Menu_F2_E1[2]--;
 694   3              break;
 695   3            case TWO_MENU_F2_E1_D4:
 696   3              if (Two_Menu_F2_E1[3] == 0) Two_Menu_F2_E1[3] = 9;  //设置F2_E1个位
 697   3              else Two_Menu_F2_E1[3]--;
 698   3              break;
 699   3            case TWO_MENU_F2_E2_D1:
 700   3              if (Two_Menu_F2_E2[0] == 0) Two_Menu_F2_E2[0] = 20; //设置F2_E2千位
 701   3              else Two_Menu_F2_E2[0]--;
 702   3              break;
 703   3            case TWO_MENU_F2_E2_D2:
 704   3              if (Two_Menu_F2_E2[1] == 0) Two_Menu_F2_E2[1] = 9;  //设置F2_E2百位
 705   3              else Two_Menu_F2_E2[1]--;
 706   3              break;
 707   3            case TWO_MENU_F2_E2_D3:
 708   3              if (Two_Menu_F2_E2[2] == 0) Two_Menu_F2_E2[2] = 9;  //设置F2_E2十位
 709   3              else Two_Menu_F2_E2[2]--;
 710   3              break;
 711   3            case TWO_MENU_F2_E2_D4:
 712   3              if (Two_Menu_F2_E2[3] == 0) Two_Menu_F2_E2[3] = 9;  //设置F2_E2个位
 713   3              else Two_Menu_F2_E2[3]--;
 714   3              break;
 715   3            case TWO_MENU_F2_E3_D1:
 716   3              if (Two_Menu_F2_E3[0] == 0) Two_Menu_F2_E3[0] = 20; //设置F2_E3千位
 717   3              else Two_Menu_F2_E3[0]--;
 718   3              break;
 719   3            case TWO_MENU_F2_E3_D2:
 720   3              if (Two_Menu_F2_E3[1] == 0) Two_Menu_F2_E3[1] = 9;  //设置F2_E3百位
 721   3              else Two_Menu_F2_E3[1]--;
 722   3              break;
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 14  

 723   3            case TWO_MENU_F2_E3_D3:
 724   3              if (Two_Menu_F2_E3[2] == 0) Two_Menu_F2_E3[2] = 9;  //设置F2_E3十位
 725   3              else Two_Menu_F2_E3[2]--;
 726   3              break;
 727   3            case TWO_MENU_F2_E3_D4:
 728   3              if (Two_Menu_F2_E3[3] == 0) Two_Menu_F2_E3[3] = 9;  //设置F2_E3个位
 729   3              else Two_Menu_F2_E3[3]--;
 730   3              break;
 731   3            case TWO_MENU_F2_E4_D1:
 732   3              if (Two_Menu_F2_E4[0] == 0) Two_Menu_F2_E4[0] = 20; //设置F2_E4千位
 733   3              else Two_Menu_F2_E4[0]--;
 734   3              break;
 735   3            case TWO_MENU_F2_E4_D2:
 736   3              if (Two_Menu_F2_E4[1] == 0) Two_Menu_F2_E4[1] = 9;  //设置F2_E4百位
 737   3              else Two_Menu_F2_E4[1]--;
 738   3              break;
 739   3            case TWO_MENU_F2_E4_D3:
 740   3              if (Two_Menu_F2_E4[2] == 0) Two_Menu_F2_E4[2] = 9;  //设置F2_E4十位
 741   3              else Two_Menu_F2_E4[2]--;
 742   3              break;
 743   3            case TWO_MENU_F2_E4_D4:
 744   3              if (Two_Menu_F2_E4[3] == 0) Two_Menu_F2_E4[3] = 9;  //设置F2_E4个位
 745   3              else Two_Menu_F2_E4[3]--;
 746   3              break;
 747   3            case TWO_MENU_F3_E1_SET:
 748   3              if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;  //排队显示 或者 循环显示
 749   3              else Two_Menu_F3_E1 = 1;
 750   3              break;
 751   3            case TWO_MENU_F3_E2_SET:
 752   3              if (Two_Menu_F3_E2 == 1) Two_Menu_F3_E2 = 20; //存储队列个数
 753   3              else Two_Menu_F3_E2--;
 754   3              break;
 755   3            case TWO_MENU_F4_SET:
 756   3              if (Two_Menu_F4_E1 == 0) Two_Menu_F4_E1 = 99; //销号时间设置
 757   3              else Two_Menu_F4_E1--;
 758   3              break;
 759   3            case TWO_MENU_F5_SET:
 760   3              if (Two_Menu_F5_E1 == 0) Two_Menu_F5_E1 = 99; //销号时间设置
 761   3              else Two_Menu_F5_E1--;
 762   3              break;
 763   3            case TWO_MENU_F6_E1_SET:
 764   3              if (Two_Menu_F6_E1 == 0) Two_Menu_F6_E1 = 5;  //F6_E1额语音选择
 765   3              else Two_Menu_F6_E1--;
 766   3              break;
 767   3            case TWO_MENU_F6_E2_SET:
 768   3              if (Two_Menu_F6_E2 == 1) Two_Menu_F6_E2 = 9;  //F6_E2语音报读次数调整
 769   3              else Two_Menu_F6_E2--;
 770   3              break;
 771   3            case TWO_MENU_F6_E3_SET:
 772   3              if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;  //F6_E3循环时候是否报读
 773   3              else Two_Menu_F6_E3 = 0;
 774   3              break;
 775   3            case TWO_MENU_F6_E4_SET:
 776   3              if (Two_Menu_F6_E4 == 0) Two_Menu_F6_E4 = 9;  //F6_E4音量大小调整
 777   3              else Two_Menu_F6_E4--;
 778   3              break;
 779   3            case TWO_MENU_F6_E5_SET:
 780   3              if (Two_Menu_F6_E5 == 0) Two_Menu_F6_E5 = 7;  //F6_E5屏幕亮度调整
 781   3              else Two_Menu_F6_E5--;
 782   3              break;
 783   3            case TWO_MENU_F7_E1_SET:
 784   3              if (Two_Menu_F7_E1 == 0) Two_Menu_F7_E1 = 11; //F7_E1原始规则 999*9
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 15  

 785   3              else Two_Menu_F7_E1--;
 786   3              break;
 787   3            case TWO_MENU_F7_E2_SET:
 788   3              if (Two_Menu_F7_E2 == 0) Two_Menu_F7_E2 = 11; //F7_E2附加规则 9999*9
 789   3              else Two_Menu_F7_E2--;
 790   3              break;
 791   3            case TWO_MENU_F7_E3_SET:
 792   3              if (Two_Menu_F7_E3 == 0) Two_Menu_F7_E3 = 11; //F7_E3附加规则 999*99
 793   3              else Two_Menu_F7_E3--;
 794   3              break;
 795   3            case TWO_MENU_F7_E4_SET:
 796   3              if (Two_Menu_F7_E4 == 0) Two_Menu_F7_E4 = 11; //F7_E3附加规则 9999*99
 797   3              else Two_Menu_F7_E4--;
 798   3              break;
 799   3            case TWO_MENU_F8_E1_SET:
 800   3              if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;  //F8_E1单键位跟多键位切换
 801   3              else Two_Menu_F8_E1 = 1;
 802   3              break;
 803   3            case TWO_MENU_F8_E2_SET:
 804   3              if (Two_Menu_F8_E2 == 0) Two_Menu_F8_E2 = 43; //F8_E2键位设置
 805   3              else Two_Menu_F8_E2--;
 806   3              break;
 807   3            case DECODER_MENU:
 808   3              CycleDown();
 809   3              break;
 810   3      
 811   3              default:break;
 812   3            }
 813   2            func_index = table[func_index].down; break;
 814   2          default:break;
 815   2        }
 816   1        current_operation_index = table[func_index].index_operation;
 817   1        (*current_operation_index)();//执行当前操作函数
 818   1      }
 819          
 820          void delay10ms(void)   //误差 -0.054253472222us
 821          {
 822   1        unsigned char a, b, c;
 823   1        for (c = 4; c>0; c--)
 824   1        for (b = 52; b>0; b--)
 825   1        for (a = 220; a>0; a--);
 826   1        _nop_();  //if Keil,require use intrins.h
 827   1      }
 828          
 829          unsigned char return_func_index(void)
 830          {
 831   1        unsigned char func_index_temp = 0;
 832   1        func_index_temp = func_index;
 833   1        return func_index_temp;
 834   1      }
 835          
 836          void set_func_index(unsigned char temp)
 837          {
 838   1        func_index = temp;
 839   1      }
 840          
 841          unsigned char return_Two_Menu_F3_E1(void)
 842          {
 843   1        unsigned char temp = 0;
 844   1        temp = Two_Menu_F3_E1;
 845   1        return temp;
 846   1      }
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 16  

 847          
 848          unsigned char return_Two_Menu_F3_E2(void)
 849          {
 850   1        unsigned char temp = 0;
 851   1        temp = Two_Menu_F3_E2;
 852   1        return temp;
 853   1      }
 854          
 855          unsigned char return_Two_Menu_F4_E1(void)
 856          {
 857   1        unsigned char temp = 0;
 858   1        temp = Two_Menu_F4_E1;
 859   1        return temp;
 860   1      }
 861          
 862          unsigned char return_Two_Menu_F5_E1(void)
 863          {
 864   1        unsigned char temp = 0;
 865   1        temp = Two_Menu_F5_E1;
 866   1        return temp;
 867   1      }
 868          
 869          unsigned char return_Two_Menu_F6_E1(void)
 870          {
 871   1        unsigned char temp = 0;
 872   1        temp = Two_Menu_F6_E1;
 873   1        return temp;
 874   1      }
 875          
 876          unsigned char return_Two_Menu_F6_E2(void)
 877          {
 878   1        unsigned char temp = 0;
 879   1        temp = Two_Menu_F6_E2;
 880   1        return temp;
 881   1      }
 882          
 883          unsigned char return_Two_Menu_F6_E3(void)
 884          {
 885   1        unsigned char temp = 0;
 886   1        temp = Two_Menu_F6_E3;
 887   1        return temp;
 888   1      }
 889          
 890          unsigned char return_Two_Menu_F6_E4(void)
 891          {
 892   1        unsigned char temp = 0;
 893   1        temp = Two_Menu_F6_E4;
 894   1        return temp;
 895   1      }
 896          
 897          unsigned char return_Two_Menu_F6_E5(void)
 898          {
 899   1        unsigned char temp = 0;
 900   1        temp = Two_Menu_F6_E5;
 901   1        return temp;
 902   1      }
 903          
 904          unsigned char return_Two_Menu_F7_E1(void)
 905          {
 906   1        unsigned char temp = 0;
 907   1        temp = Two_Menu_F7_E1;
 908   1        return temp;
C51 COMPILER V9.00   KEY                                                                   09/24/2015 16:36:24 PAGE 17  

 909   1      }
 910          
 911          unsigned char return_Two_Menu_F7_E2(void)
 912          {
 913   1        unsigned char temp = 0;
 914   1        temp = Two_Menu_F7_E2;
 915   1        return temp;
 916   1      }
 917          
 918          unsigned char return_Two_Menu_F7_E3(void)
 919          {
 920   1        unsigned char temp = 0;
 921   1        temp = Two_Menu_F7_E3;
 922   1        return temp;
 923   1      }
 924          
 925          unsigned char return_Two_Menu_F7_E4(void)
 926          {
 927   1        unsigned char temp = 0;
 928   1        temp = Two_Menu_F7_E4;
 929   1        return temp;
 930   1      }
 931          
 932          unsigned char return_Two_Menu_F8_E1(void)
 933          {
 934   1        unsigned char temp = 0;
 935   1        temp = Two_Menu_F8_E1;
 936   1        return temp;
 937   1      }
 938          
 939          unsigned char return_Two_Menu_F8_E2(void)
 940          {
 941   1        unsigned char temp = 0;
 942   1        temp = Two_Menu_F8_E2;
 943   1        return temp;
 944   1      }
 945          
 946          unsigned char return_sound_table(void)
 947          {
 948   1        unsigned char temp = 0;
 949   1        temp = sound_table;
 950   1        return temp;
 951   1      }
 952          
 953          void set_sound_table(unsigned char temp)
 954          {
 955   1        sound_table = temp;
 956   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2935    ----
   CONSTANT SIZE    =    818    ----
   XDATA SIZE       =     55       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
