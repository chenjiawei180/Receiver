C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\key.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\k
                    -ey.lst) TABS(2) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "usart.h"
   3          #include "tm1629.h"
   4          #include "menu.h"
   5          #include "timer.h"
   6          #include "ds1302.h"
   7          #include "at24c256.h"
   8          
   9          unsigned char func_index = 0; //多级菜单索引变量
  10          void(*current_operation_index)();// 多级菜单函数指针
  11          
  12          unsigned char Two_Menu_F1_E1[4] = { 0, 0, 0, 1 }; //F1_E1
  13          unsigned char Two_Menu_F1_E2[4] = { 0, 0, 0, 1 }; //F1_E2
  14          unsigned char Two_Menu_F1_E3[4] = { 0, 0, 0, 1 }; //F1_E3
  15          unsigned char Two_Menu_F1_E4[4] = { 0, 0, 0, 1 }; //F1_E4
  16          unsigned char Two_Menu_F2_E1[4] = { 0, 0, 0, 1 }; //F2_E1
  17          unsigned char Two_Menu_F2_E2[4] = { 0, 0, 0, 1 }; //F2_E2
  18          unsigned char Two_Menu_F2_E3[4] = { 0, 0, 0, 1 }; //F2_E3
  19          unsigned char Two_Menu_F2_E4[4] = { 0, 0, 0, 1 }; //F2_E4
  20          
  21          unsigned char Two_Menu_F3_E1 = 1; //即时模式或者排队显示
  22          unsigned char Two_Menu_F3_E2 = 12; //呼叫时候存储数量
  23          
  24          unsigned char Two_Menu_F4_E1 = 0; //销号时间
  25          unsigned char Two_Menu_F5_E1 = 0; //循环间隔时间
  26          
  27          unsigned char Two_Menu_F6_E1 = 0; //简单报读
  28          unsigned char Two_Menu_F6_E2 = 1; //语音报读次数
  29          unsigned char Two_Menu_F6_E3 = 0; //循环时候是否报读
  30          unsigned char Two_Menu_F6_E4 = 0; //音量大小调整
  31          unsigned char Two_Menu_F6_E5 = 0; //显示屏LED亮度调整
  32          
  33          unsigned char Two_Menu_F7_E1 = 0; // E1默认键盘规则 999*9
  34          unsigned char Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
  35          unsigned char Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
  36          unsigned char Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
  37          
  38          unsigned char Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
  39          unsigned char Two_Menu_F8_E2 = 0; // 键位设置
  40          
  41          unsigned char Two_Menu_Fb_E1 = 0; // 设置主机有没有销号功能
  42          unsigned char Two_Menu_FC_E1 = 0; // 设置万年历待机与----待机的切换
  43          unsigned char Two_Menu_Fd_E1 = 0; // E1 E2 E3 E4 E5 E6
  44          
  45          key_table code table[100] =
  46          { // 目标索引       上        下          确认     退出         函数
  47            { MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, (*fun0) }, //待机
  48          
  49            { ONE_MENU_F0, ONE_MENU_F1, ONE_MENU_Fd, TWO_MENU_F0_YEAR , MENU_STANDBY, (*fun1) }, //F0-F9
  50            { ONE_MENU_F1, ONE_MENU_F2, ONE_MENU_F0, TWO_MENU_F1_E1   , MENU_STANDBY, (*fun2) },
  51            { ONE_MENU_F2, ONE_MENU_F3, ONE_MENU_F1, TWO_MENU_F2_E1   , MENU_STANDBY, (*fun3) },
  52            { ONE_MENU_F3, ONE_MENU_F4, ONE_MENU_F2, TWO_MENU_F3_E1   , MENU_STANDBY, (*fun4) },
  53            { ONE_MENU_F4, ONE_MENU_F5, ONE_MENU_F3, TWO_MENU_F4_SET  , MENU_STANDBY, (*fun5) },
  54            { ONE_MENU_F5, ONE_MENU_F6, ONE_MENU_F4, TWO_MENU_F5_SET  , MENU_STANDBY, (*fun6) },
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 2   

  55            { ONE_MENU_F6, ONE_MENU_F7, ONE_MENU_F5, TWO_MENU_F6_E1   , MENU_STANDBY, (*fun7) },
  56            { ONE_MENU_F7, ONE_MENU_F8, ONE_MENU_F6, TWO_MENU_F7_E1   , MENU_STANDBY, (*fun8) },
  57            { ONE_MENU_F8, ONE_MENU_F9, ONE_MENU_F7, TWO_MENU_F8_E1   , MENU_STANDBY, (*fun9) },
  58            { ONE_MENU_F9, ONE_MENU_FA, ONE_MENU_F8, TWO_MENU_F9_E1   , MENU_STANDBY, (*fun10) },
  59            { ONE_MENU_FA, ONE_MENU_Fb, ONE_MENU_F9, TWO_MENU_FA_SET  , MENU_STANDBY, (*fun11) }, //FA
  60            { ONE_MENU_Fb, ONE_MENU_FC, ONE_MENU_FA, TWO_MENU_Fb_SET  , MENU_STANDBY, (*fun12) }, //Fb
  61            { ONE_MENU_FC, ONE_MENU_Fd, ONE_MENU_Fb, TWO_MENU_FC_SET  , MENU_STANDBY, (*fun13) }, //FC
  62            { ONE_MENU_Fd, ONE_MENU_F0, ONE_MENU_FC, TWO_MENU_Fd_SET  , MENU_STANDBY, (*fun14) }, //Fd
  63          
  64            { TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_MOUTH , ONE_MENU_F0, (*fun15) }
             -, //万年历 年
  65            { TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_DAY   , ONE_MENU_F0, (*fun16) }
             -, //万年历 月
  66            { TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_WEEK  , ONE_MENU_F0, (*fun17) }
             -, //万年历 日
  67            { TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_HOUR  , ONE_MENU_F0, (*fun18) }
             -, //万年历 周
  68            { TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_MINUTE, ONE_MENU_F0, (*fun19) }
             -, //万年历 小时
  69            { TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_YEAR  , ONE_MENU_F0, (*fun20) }
             -, //万年历 分钟
  70          
  71            { TWO_MENU_F1_E1, TWO_MENU_F1_E2, TWO_MENU_F1_E4, TWO_MENU_F1_E1_D4, ONE_MENU_F1, (*fun21) }, //F1子菜单E
             -1
  72            { TWO_MENU_F1_E2, TWO_MENU_F1_E3, TWO_MENU_F1_E1, TWO_MENU_F1_E2_D4, ONE_MENU_F1, (*fun22) }, //F1子菜单E
             -2
  73            { TWO_MENU_F1_E3, TWO_MENU_F1_E4, TWO_MENU_F1_E2, TWO_MENU_F1_E3_D4, ONE_MENU_F1, (*fun23) }, //F1子菜单E
             -3
  74            { TWO_MENU_F1_E4, TWO_MENU_F1_E1, TWO_MENU_F1_E3, TWO_MENU_F1_E4_D4, ONE_MENU_F1, (*fun24) }, //F1子菜单E
             -4
  75          
  76            { TWO_MENU_F2_E1, TWO_MENU_F2_E2, TWO_MENU_F2_E4, TWO_MENU_F2_E1_D4, ONE_MENU_F2, (*fun25) }, //F2子菜单E
             -1
  77            { TWO_MENU_F2_E2, TWO_MENU_F2_E3, TWO_MENU_F2_E1, TWO_MENU_F2_E2_D4, ONE_MENU_F2, (*fun26) }, //F2子菜单E
             -2
  78            { TWO_MENU_F2_E3, TWO_MENU_F2_E4, TWO_MENU_F2_E2, TWO_MENU_F2_E3_D4, ONE_MENU_F2, (*fun27) }, //F2子菜单E
             -3
  79            { TWO_MENU_F2_E4, TWO_MENU_F2_E1, TWO_MENU_F2_E3, TWO_MENU_F2_E4_D4, ONE_MENU_F2, (*fun28) }, //F2子菜单E
             -4
  80          
  81            { TWO_MENU_F3_E1, TWO_MENU_F3_E2, TWO_MENU_F3_E2, TWO_MENU_F3_E1_SET, ONE_MENU_F3, (*fun29) }, //F3子菜单
             -E1
  82            { TWO_MENU_F3_E2, TWO_MENU_F3_E1, TWO_MENU_F3_E1, TWO_MENU_F3_E2_SET, ONE_MENU_F3, (*fun30) }, //F3子菜单
             -E2
  83          
  84            { TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, ONE_MENU_F4, (*fun31) }, //F4子菜单
  85            { TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, ONE_MENU_F5, (*fun32) }, //F5子菜单
  86          
  87            { TWO_MENU_F6_E1, TWO_MENU_F6_E2, TWO_MENU_F6_E5, TWO_MENU_F6_E1_SET, ONE_MENU_F6, (*fun33) }, //F6子菜单
             -E1
  88            { TWO_MENU_F6_E2, TWO_MENU_F6_E3, TWO_MENU_F6_E1, TWO_MENU_F6_E2_SET, ONE_MENU_F6, (*fun34) }, //F6子菜单
             -E2
  89            { TWO_MENU_F6_E3, TWO_MENU_F6_E4, TWO_MENU_F6_E2, TWO_MENU_F6_E3_SET, ONE_MENU_F6, (*fun35) }, //F6子菜单
             -E3
  90            { TWO_MENU_F6_E4, TWO_MENU_F6_E5, TWO_MENU_F6_E3, TWO_MENU_F6_E4_SET, ONE_MENU_F6, (*fun36) }, //F6子菜单
             -E4
  91            { TWO_MENU_F6_E5, TWO_MENU_F6_E1, TWO_MENU_F6_E4, TWO_MENU_F6_E5_SET, ONE_MENU_F6, (*fun37) }, //F6子菜单
             -E5
  92          
  93            { TWO_MENU_F7_E1, TWO_MENU_F7_E2, TWO_MENU_F7_E4, TWO_MENU_F7_E1_SET, ONE_MENU_F7, (*fun38) }, //F7子菜单
             -E1
  94            { TWO_MENU_F7_E2, TWO_MENU_F7_E3, TWO_MENU_F7_E1, TWO_MENU_F7_E2_SET, ONE_MENU_F7, (*fun39) }, //F7子菜单
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 3   

             -E2
  95            { TWO_MENU_F7_E3, TWO_MENU_F7_E4, TWO_MENU_F7_E2, TWO_MENU_F7_E3_SET, ONE_MENU_F7, (*fun40) }, //F7子菜单
             -E3
  96            { TWO_MENU_F7_E4, TWO_MENU_F7_E1, TWO_MENU_F7_E3, TWO_MENU_F7_E4_SET, ONE_MENU_F7, (*fun41) }, //F7子菜单
             -E4  
  97          
  98            { TWO_MENU_F8_E1, TWO_MENU_F8_E2, TWO_MENU_F8_E2, TWO_MENU_F8_E1_SET, ONE_MENU_F8, (*fun42) }, //F8子菜单
             -E1
  99            { TWO_MENU_F8_E2, TWO_MENU_F8_E1, TWO_MENU_F8_E1, TWO_MENU_F8_E2_SET, ONE_MENU_F8, (*fun43) }, //F8子菜单
             -E2
 100          
 101            { TWO_MENU_F9_E1, TWO_MENU_F9_E2, TWO_MENU_F9_E2, 0, ONE_MENU_F9, (*fun44) }, //F9子菜单E1
 102            { TWO_MENU_F9_E2, TWO_MENU_F9_E1, TWO_MENU_F9_E1, 0, ONE_MENU_F9, (*fun45) }, //F9子菜单E2
 103          
 104            { TWO_MENU_FA_SET, TWO_MENU_FA_SET, TWO_MENU_FA_SET, 0, ONE_MENU_FA, (*fun46) }, //FA子菜单
 105            { TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, 0, ONE_MENU_Fb, (*fun47) }, //Fb子菜单
 106            { TWO_MENU_FC_SET, TWO_MENU_FC_SET, TWO_MENU_FC_SET, 0, ONE_MENU_FC, (*fun48) }, //FC子菜单
 107            { TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, 0, ONE_MENU_Fd, (*fun49) }, //Fd子菜单
 108          
 109            { TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1, (*fun50) },
             - //F1_E1注册呼叫器
 110            { TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1, (*fun51) },
             - //F1_E1注册呼叫器
 111            { TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1, (*fun52) },
             - //F1_E1注册呼叫器
 112            { TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1, (*fun53) },
             - //F1_E1注册呼叫器
 113          
 114            { TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2, (*fun54) },
             - //F1_E2注册管理器
 115            { TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2, (*fun55) },
             - //F1_E2注册管理器
 116            { TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2, (*fun56) },
             - //F1_E2注册管理器
 117            { TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2, (*fun57) },
             - //F1_E2注册管理器
 118          
 119            { TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3, (*fun58) },
             - //F1_E3注册报警器
 120            { TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3, (*fun59) },
             - //F1_E3注册报警器
 121            { TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3, (*fun60) },
             - //F1_E3注册报警器
 122            { TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3, (*fun61) },
             - //F1_E3注册报警器
 123          
 124            { TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4, (*fun62) },
             - //F1_E3注册取消器
 125            { TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4, (*fun63) },
             - //F1_E3注册取消器
 126            { TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4, (*fun64) },
             - //F1_E3注册取消器
 127            { TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4, (*fun65) },
             - //F1_E3注册取消器
 128          
 129            { TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1, (*fun66) },
             - //F2_E1删除呼叫器
 130            { TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1, (*fun67) },
             - //F2_E1删除呼叫器
 131            { TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1, (*fun68) },
             - //F2_E1删除呼叫器
 132            { TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1, (*fun69) },
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 4   

             - //F2_E1删除呼叫器
 133          
 134            { TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2, (*fun70) },
             - //F2_E2删除管理器
 135            { TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2, (*fun71) },
             - //F2_E2删除管理器
 136            { TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2, (*fun72) },
             - //F2_E2删除管理器
 137            { TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2, (*fun73) },
             - //F2_E2删除管理器
 138          
 139            { TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3, (*fun74) },
             - //F2_E3删除报警器
 140            { TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3, (*fun75) },
             - //F2_E3删除报警器
 141            { TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3, (*fun76) },
             - //F2_E3删除报警器
 142            { TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3, (*fun77) },
             - //F2_E3删除报警器
 143          
 144            { TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4, (*fun78) },
             - //F2_E4删除取消器
 145            { TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4, (*fun79) },
             - //F2_E4删除取消器
 146            { TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4, (*fun80) },
             - //F2_E4删除取消器
 147            { TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4, (*fun81) },
             - //F2_E4删除取消器
 148          
 149            { TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1, (*fun82
             -) }, //F3_E1设置排队显示或者循环显示
 150            { TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2, (*fun83
             -) }, //F3_E2设置队列个数
 151          
 152            { TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1, (*fun84
             -) }, //F6_E1语音选择
 153            { TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2, (*fun85
             -) }, //F6_E2语音报读次数
 154            { TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3, (*fun86
             -) }, //F6_E3循环时候是否报读
 155            { TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4, (*fun87
             -) }, //F6_E4音量大小调整
 156            { TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5, (*fun88
             -) }, //F6_E5屏幕亮度调整
 157          
 158            { TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1, (*fun89
             -) }, //F7_E1 999*9
 159            { TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2, (*fun90
             -) }, //F7_E2 9999*9
 160            { TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3, (*fun91
             -) }, //F7_E3 999*99
 161            { TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4, (*fun92
             -) }, //F7_E4 9999*99
 162          
 163            { TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1, (*fun93
             -) }, //F8_E1 单键位跟多键位切换
 164            { TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2, (*fun94
             -) }, //F8_E2 键位设置
 165          
 166            { DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, (*fun95)},
 167          };
 168          
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 5   

 169          unsigned int KeyScan(void)  //Keyboard scan function
 170          {
 171   1        unsigned int Val = 0;
 172   1        HKeyPort |= 0x1f;//Row height
 173   1        LKeyPort &= 0x07;
 174   1        if ((HKeyPort & 0x1f) != 0x1f)//Press button
 175   1        {
 176   2          delay10ms();  //Remove jitter
 177   2          if ((HKeyPort & 0x1f) != 0x1f)   //Press button
 178   2          {
 179   3            clear_return_standby_time();
 180   3      
 181   3            HKeyPort |= 0x1f; //检测第一列
 182   3            LKeyPort |= 0xf8;
 183   3            LKeyPort &= 0x7f;
 184   3            if ((HKeyPort & 0x1f) != 0x1f)
 185   3            {
 186   4              //  return_standby_time=0;
 187   4              //  sound_table=1;
 188   4              Val = HKeyPort & 0x1f;
 189   4              Val <<= 8;
 190   4              Val += (LKeyPort & 0xf8);
 191   4              if (Val == 0x1e78)
 192   4              {
 193   5                clear_main_press_time();  //清除菜单键按下的时间计算变量
 194   5                set_main_press_time_table(1); //设置相应的标志位，开始计算时间
 195   5              }
 196   4              while ((HKeyPort & 0x1f) != 0x1f);
 197   4              delay10ms();
 198   4              while ((HKeyPort & 0x1f) != 0x1f);
 199   4              set_main_press_time_table(0);//按键释放，清除相应的标志位
 200   4              set_logout_cycle_table(0);//循环跟销号重新计数
 201   4              return Val;
 202   4            }
 203   3          }
 204   2        }
 205   1        return 0x0fff;
 206   1      }
 207          
 208          unsigned char KeyDecoder(void)
 209          {
 210   1        unsigned int key_val = 0;
 211   1      
 212   1        key_val = KeyScan();
 213   1      #if 0   
                if (key_val == 0x0fff) /*do not key press*/
                {
                  /*sjz 有注册管理器标志*/
                  if (register_manager == 1)
                  {
              
                    if (func_index == FUNC_STANDBY)
                    {
                      if ((old2_RF_RECE_REG[2] & 0x0f) == 0x01)
                      {
                        accumulate_decoder++;
                      }
                      else
                      {
                        accumulate_decoder = 0;
                      }
                      if (accumulate_decoder>10)
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 6   

                      {
                        accumulate_50ms = 20;
                        accumulate_decoder = 0;
                      }
                    }
                    register_manager = 0;
                    switch (old2_RF_RECE_REG[2] & 0x0f)
                    {
                    case 0x01:key_val = 0x1778; break;
                    case 0x02:key_val = 0x1b78; break;
                    case 0x04:key_val = 0x1d78; break;
                    case 0x08:key_val = 0x1e78; break;
                    default:break;
                    }
                  }
                }
              #endif   
 248   1      
 249   1      #ifdef DEBUG
 250   1        if (key_val != 0x0fff)
 251   1        uart_printf("key_val is %x .\r\n", key_val); //测试按键键值
 252   1      #endif
 253   1        switch (key_val)
 254   1        {
 255   2        case 0x1778:return KEY_RETURN; break;//1 按下相应的键显示相对应的码值
 256   2        case 0x1d78:return KEY_DOWN; break;//2  
 257   2        case 0x1b78:return KEY_UP; break;//4
 258   2        case 0x1e78:return KEY_FUNC; break;//5 按下相应的键显示相对应的码值
 259   2        default:return 0xff; break;
 260   2        }
 261   1      }
 262          
 263          void KeyProcess(void)
 264          {
 265   1        unsigned char key_value = 0, main_press_time_temp = 0;
 266   1        key_value = KeyDecoder();
 267   1        switch (key_value)
 268   1        {
 269   2          case KEY_FUNC:
 270   2            if (func_index == MENU_STANDBY || func_index == DECODER_MENU)  //如果索引==0  则要1秒以上进入菜单
 271   2            {
 272   3              main_press_time_temp = return_main_press_time();
 273   3              if (main_press_time_temp >= 20)
 274   3              {
 275   4                func_index = ONE_MENU_F0;
 276   4                clear_main_press_time();
 277   4              }
 278   3            }
 279   2            else if (func_index == TWO_MENU_F2_E1_D1 || func_index == TWO_MENU_F2_E1_D2 || func_index == TWO_MENU_F
             -2_E1_D3 || func_index == TWO_MENU_F2_E1_D4 )
 280   2            {
 281   3              main_press_time_temp = return_main_press_time();
 282   3              if (main_press_time_temp >= 10)
 283   3              {
 284   4                delete_call_function(Two_Menu_F2_E1);
 285   4                delay10ms();
 286   4                clear_main_press_time();
 287   4      //          if (sound_table == 1)
 288   4      //          {
 289   4      //#if SOUND
 290   4      //            GD5800_select_chapter(SETSUCCESS_POSITION);
 291   4      //#endif
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 7   

 292   4      //            sound_table = 0;
 293   4      //          }
 294   4              }
 295   3              else
 296   3                func_index = table[func_index].enter;
 297   3            }
 298   2            else if (func_index == TWO_MENU_F2_E2_D1 || func_index == TWO_MENU_F2_E2_D2 || func_index == TWO_MENU_F
             -2_E2_D3 || func_index == TWO_MENU_F2_E2_D4)
 299   2            {
 300   3              main_press_time_temp = return_main_press_time();
 301   3              if (main_press_time_temp >= 10)
 302   3              {
 303   4                delete_host_function(Two_Menu_F2_E2);
 304   4                delay10ms();
 305   4                clear_main_press_time();
 306   4                //          if (sound_table == 1)
 307   4                //          {
 308   4                //#if SOUND
 309   4                //            GD5800_select_chapter(SETSUCCESS_POSITION);
 310   4                //#endif
 311   4                //            sound_table = 0;
 312   4                //          }
 313   4              }
 314   3              else
 315   3                func_index = table[func_index].enter;
 316   3            }
 317   2            else if (func_index == TWO_MENU_F2_E3_D1 || func_index == TWO_MENU_F2_E3_D2 || func_index == TWO_MENU_F
             -2_E3_D3 || func_index == TWO_MENU_F2_E3_D4)
 318   2            {
 319   3              main_press_time_temp = return_main_press_time();
 320   3              if (main_press_time_temp >= 10)
 321   3              {
 322   4                delete_alarm_function(Two_Menu_F2_E3);
 323   4                delay10ms();
 324   4                clear_main_press_time();
 325   4                //          if (sound_table == 1)
 326   4                //          {
 327   4                //#if SOUND
 328   4                //            GD5800_select_chapter(SETSUCCESS_POSITION);
 329   4                //#endif
 330   4                //            sound_table = 0;
 331   4                //          }
 332   4              }
 333   3              else
 334   3                func_index = table[func_index].enter;
 335   3            }
 336   2            else if (func_index == TWO_MENU_F2_E4_D1 || func_index == TWO_MENU_F2_E4_D2 || func_index == TWO_MENU_F
             -2_E4_D3 || func_index == TWO_MENU_F2_E4_D4)
 337   2            {
 338   3              main_press_time_temp = return_main_press_time();
 339   3              if (main_press_time_temp >= 10)
 340   3              {
 341   4                delete_cancel_function(Two_Menu_F2_E4);
 342   4                delay10ms();
 343   4                clear_main_press_time();
 344   4                //          if (sound_table == 1)
 345   4                //          {
 346   4                //#if SOUND
 347   4                //            GD5800_select_chapter(SETSUCCESS_POSITION);
 348   4                //#endif
 349   4                //            sound_table = 0;
 350   4                //          }
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 8   

 351   4              }
 352   3              else
 353   3                func_index = table[func_index].enter;
 354   3            }
 355   2            else
 356   2            {
 357   3              func_index = table[func_index].enter;
 358   3              clear_main_press_time();
 359   3            }
 360   2             break;
 361   2          case KEY_RETURN:  
 362   2            if (func_index == DECODER_MENU)
 363   2            {
 364   3              Logout();
 365   3            }
 366   2            else
 367   2            func_index = table[func_index].esc; 
 368   2            break;
 369   2          case KEY_UP:
 370   2            switch (func_index)
 371   2            {
 372   3            case TWO_MENU_F0_YEAR: 
 373   3              if (time_buf1[1] == 99) time_buf1[1] = 0; //设置万年历 年
 374   3                         else time_buf1[1]++;
 375   3              break;
 376   3            case TWO_MENU_F0_MOUTH:
 377   3              if (time_buf1[2] == 12) time_buf1[2] = 1; //设置万年历 月
 378   3              else time_buf1[2]++;
 379   3              break;
 380   3            case TWO_MENU_F0_DAY:
 381   3              if (time_buf1[3] == 31) time_buf1[3] = 1; //设置万年历 日
 382   3              else time_buf1[3]++;
 383   3              break;
 384   3            case TWO_MENU_F0_WEEK:
 385   3              if (time_buf1[7] == 7) time_buf1[7] = 1;  //设置万年历 星期
 386   3              else time_buf1[7]++;
 387   3              break;
 388   3            case TWO_MENU_F0_HOUR:
 389   3              if (time_buf1[4] == 23) time_buf1[4] = 0; //设置万年历 小时
 390   3              else time_buf1[4]++;
 391   3              break;
 392   3            case TWO_MENU_F0_MINUTE:
 393   3              if (time_buf1[5] == 59) time_buf1[5] = 0; //设置万年历 分钟
 394   3              else time_buf1[5]++;
 395   3              break;
 396   3            case TWO_MENU_F1_E1_D1:
 397   3              if (Two_Menu_F1_E1[0] == 20 ) Two_Menu_F1_E1[0] = 0;  //设置F1_E1千位
 398   3              else Two_Menu_F1_E1[0]++;
 399   3              break;
 400   3            case TWO_MENU_F1_E1_D2:
 401   3              if (Two_Menu_F1_E1[1] == 9) Two_Menu_F1_E1[1] = 0;  //设置F1_E1百位
 402   3              else Two_Menu_F1_E1[1]++;
 403   3              break;
 404   3            case TWO_MENU_F1_E1_D3:
 405   3              if (Two_Menu_F1_E1[2] == 9) Two_Menu_F1_E1[2] = 0;  //设置F1_E1十位
 406   3              else Two_Menu_F1_E1[2]++;
 407   3              break;
 408   3            case TWO_MENU_F1_E1_D4:
 409   3              if (Two_Menu_F1_E1[3] == 9) Two_Menu_F1_E1[3] = 0;  //设置F1_E1个位
 410   3              else Two_Menu_F1_E1[3]++;
 411   3              break;
 412   3            case TWO_MENU_F1_E2_D1:
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 9   

 413   3              if (Two_Menu_F1_E2[0] == 20) Two_Menu_F1_E2[0] = 0; //设置F1_E2千位
 414   3              else Two_Menu_F1_E2[0]++;
 415   3              break;
 416   3            case TWO_MENU_F1_E2_D2:
 417   3              if (Two_Menu_F1_E2[1] == 9) Two_Menu_F1_E2[1] = 0;  //设置F1_E2百位
 418   3              else Two_Menu_F1_E2[1]++;
 419   3              break;
 420   3            case TWO_MENU_F1_E2_D3:
 421   3              if (Two_Menu_F1_E2[2] == 9) Two_Menu_F1_E2[2] = 0;  //设置F1_E2十位
 422   3              else Two_Menu_F1_E2[2]++;
 423   3              break;
 424   3            case TWO_MENU_F1_E2_D4:
 425   3              if (Two_Menu_F1_E2[3] == 9) Two_Menu_F1_E2[3] = 0;  //设置F1_E2个位
 426   3              else Two_Menu_F1_E2[3]++;
 427   3              break;
 428   3            case TWO_MENU_F1_E3_D1:
 429   3              if (Two_Menu_F1_E3[0] == 20) Two_Menu_F1_E3[0] = 0; //设置F1_E3千位
 430   3              else Two_Menu_F1_E3[0]++;
 431   3              break;
 432   3            case TWO_MENU_F1_E3_D2:
 433   3              if (Two_Menu_F1_E3[1] == 9) Two_Menu_F1_E3[1] = 0;  //设置F1_E3百位
 434   3              else Two_Menu_F1_E3[1]++;
 435   3              break;
 436   3            case TWO_MENU_F1_E3_D3:
 437   3              if (Two_Menu_F1_E3[2] == 9) Two_Menu_F1_E3[2] = 0;  //设置F1_E3十位
 438   3              else Two_Menu_F1_E3[2]++;
 439   3              break;
 440   3            case TWO_MENU_F1_E3_D4:
 441   3              if (Two_Menu_F1_E3[3] == 9) Two_Menu_F1_E3[3] = 0;  //设置F1_E3个位
 442   3              else Two_Menu_F1_E3[3]++;
 443   3              break;
 444   3            case TWO_MENU_F1_E4_D1:
 445   3              if (Two_Menu_F1_E4[0] == 20) Two_Menu_F1_E4[0] = 0; //设置F1_E4千位
 446   3              else Two_Menu_F1_E4[0]++;
 447   3              break;
 448   3            case TWO_MENU_F1_E4_D2:
 449   3              if (Two_Menu_F1_E4[1] == 9) Two_Menu_F1_E4[1] = 0;  //设置F1_E4百位
 450   3              else Two_Menu_F1_E4[1]++;
 451   3              break;
 452   3            case TWO_MENU_F1_E4_D3:
 453   3              if (Two_Menu_F1_E4[2] == 9) Two_Menu_F1_E4[2] = 0;  //设置F1_E4十位
 454   3              else Two_Menu_F1_E4[2]++;
 455   3              break;
 456   3            case TWO_MENU_F1_E4_D4:
 457   3              if (Two_Menu_F1_E4[3] == 9) Two_Menu_F1_E4[3] = 0;  //设置F1_E4个位
 458   3              else Two_Menu_F1_E4[3]++;
 459   3              break;
 460   3            case TWO_MENU_F2_E1_D1:
 461   3              if (Two_Menu_F2_E1[0] == 20) Two_Menu_F2_E1[0] = 0; //设置F2_E1千位
 462   3              else Two_Menu_F2_E1[0]++;
 463   3              break;
 464   3            case TWO_MENU_F2_E1_D2:
 465   3              if (Two_Menu_F2_E1[1] == 9) Two_Menu_F2_E1[1] = 0;  //设置F2_E1百位
 466   3              else Two_Menu_F2_E1[1]++;
 467   3              break;
 468   3            case TWO_MENU_F2_E1_D3:
 469   3              if (Two_Menu_F2_E1[2] == 9) Two_Menu_F2_E1[2] = 0;  //设置F2_E1十位
 470   3              else Two_Menu_F2_E1[2]++;
 471   3              break;
 472   3            case TWO_MENU_F2_E1_D4:
 473   3              if (Two_Menu_F2_E1[3] == 9) Two_Menu_F2_E1[3] = 0;  //设置F2_E1个位
 474   3              else Two_Menu_F2_E1[3]++;
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 10  

 475   3              break;
 476   3            case TWO_MENU_F2_E2_D1:
 477   3              if (Two_Menu_F2_E2[0] == 20) Two_Menu_F2_E2[0] = 0; //设置F2_E2千位
 478   3              else Two_Menu_F2_E2[0]++;
 479   3              break;
 480   3            case TWO_MENU_F2_E2_D2:
 481   3              if (Two_Menu_F2_E2[1] == 9) Two_Menu_F2_E2[1] = 0;  //设置F2_E2百位
 482   3              else Two_Menu_F2_E2[1]++;
 483   3              break;
 484   3            case TWO_MENU_F2_E2_D3:
 485   3              if (Two_Menu_F2_E2[2] == 9) Two_Menu_F2_E2[2] = 0;  //设置F2_E2十位
 486   3              else Two_Menu_F2_E2[2]++;
 487   3              break;
 488   3            case TWO_MENU_F2_E2_D4:
 489   3              if (Two_Menu_F2_E2[3] == 9) Two_Menu_F2_E2[3] = 0;  //设置F2_E2个位
 490   3              else Two_Menu_F2_E2[3]++;
 491   3              break;
 492   3            case TWO_MENU_F2_E3_D1:
 493   3              if (Two_Menu_F2_E3[0] == 20) Two_Menu_F2_E3[0] = 0; //设置F2_E3千位
 494   3              else Two_Menu_F2_E3[0]++;
 495   3              break;
 496   3            case TWO_MENU_F2_E3_D2:
 497   3              if (Two_Menu_F2_E3[1] == 9) Two_Menu_F2_E3[1] = 0;  //设置F2_E3百位
 498   3              else Two_Menu_F2_E3[1]++;
 499   3              break;
 500   3            case TWO_MENU_F2_E3_D3:
 501   3              if (Two_Menu_F2_E3[2] == 9) Two_Menu_F2_E3[2] = 0;  //设置F2_E3十位
 502   3              else Two_Menu_F2_E3[2]++;
 503   3              break;
 504   3            case TWO_MENU_F2_E3_D4:
 505   3              if (Two_Menu_F2_E3[3] == 9) Two_Menu_F2_E3[3] = 0;  //设置F2_E3个位
 506   3              else Two_Menu_F2_E3[3]++;
 507   3              break;
 508   3            case TWO_MENU_F2_E4_D1:
 509   3              if (Two_Menu_F2_E4[0] == 20) Two_Menu_F2_E4[0] = 0; //设置F2_E4千位
 510   3              else Two_Menu_F2_E4[0]++;
 511   3              break;
 512   3            case TWO_MENU_F2_E4_D2:
 513   3              if (Two_Menu_F2_E4[1] == 9) Two_Menu_F2_E4[1] = 0;  //设置F2_E4百位
 514   3              else Two_Menu_F2_E4[1]++;
 515   3              break;
 516   3            case TWO_MENU_F2_E4_D3:
 517   3              if (Two_Menu_F2_E4[2] == 9) Two_Menu_F2_E4[2] = 0;  //设置F2_E4十位
 518   3              else Two_Menu_F2_E4[2]++;
 519   3              break;
 520   3            case TWO_MENU_F2_E4_D4:
 521   3              if (Two_Menu_F2_E4[3] == 9) Two_Menu_F2_E4[3] = 0;  //设置F2_E4个位
 522   3              else Two_Menu_F2_E4[3]++;
 523   3            case TWO_MENU_F3_E1_SET:
 524   3              if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;  //排队显示 或者 循环显示
 525   3              else Two_Menu_F3_E1 = 1;
 526   3              break;
 527   3            case TWO_MENU_F3_E2_SET:
 528   3              if (Two_Menu_F3_E2 == 20) Two_Menu_F3_E2 = 1; //存储队列个数
 529   3              else Two_Menu_F3_E2 ++;
 530   3              break;
 531   3            case TWO_MENU_F4_SET:
 532   3              if (Two_Menu_F4_E1 == 99) Two_Menu_F4_E1 = 0; //销号时间设置
 533   3              else Two_Menu_F4_E1++;
 534   3              break;
 535   3            case TWO_MENU_F5_SET:
 536   3              if (Two_Menu_F5_E1 == 99) Two_Menu_F5_E1 = 0; //循环时间设置
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 11  

 537   3              else Two_Menu_F5_E1++;
 538   3              break;
 539   3            case TWO_MENU_F6_E1_SET:
 540   3              if (Two_Menu_F6_E1 == 5) Two_Menu_F6_E1 = 0;  //F6_E1语音选择
 541   3              else Two_Menu_F6_E1++;
 542   3              break;
 543   3            case TWO_MENU_F6_E2_SET:
 544   3              if (Two_Menu_F6_E2 == 9) Two_Menu_F6_E2 = 1;  //F6_E2语音报读次数
 545   3              else Two_Menu_F6_E2++;
 546   3              break;
 547   3            case TWO_MENU_F6_E3_SET:
 548   3              if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;  //F6_E3循环时候是否报读
 549   3              else Two_Menu_F6_E3 = 0;
 550   3              break;
 551   3            case TWO_MENU_F6_E4_SET:
 552   3              if (Two_Menu_F6_E4 == 9) Two_Menu_F6_E4 = 0;  //F6_E4音量大小调整
 553   3              else Two_Menu_F6_E4++;
 554   3              break;
 555   3            case TWO_MENU_F6_E5_SET:
 556   3              if (Two_Menu_F6_E5 == 7) Two_Menu_F6_E5 = 0;  //F6_E5屏幕亮度调整
 557   3              else Two_Menu_F6_E5++;
 558   3              break;
 559   3            case TWO_MENU_F7_E1_SET:
 560   3              if (Two_Menu_F7_E1 == 11) Two_Menu_F7_E1 = 0; //F7_E1原始规则 999*9
 561   3              else Two_Menu_F7_E1++;
 562   3              break;
 563   3            case TWO_MENU_F7_E2_SET:
 564   3              if (Two_Menu_F7_E2 == 11) Two_Menu_F7_E2 = 0; //F7_E2附加规则 9999*9
 565   3              else Two_Menu_F7_E2++;
 566   3              break;
 567   3            case TWO_MENU_F7_E3_SET:
 568   3              if (Two_Menu_F7_E3 == 11) Two_Menu_F7_E3 = 0; //F7_E3附加规则 999*99
 569   3              else Two_Menu_F7_E3++;
 570   3              break;
 571   3            case TWO_MENU_F7_E4_SET:
 572   3              if (Two_Menu_F7_E4 == 11) Two_Menu_F7_E4 = 0; //F7_E3附加规则 9999*99
 573   3              else Two_Menu_F7_E4++;
 574   3              break;
 575   3            case TWO_MENU_F8_E1_SET:
 576   3              if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;  //F8_E1单键位跟多键位切换
 577   3              else Two_Menu_F8_E1 = 1 ;
 578   3              break;
 579   3            case TWO_MENU_F8_E2_SET:
 580   3              if (Two_Menu_F8_E2 == 50) Two_Menu_F8_E2 = 0; //F8_E2键位设置
 581   3              else Two_Menu_F8_E2++;
 582   3              break;
 583   3            case DECODER_MENU:
 584   3              CycleUp();
 585   3              break;
 586   3      
 587   3              default:break;
 588   3            } 
 589   2            func_index = table[func_index].up; break;
 590   2          case KEY_DOWN:
 591   2            switch (func_index)
 592   2            {
 593   3            case TWO_MENU_F0_YEAR:
 594   3              if (time_buf1[1] == 0) time_buf1[1] = 99; //设置万年历 年
 595   3              else time_buf1[1]--;
 596   3              break;
 597   3            case TWO_MENU_F0_MOUTH:
 598   3              if (time_buf1[2] == 1) time_buf1[2] = 12; //设置万年历 月
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 12  

 599   3              else time_buf1[2]--;
 600   3              break;
 601   3            case TWO_MENU_F0_DAY:
 602   3              if (time_buf1[3] == 1) time_buf1[3] = 31; //设置万年历 日
 603   3              else time_buf1[3]--;
 604   3              break;
 605   3            case TWO_MENU_F0_WEEK:
 606   3              if (time_buf1[7] == 1) time_buf1[7] = 7;  //设置万年历 星期
 607   3              else time_buf1[7]--;
 608   3              break;
 609   3            case TWO_MENU_F0_HOUR:
 610   3              if (time_buf1[4] == 0) time_buf1[4] = 23; //设置万年历 小时
 611   3              else time_buf1[4]--;
 612   3              break;
 613   3            case TWO_MENU_F0_MINUTE:
 614   3              if (time_buf1[5] == 0) time_buf1[5] = 59; //设置万年历 分钟
 615   3              else time_buf1[5]--;
 616   3              break;
 617   3            case TWO_MENU_F1_E1_D1:
 618   3              if (Two_Menu_F1_E1[0] == 0) Two_Menu_F1_E1[0] = 20; //设置F1_E1千位
 619   3              else Two_Menu_F1_E1[0]--;
 620   3              break;
 621   3            case TWO_MENU_F1_E1_D2:
 622   3              if (Two_Menu_F1_E1[1] == 0) Two_Menu_F1_E1[1] = 9;  //设置F1_E1百位
 623   3              else Two_Menu_F1_E1[1]--;
 624   3              break;
 625   3            case TWO_MENU_F1_E1_D3:
 626   3              if (Two_Menu_F1_E1[2] == 0) Two_Menu_F1_E1[2] = 9;  //设置F1_E1十位
 627   3              else Two_Menu_F1_E1[2]--;
 628   3              break;
 629   3            case TWO_MENU_F1_E1_D4:
 630   3              if (Two_Menu_F1_E1[3] == 0) Two_Menu_F1_E1[3] = 9;  //设置F1_E1个位
 631   3              else Two_Menu_F1_E1[3]--;
 632   3              break;
 633   3            case TWO_MENU_F1_E2_D1:
 634   3              if (Two_Menu_F1_E2[0] == 0) Two_Menu_F1_E2[0] = 20; //设置F1_E2千位
 635   3              else Two_Menu_F1_E2[0]--;
 636   3              break;
 637   3            case TWO_MENU_F1_E2_D2:
 638   3              if (Two_Menu_F1_E2[1] == 0) Two_Menu_F1_E2[1] = 9;  //设置F1_E2百位
 639   3              else Two_Menu_F1_E2[1]--;
 640   3              break;
 641   3            case TWO_MENU_F1_E2_D3:
 642   3              if (Two_Menu_F1_E2[2] == 0) Two_Menu_F1_E2[2] = 9;  //设置F1_E2十位
 643   3              else Two_Menu_F1_E2[2]--;
 644   3              break;
 645   3            case TWO_MENU_F1_E2_D4:
 646   3              if (Two_Menu_F1_E2[3] == 0) Two_Menu_F1_E2[3] = 9;  //设置F1_E2个位
 647   3              else Two_Menu_F1_E2[3]--;
 648   3              break;
 649   3            case TWO_MENU_F1_E3_D1:
 650   3              if (Two_Menu_F1_E3[0] == 0) Two_Menu_F1_E3[0] = 20; //设置F1_E3千位
 651   3              else Two_Menu_F1_E3[0]--;
 652   3              break;
 653   3            case TWO_MENU_F1_E3_D2:
 654   3              if (Two_Menu_F1_E3[1] == 0) Two_Menu_F1_E3[1] = 9;  //设置F1_E3百位
 655   3              else Two_Menu_F1_E3[1]--;
 656   3              break;
 657   3            case TWO_MENU_F1_E3_D3:
 658   3              if (Two_Menu_F1_E3[2] == 0) Two_Menu_F1_E3[2] = 9;  //设置F1_E3十位
 659   3              else Two_Menu_F1_E3[2]--;
 660   3              break;
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 13  

 661   3            case TWO_MENU_F1_E3_D4:
 662   3              if (Two_Menu_F1_E3[3] == 0) Two_Menu_F1_E3[3] = 9;  //设置F1_E3个位
 663   3              else Two_Menu_F1_E3[3]--;
 664   3              break;
 665   3            case TWO_MENU_F1_E4_D1:
 666   3              if (Two_Menu_F1_E4[0] == 0) Two_Menu_F1_E4[0] = 20; //设置F1_E4千位
 667   3              else Two_Menu_F1_E4[0]--;
 668   3              break;
 669   3            case TWO_MENU_F1_E4_D2:
 670   3              if (Two_Menu_F1_E4[1] == 0) Two_Menu_F1_E4[1] = 9;  //设置F1_E4百位
 671   3              else Two_Menu_F1_E4[1]--;
 672   3              break;
 673   3            case TWO_MENU_F1_E4_D3:
 674   3              if (Two_Menu_F1_E4[2] == 0) Two_Menu_F1_E4[2] = 9;  //设置F1_E4十位
 675   3              else Two_Menu_F1_E4[2]--;
 676   3              break;
 677   3            case TWO_MENU_F1_E4_D4:
 678   3              if (Two_Menu_F1_E4[3] == 0) Two_Menu_F1_E4[3] = 9;  //设置F1_E4个位
 679   3              else Two_Menu_F1_E4[3]--;
 680   3              break;
 681   3            case TWO_MENU_F2_E1_D1:
 682   3              if (Two_Menu_F2_E1[0] == 0) Two_Menu_F2_E1[0] = 20; //设置F2_E1千位
 683   3              else Two_Menu_F2_E1[0]--;
 684   3              break;
 685   3            case TWO_MENU_F2_E1_D2:
 686   3              if (Two_Menu_F2_E1[1] == 0) Two_Menu_F2_E1[1] = 9;  //设置F2_E1百位
 687   3              else Two_Menu_F2_E1[1]--;
 688   3              break;
 689   3            case TWO_MENU_F2_E1_D3:
 690   3              if (Two_Menu_F2_E1[2] == 0) Two_Menu_F2_E1[2] = 9;  //设置F2_E1十位
 691   3              else Two_Menu_F2_E1[2]--;
 692   3              break;
 693   3            case TWO_MENU_F2_E1_D4:
 694   3              if (Two_Menu_F2_E1[3] == 0) Two_Menu_F2_E1[3] = 9;  //设置F2_E1个位
 695   3              else Two_Menu_F2_E1[3]--;
 696   3              break;
 697   3            case TWO_MENU_F2_E2_D1:
 698   3              if (Two_Menu_F2_E2[0] == 0) Two_Menu_F2_E2[0] = 20; //设置F2_E2千位
 699   3              else Two_Menu_F2_E2[0]--;
 700   3              break;
 701   3            case TWO_MENU_F2_E2_D2:
 702   3              if (Two_Menu_F2_E2[1] == 0) Two_Menu_F2_E2[1] = 9;  //设置F2_E2百位
 703   3              else Two_Menu_F2_E2[1]--;
 704   3              break;
 705   3            case TWO_MENU_F2_E2_D3:
 706   3              if (Two_Menu_F2_E2[2] == 0) Two_Menu_F2_E2[2] = 9;  //设置F2_E2十位
 707   3              else Two_Menu_F2_E2[2]--;
 708   3              break;
 709   3            case TWO_MENU_F2_E2_D4:
 710   3              if (Two_Menu_F2_E2[3] == 0) Two_Menu_F2_E2[3] = 9;  //设置F2_E2个位
 711   3              else Two_Menu_F2_E2[3]--;
 712   3              break;
 713   3            case TWO_MENU_F2_E3_D1:
 714   3              if (Two_Menu_F2_E3[0] == 0) Two_Menu_F2_E3[0] = 20; //设置F2_E3千位
 715   3              else Two_Menu_F2_E3[0]--;
 716   3              break;
 717   3            case TWO_MENU_F2_E3_D2:
 718   3              if (Two_Menu_F2_E3[1] == 0) Two_Menu_F2_E3[1] = 9;  //设置F2_E3百位
 719   3              else Two_Menu_F2_E3[1]--;
 720   3              break;
 721   3            case TWO_MENU_F2_E3_D3:
 722   3              if (Two_Menu_F2_E3[2] == 0) Two_Menu_F2_E3[2] = 9;  //设置F2_E3十位
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 14  

 723   3              else Two_Menu_F2_E3[2]--;
 724   3              break;
 725   3            case TWO_MENU_F2_E3_D4:
 726   3              if (Two_Menu_F2_E3[3] == 0) Two_Menu_F2_E3[3] = 9;  //设置F2_E3个位
 727   3              else Two_Menu_F2_E3[3]--;
 728   3              break;
 729   3            case TWO_MENU_F2_E4_D1:
 730   3              if (Two_Menu_F2_E4[0] == 0) Two_Menu_F2_E4[0] = 20; //设置F2_E4千位
 731   3              else Two_Menu_F2_E4[0]--;
 732   3              break;
 733   3            case TWO_MENU_F2_E4_D2:
 734   3              if (Two_Menu_F2_E4[1] == 0) Two_Menu_F2_E4[1] = 9;  //设置F2_E4百位
 735   3              else Two_Menu_F2_E4[1]--;
 736   3              break;
 737   3            case TWO_MENU_F2_E4_D3:
 738   3              if (Two_Menu_F2_E4[2] == 0) Two_Menu_F2_E4[2] = 9;  //设置F2_E4十位
 739   3              else Two_Menu_F2_E4[2]--;
 740   3              break;
 741   3            case TWO_MENU_F2_E4_D4:
 742   3              if (Two_Menu_F2_E4[3] == 0) Two_Menu_F2_E4[3] = 9;  //设置F2_E4个位
 743   3              else Two_Menu_F2_E4[3]--;
 744   3              break;
 745   3            case TWO_MENU_F3_E1_SET:
 746   3              if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;  //排队显示 或者 循环显示
 747   3              else Two_Menu_F3_E1 = 1;
 748   3              break;
 749   3            case TWO_MENU_F3_E2_SET:
 750   3              if (Two_Menu_F3_E2 == 1) Two_Menu_F3_E2 = 20; //存储队列个数
 751   3              else Two_Menu_F3_E2--;
 752   3              break;
 753   3            case TWO_MENU_F4_SET:
 754   3              if (Two_Menu_F4_E1 == 0) Two_Menu_F4_E1 = 99; //销号时间设置
 755   3              else Two_Menu_F4_E1--;
 756   3              break;
 757   3            case TWO_MENU_F5_SET:
 758   3              if (Two_Menu_F5_E1 == 0) Two_Menu_F5_E1 = 99; //销号时间设置
 759   3              else Two_Menu_F5_E1--;
 760   3              break;
 761   3            case TWO_MENU_F6_E1_SET:
 762   3              if (Two_Menu_F6_E1 == 0) Two_Menu_F6_E1 = 5;  //F6_E1额语音选择
 763   3              else Two_Menu_F6_E1--;
 764   3              break;
 765   3            case TWO_MENU_F6_E2_SET:
 766   3              if (Two_Menu_F6_E2 == 1) Two_Menu_F6_E2 = 9;  //F6_E2语音报读次数调整
 767   3              else Two_Menu_F6_E2--;
 768   3              break;
 769   3            case TWO_MENU_F6_E3_SET:
 770   3              if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;  //F6_E3循环时候是否报读
 771   3              else Two_Menu_F6_E3 = 0;
 772   3              break;
 773   3            case TWO_MENU_F6_E4_SET:
 774   3              if (Two_Menu_F6_E4 == 0) Two_Menu_F6_E4 = 9;  //F6_E4音量大小调整
 775   3              else Two_Menu_F6_E4--;
 776   3              break;
 777   3            case TWO_MENU_F6_E5_SET:
 778   3              if (Two_Menu_F6_E5 == 0) Two_Menu_F6_E5 = 7;  //F6_E5屏幕亮度调整
 779   3              else Two_Menu_F6_E5--;
 780   3              break;
 781   3            case TWO_MENU_F7_E1_SET:
 782   3              if (Two_Menu_F7_E1 == 0) Two_Menu_F7_E1 = 11; //F7_E1原始规则 999*9
 783   3              else Two_Menu_F7_E1--;
 784   3              break;
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 15  

 785   3            case TWO_MENU_F7_E2_SET:
 786   3              if (Two_Menu_F7_E2 == 0) Two_Menu_F7_E2 = 11; //F7_E2附加规则 9999*9
 787   3              else Two_Menu_F7_E2--;
 788   3              break;
 789   3            case TWO_MENU_F7_E3_SET:
 790   3              if (Two_Menu_F7_E3 == 0) Two_Menu_F7_E3 = 11; //F7_E3附加规则 999*99
 791   3              else Two_Menu_F7_E3--;
 792   3              break;
 793   3            case TWO_MENU_F7_E4_SET:
 794   3              if (Two_Menu_F7_E4 == 0) Two_Menu_F7_E4 = 11; //F7_E3附加规则 9999*99
 795   3              else Two_Menu_F7_E4--;
 796   3              break;
 797   3            case TWO_MENU_F8_E1_SET:
 798   3              if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;  //F8_E1单键位跟多键位切换
 799   3              else Two_Menu_F8_E1 = 1;
 800   3              break;
 801   3            case TWO_MENU_F8_E2_SET:
 802   3              if (Two_Menu_F8_E2 == 0) Two_Menu_F8_E2 = 50; //F8_E2键位设置
 803   3              else Two_Menu_F8_E2--;
 804   3              break;
 805   3            case DECODER_MENU:
 806   3              CycleDown();
 807   3              break;
 808   3      
 809   3              default:break;
 810   3            }
 811   2            func_index = table[func_index].down; break;
 812   2          default:break;
 813   2        }
 814   1        current_operation_index = table[func_index].index_operation;
 815   1        (*current_operation_index)();//执行当前操作函数
 816   1      }
 817          
 818          void delay10ms(void)   //误差 -0.054253472222us
 819          {
 820   1        unsigned char a, b, c;
 821   1        for (c = 4; c>0; c--)
 822   1        for (b = 52; b>0; b--)
 823   1        for (a = 220; a>0; a--);
 824   1        _nop_();  //if Keil,require use intrins.h
 825   1      }
 826          
 827          unsigned char return_func_index(void)
 828          {
 829   1        unsigned char func_index_temp = 0;
 830   1        func_index_temp = func_index;
 831   1        return func_index_temp;
 832   1      }
 833          
 834          void set_func_index(unsigned char temp)
 835          {
 836   1        func_index = temp;
 837   1      }
 838          
 839          unsigned char return_Two_Menu_F3_E1(void)
 840          {
 841   1        unsigned char temp = 0;
 842   1        temp = Two_Menu_F3_E1;
 843   1        return temp;
 844   1      }
 845          
 846          unsigned char return_Two_Menu_F3_E2(void)
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 16  

 847          {
 848   1        unsigned char temp = 0;
 849   1        temp = Two_Menu_F3_E2;
 850   1        return temp;
 851   1      }
 852          
 853          unsigned char return_Two_Menu_F4_E1(void)
 854          {
 855   1        unsigned char temp = 0;
 856   1        temp = Two_Menu_F4_E1;
 857   1        return temp;
 858   1      }
 859          
 860          unsigned char return_Two_Menu_F5_E1(void)
 861          {
 862   1        unsigned char temp = 0;
 863   1        temp = Two_Menu_F5_E1;
 864   1        return temp;
 865   1      }
 866          
 867          unsigned char return_Two_Menu_F6_E1(void)
 868          {
 869   1        unsigned char temp = 0;
 870   1        temp = Two_Menu_F6_E1;
 871   1        return temp;
 872   1      }
 873          
 874          unsigned char return_Two_Menu_F6_E2(void)
 875          {
 876   1        unsigned char temp = 0;
 877   1        temp = Two_Menu_F6_E2;
 878   1        return temp;
 879   1      }
 880          
 881          unsigned char return_Two_Menu_F6_E3(void)
 882          {
 883   1        unsigned char temp = 0;
 884   1        temp = Two_Menu_F6_E3;
 885   1        return temp;
 886   1      }
 887          
 888          unsigned char return_Two_Menu_F6_E4(void)
 889          {
 890   1        unsigned char temp = 0;
 891   1        temp = Two_Menu_F6_E4;
 892   1        return temp;
 893   1      }
 894          
 895          unsigned char return_Two_Menu_F6_E5(void)
 896          {
 897   1        unsigned char temp = 0;
 898   1        temp = Two_Menu_F6_E5;
 899   1        return temp;
 900   1      }
 901          
 902          unsigned char return_Two_Menu_F7_E1(void)
 903          {
 904   1        unsigned char temp = 0;
 905   1        temp = Two_Menu_F7_E1;
 906   1        return temp;
 907   1      }
 908          
C51 COMPILER V9.00   KEY                                                                   09/24/2015 12:29:34 PAGE 17  

 909          unsigned char return_Two_Menu_F7_E2(void)
 910          {
 911   1        unsigned char temp = 0;
 912   1        temp = Two_Menu_F7_E2;
 913   1        return temp;
 914   1      }
 915          
 916          unsigned char return_Two_Menu_F7_E3(void)
 917          {
 918   1        unsigned char temp = 0;
 919   1        temp = Two_Menu_F7_E3;
 920   1        return temp;
 921   1      }
 922          
 923          unsigned char return_Two_Menu_F7_E4(void)
 924          {
 925   1        unsigned char temp = 0;
 926   1        temp = Two_Menu_F7_E4;
 927   1        return temp;
 928   1      }
 929          
 930          unsigned char return_Two_Menu_F8_E1(void)
 931          {
 932   1        unsigned char temp = 0;
 933   1        temp = Two_Menu_F8_E1;
 934   1        return temp;
 935   1      }
 936          
 937          unsigned char return_Two_Menu_F8_E2(void)
 938          {
 939   1        unsigned char temp = 0;
 940   1        temp = Two_Menu_F8_E2;
 941   1        return temp;
 942   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2914    ----
   CONSTANT SIZE    =    818    ----
   XDATA SIZE       =     54       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
