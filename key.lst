C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\key.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\k
                    -ey.lst) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "usart.h"
   3          #include "tm1629.h"
   4          #include "menu.h"
   5          #include "timer.h"
   6          #include "ds1302.h"
   7          #include "at24c256.h"
   8          #include "gd5800.h"
   9          
  10          unsigned char sound_table = 0;
  11          
  12          unsigned char func_index = 0; //多级菜单索引变量
  13          void(*current_operation_index)();// 多级菜单函数指针
  14          
  15          unsigned char Two_Menu_F1_E1[4] = { 0, 0, 0, 1 }; //F1_E1
  16          unsigned char Two_Menu_F1_E2[4] = { 0, 0, 0, 1 }; //F1_E2
  17          unsigned char Two_Menu_F1_E3[4] = { 0, 0, 0, 1 }; //F1_E3
  18          unsigned char Two_Menu_F1_E4[4] = { 0, 0, 0, 1 }; //F1_E4
  19          unsigned char Two_Menu_F2_E1[4] = { 0, 0, 0, 1 }; //F2_E1
  20          unsigned char Two_Menu_F2_E2[4] = { 0, 0, 0, 1 }; //F2_E2
  21          unsigned char Two_Menu_F2_E3[4] = { 0, 0, 0, 1 }; //F2_E3
  22          unsigned char Two_Menu_F2_E4[4] = { 0, 0, 0, 1 }; //F2_E4
  23          
  24          unsigned char Two_Menu_F3_E1 = 1; //即时模式或者排队显示
  25          unsigned char Two_Menu_F3_E2 = 12; //呼叫时候存储数量
  26          
  27          unsigned char Two_Menu_F4_E1 = 0; //销号时间
  28          unsigned char Two_Menu_F5_E1 = 0; //循环间隔时间
  29          
  30          unsigned char Two_Menu_F6_E1 = 0; //简单报读
  31          unsigned char Two_Menu_F6_E2 = 2; //语音报读次数
  32          unsigned char Two_Menu_F6_E3 = 0; //循环时候是否报读
  33          unsigned char Two_Menu_F6_E4 = 0; //音量大小调整
  34          unsigned char Two_Menu_F6_E5 = 0; //显示屏LED亮度调整
  35          
  36          unsigned char Two_Menu_F7_E1 = 11; // E1默认键盘规则 999*9
  37          unsigned char Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
  38          unsigned char Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
  39          unsigned char Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
  40          
  41          unsigned char Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
  42          
  43          unsigned char Two_Menu_F8_E2 = 0; // 键位设置
  44          
  45          unsigned char Two_Menu_Fb_E1 = 1; // 设置主机有没有销号功能
  46          unsigned char Two_Menu_FC_E1 = 1; // 设置万年历待机与----待机的切换
  47          unsigned char Two_Menu_Fd_E1 = 1; // E1 E2 E3 E4 E5 E6
  48          
  49          key_table code table[100] =
  50          {       // 目标索引                 上                          下          确认                 退出         函数
  51                  { MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, (*fun0) }, //待机
  52          
  53                  { ONE_MENU_F0, ONE_MENU_F1, ONE_MENU_Fd, TWO_MENU_F0_YEAR , MENU_STANDBY, (*fun1) }, //F0-F9
  54                  { ONE_MENU_F1, ONE_MENU_F2, ONE_MENU_F0, TWO_MENU_F1_E1   , MENU_STANDBY, (*fun2) },
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 2   

  55                  { ONE_MENU_F2, ONE_MENU_F3, ONE_MENU_F1, TWO_MENU_F2_E1   , MENU_STANDBY, (*fun3) },
  56                  { ONE_MENU_F3, ONE_MENU_F4, ONE_MENU_F2, TWO_MENU_F3_E1   , MENU_STANDBY, (*fun4) },
  57                  { ONE_MENU_F4, ONE_MENU_F5, ONE_MENU_F3, TWO_MENU_F4_SET  , MENU_STANDBY, (*fun5) },
  58                  { ONE_MENU_F5, ONE_MENU_F6, ONE_MENU_F4, TWO_MENU_F5_SET  , MENU_STANDBY, (*fun6) },
  59                  { ONE_MENU_F6, ONE_MENU_F7, ONE_MENU_F5, TWO_MENU_F6_E1   , MENU_STANDBY, (*fun7) },
  60                  { ONE_MENU_F7, ONE_MENU_F8, ONE_MENU_F6, TWO_MENU_F7_E1   , MENU_STANDBY, (*fun8) },
  61                  { ONE_MENU_F8, ONE_MENU_F9, ONE_MENU_F7, TWO_MENU_F8_E1   , MENU_STANDBY, (*fun9) },
  62                  { ONE_MENU_F9, ONE_MENU_FA, ONE_MENU_F8, TWO_MENU_F9_E1   , MENU_STANDBY, (*fun10) },
  63                  { ONE_MENU_FA, ONE_MENU_Fb, ONE_MENU_F9, TWO_MENU_FA_SET  , MENU_STANDBY, (*fun11) }, //FA
  64                  { ONE_MENU_Fb, ONE_MENU_FC, ONE_MENU_FA, TWO_MENU_Fb_SET  , MENU_STANDBY, (*fun12) }, //Fb
  65                  { ONE_MENU_FC, ONE_MENU_Fd, ONE_MENU_Fb, TWO_MENU_FC_SET  , MENU_STANDBY, (*fun13) }, //FC
  66                  { ONE_MENU_Fd, ONE_MENU_F0, ONE_MENU_FC, TWO_MENU_Fd_SET  , MENU_STANDBY, (*fun14) }, //Fd
  67          
  68                  { TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_MOUTH , ONE_MENU_F0, (*fun15) }
             -, //万年历 年
  69                  { TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_DAY   , ONE_MENU_F0, (*fun16) }
             -, //万年历 月
  70                  { TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_WEEK  , ONE_MENU_F0, (*fun17) }
             -, //万年历 日
  71                  { TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_HOUR  , ONE_MENU_F0, (*fun18) }
             -, //万年历 周
  72                  { TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_MINUTE, ONE_MENU_F0, (*fun19) }
             -, //万年历 小时
  73                  { TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_YEAR  , ONE_MENU_F0, (*fun20) }
             -, //万年历 分钟
  74          
  75                  { TWO_MENU_F1_E1, TWO_MENU_F1_E2, TWO_MENU_F1_E4, TWO_MENU_F1_E1_D4, ONE_MENU_F1, (*fun21) }, //F1子菜单E
             -1
  76                  { TWO_MENU_F1_E2, TWO_MENU_F1_E3, TWO_MENU_F1_E1, TWO_MENU_F1_E2_D4, ONE_MENU_F1, (*fun22) }, //F1子菜单E
             -2
  77                  { TWO_MENU_F1_E3, TWO_MENU_F1_E4, TWO_MENU_F1_E2, TWO_MENU_F1_E3_D4, ONE_MENU_F1, (*fun23) }, //F1子菜单E
             -3
  78                  { TWO_MENU_F1_E4, TWO_MENU_F1_E1, TWO_MENU_F1_E3, TWO_MENU_F1_E4_D4, ONE_MENU_F1, (*fun24) }, //F1子菜单E
             -4
  79          
  80                  { TWO_MENU_F2_E1, TWO_MENU_F2_E2, TWO_MENU_F2_E4, TWO_MENU_F2_E1_D4, ONE_MENU_F2, (*fun25) }, //F2子菜单E
             -1
  81                  { TWO_MENU_F2_E2, TWO_MENU_F2_E3, TWO_MENU_F2_E1, TWO_MENU_F2_E2_D4, ONE_MENU_F2, (*fun26) }, //F2子菜单E
             -2
  82                  { TWO_MENU_F2_E3, TWO_MENU_F2_E4, TWO_MENU_F2_E2, TWO_MENU_F2_E3_D4, ONE_MENU_F2, (*fun27) }, //F2子菜单E
             -3
  83                  { TWO_MENU_F2_E4, TWO_MENU_F2_E1, TWO_MENU_F2_E3, TWO_MENU_F2_E4_D4, ONE_MENU_F2, (*fun28) }, //F2子菜单E
             -4
  84          
  85                  { TWO_MENU_F3_E1, TWO_MENU_F3_E2, TWO_MENU_F3_E2, TWO_MENU_F3_E1_SET, ONE_MENU_F3, (*fun29) }, //F3子菜单
             -E1
  86                  { TWO_MENU_F3_E2, TWO_MENU_F3_E1, TWO_MENU_F3_E1, TWO_MENU_F3_E2_SET, ONE_MENU_F3, (*fun30) }, //F3子菜单
             -E2
  87          
  88                  { TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, ONE_MENU_F4, (*fun31) }, //F4子菜单
  89                  { TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, ONE_MENU_F5, (*fun32) }, //F5子菜单
  90          
  91                  { TWO_MENU_F6_E1, TWO_MENU_F6_E2, TWO_MENU_F6_E5, TWO_MENU_F6_E1_SET, ONE_MENU_F6, (*fun33) }, //F6子菜单
             -E1
  92                  { TWO_MENU_F6_E2, TWO_MENU_F6_E3, TWO_MENU_F6_E1, TWO_MENU_F6_E2_SET, ONE_MENU_F6, (*fun34) }, //F6子菜单
             -E2
  93                  { TWO_MENU_F6_E3, TWO_MENU_F6_E4, TWO_MENU_F6_E2, TWO_MENU_F6_E3_SET, ONE_MENU_F6, (*fun35) }, //F6子菜单
             -E3
  94                  { TWO_MENU_F6_E4, TWO_MENU_F6_E5, TWO_MENU_F6_E3, TWO_MENU_F6_E4_SET, ONE_MENU_F6, (*fun36) }, //F6子菜单
             -E4
  95                  { TWO_MENU_F6_E5, TWO_MENU_F6_E1, TWO_MENU_F6_E4, TWO_MENU_F6_E5_SET, ONE_MENU_F6, (*fun37) }, //F6子菜单
             -E5
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 3   

  96          
  97                  { TWO_MENU_F7_E1, TWO_MENU_F7_E2, TWO_MENU_F7_E4, TWO_MENU_F7_E1_SET, ONE_MENU_F7, (*fun38) }, //F7子菜单
             -E1
  98                  { TWO_MENU_F7_E2, TWO_MENU_F7_E3, TWO_MENU_F7_E1, TWO_MENU_F7_E2_SET, ONE_MENU_F7, (*fun39) }, //F7子菜单
             -E2
  99                  { TWO_MENU_F7_E3, TWO_MENU_F7_E4, TWO_MENU_F7_E2, TWO_MENU_F7_E3_SET, ONE_MENU_F7, (*fun40) }, //F7子菜单
             -E3
 100                  { TWO_MENU_F7_E4, TWO_MENU_F7_E1, TWO_MENU_F7_E3, TWO_MENU_F7_E4_SET, ONE_MENU_F7, (*fun41) }, //F7子菜单
             -E4        
 101          
 102                  { TWO_MENU_F8_E1, TWO_MENU_F8_E2, TWO_MENU_F8_E2, TWO_MENU_F8_E1_SET, ONE_MENU_F8, (*fun42) }, //F8子菜单
             -E1
 103                  { TWO_MENU_F8_E2, TWO_MENU_F8_E1, TWO_MENU_F8_E1, TWO_MENU_F8_E2_SET, ONE_MENU_F8, (*fun43) }, //F8子菜单
             -E2
 104          
 105                  { TWO_MENU_F9_E1, TWO_MENU_F9_E2, TWO_MENU_F9_E2, 0, ONE_MENU_F9, (*fun44) }, //F9子菜单E1
 106                  { TWO_MENU_F9_E2, TWO_MENU_F9_E1, TWO_MENU_F9_E1, 0, ONE_MENU_F9, (*fun45) }, //F9子菜单E2
 107          
 108                  { TWO_MENU_FA_SET, TWO_MENU_FA_SET, TWO_MENU_FA_SET, 0, ONE_MENU_FA, (*fun46) }, //FA子菜单
 109                  { TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, 0, ONE_MENU_Fb, (*fun47) }, //Fb子菜单
 110                  { TWO_MENU_FC_SET, TWO_MENU_FC_SET, TWO_MENU_FC_SET, 0, ONE_MENU_FC, (*fun48) }, //FC子菜单
 111                  { TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, 0, ONE_MENU_Fd, (*fun49) }, //Fd子菜单
 112          
 113                  { TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1, (*fun50) },
             - //F1_E1注册呼叫器
 114                  { TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1, (*fun51) },
             - //F1_E1注册呼叫器
 115                  { TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1, (*fun52) },
             - //F1_E1注册呼叫器
 116                  { TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1, (*fun53) },
             - //F1_E1注册呼叫器
 117          
 118                  { TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2, (*fun54) },
             - //F1_E2注册管理器
 119                  { TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2, (*fun55) },
             - //F1_E2注册管理器
 120                  { TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2, (*fun56) },
             - //F1_E2注册管理器
 121                  { TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2, (*fun57) },
             - //F1_E2注册管理器
 122          
 123                  { TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3, (*fun58) },
             - //F1_E3注册报警器
 124                  { TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3, (*fun59) },
             - //F1_E3注册报警器
 125                  { TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3, (*fun60) },
             - //F1_E3注册报警器
 126                  { TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3, (*fun61) },
             - //F1_E3注册报警器
 127          
 128                  { TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4, (*fun62) },
             - //F1_E3注册取消器
 129                  { TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4, (*fun63) },
             - //F1_E3注册取消器
 130                  { TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4, (*fun64) },
             - //F1_E3注册取消器
 131                  { TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4, (*fun65) },
             - //F1_E3注册取消器
 132          
 133                  { TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1, (*fun66) },
             - //F2_E1删除呼叫器
 134                  { TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1, (*fun67) },
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 4   

             - //F2_E1删除呼叫器
 135                  { TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1, (*fun68) },
             - //F2_E1删除呼叫器
 136                  { TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1, (*fun69) },
             - //F2_E1删除呼叫器
 137          
 138                  { TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2, (*fun70) },
             - //F2_E2删除管理器
 139                  { TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2, (*fun71) },
             - //F2_E2删除管理器
 140                  { TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2, (*fun72) },
             - //F2_E2删除管理器
 141                  { TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2, (*fun73) },
             - //F2_E2删除管理器
 142          
 143                  { TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3, (*fun74) },
             - //F2_E3删除报警器
 144                  { TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3, (*fun75) },
             - //F2_E3删除报警器
 145                  { TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3, (*fun76) },
             - //F2_E3删除报警器
 146                  { TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3, (*fun77) },
             - //F2_E3删除报警器
 147          
 148                  { TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4, (*fun78) },
             - //F2_E4删除取消器
 149                  { TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4, (*fun79) },
             - //F2_E4删除取消器
 150                  { TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4, (*fun80) },
             - //F2_E4删除取消器
 151                  { TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4, (*fun81) },
             - //F2_E4删除取消器
 152          
 153                  { TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1, (*fun82
             -) }, //F3_E1设置排队显示或者循环显示
 154                  { TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2, (*fun83
             -) }, //F3_E2设置队列个数
 155          
 156                  { TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1, (*fun84
             -) }, //F6_E1语音选择
 157                  { TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2, (*fun85
             -) }, //F6_E2语音报读次数
 158                  { TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3, (*fun86
             -) }, //F6_E3循环时候是否报读
 159                  { TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4, (*fun87
             -) }, //F6_E4音量大小调整
 160                  { TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5, (*fun88
             -) }, //F6_E5屏幕亮度调整
 161          
 162                  { TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1, (*fun89
             -) }, //F7_E1 999*9
 163                  { TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2, (*fun90
             -) }, //F7_E2 9999*9
 164                  { TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3, (*fun91
             -) }, //F7_E3 999*99
 165                  { TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4, (*fun92
             -) }, //F7_E4 9999*99
 166          
 167                  { TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1, (*fun93
             -) }, //F8_E1 单键位跟多键位切换
 168                  { TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2, (*fun94
             -) }, //F8_E2 键位设置
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 5   

 169          
 170                  { DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, (*fun95)},
 171          };
 172          
 173          unsigned int KeyScan(void)  //Keyboard scan function
 174          {
 175   1              unsigned int Val = 0;
 176   1              HKeyPort |= 0x7C;//Row height
 177   1              LKeyPort &= 0x07;
 178   1              if ((HKeyPort & 0x7C) != 0x1f)//Press button
 179   1              {
 180   2                      delay10ms();  //Remove jitter
 181   2                      if ((HKeyPort & 0x7C) != 0x7C)   //Press button
 182   2                      {
 183   3                              clear_return_standby_time();
 184   3      
 185   3                              HKeyPort |= 0x7C; //检测第一列
 186   3                              LKeyPort |= 0xf8;
 187   3                              LKeyPort &= 0x7f;
 188   3                              if ((HKeyPort & 0x7C) != 0x7C)
 189   3                              {
 190   4                                      //GD5800_select_chapter(DI);
 191   4                                      sound_table=1;
 192   4                                      Val = HKeyPort & 0x7C;
 193   4                                      Val <<= 8;
 194   4                                      Val += (LKeyPort & 0xf8);
 195   4                                      if (Val == 0x7878)
 196   4                                      {
 197   5                                              clear_main_press_time();        //清除菜单键按下的时间计算变量
 198   5                                              set_main_press_time_table(1); //设置相应的标志位，开始计算时间
 199   5                                      }
 200   4                                      while ((HKeyPort & 0x7C) != 0x7C);
 201   4                                      delay10ms();
 202   4                                      while ((HKeyPort & 0x7C) != 0x7C);
 203   4                                      set_main_press_time_table(0);//按键释放，清除相应的标志位
 204   4                                      set_logout_cycle_table(0);//循环跟销号重新计数
 205   4                                      return Val;
 206   4                              }
 207   3                      }
 208   2              }
 209   1              return 0x0fff;
 210   1      }
 211          
 212          unsigned char KeyDecoder(void)
 213          {
 214   1              unsigned int key_val = 0;
 215   1      
 216   1              key_val = KeyScan();
 217   1      #if 0     
                      if (key_val == 0x0fff) /*do not key press*/
                      {
                              /*sjz 有注册管理器标志*/
                              if (register_manager == 1)
                              {
              
                                      if (func_index == FUNC_STANDBY)
                                      {
                                              if ((old2_RF_RECE_REG[2] & 0x0f) == 0x01)
                                              {
                                                      accumulate_decoder++;
                                              }
                                              else
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 6   

                                              {
                                                      accumulate_decoder = 0;
                                              }
                                              if (accumulate_decoder>10)
                                              {
                                                      accumulate_50ms = 20;
                                                      accumulate_decoder = 0;
                                              }
                                      }
                                      register_manager = 0;
                                      switch (old2_RF_RECE_REG[2] & 0x0f)
                                      {
                                      case 0x01:key_val = 0x1778; break;
                                      case 0x02:key_val = 0x1b78; break;
                                      case 0x04:key_val = 0x1d78; break;
                                      case 0x08:key_val = 0x1e78; break;
                                      default:break;
                                      }
                              }
                      }
              #endif   
 252   1      
 253   1      #ifdef DEBUG
 254   1              if (key_val != 0x0fff)
 255   1              uart_printf("key_val is %x .\r\n", key_val); //测试按键键值
 256   1      #endif
 257   1              switch (key_val)
 258   1              {
 259   2              case 0x5c78:return KEY_RETURN; break;//1 按下相应的键显示相对应的码值
 260   2              case 0x6c78:return KEY_DOWN; break;//2  
 261   2              case 0x7478:return KEY_UP; break;//4
 262   2              case 0x7878:return KEY_FUNC; break;//5 按下相应的键显示相对应的码值
 263   2              default:return 0xff; break;
 264   2              }
 265   1      }
 266          
 267          void KeyProcess(void)
 268          {
 269   1              unsigned char key_value = 0, main_press_time_temp = 0;
 270   1              key_value = KeyDecoder();
 271   1              switch (key_value)
 272   1              {
 273   2                      case KEY_FUNC:
 274   2                              if (func_index == MENU_STANDBY || func_index == DECODER_MENU)  //如果索引==0  则要1秒以上进入菜单
 275   2                              {
 276   3                                      main_press_time_temp = return_main_press_time();
 277   3                                      if (main_press_time_temp >= 20)
 278   3                                      {
 279   4                                              func_index = ONE_MENU_F1;
 280   4                                              clear_main_press_time();
 281   4                                      }
 282   3                              }
 283   2                              else if (func_index == TWO_MENU_F2_E1_D1 || func_index == TWO_MENU_F2_E1_D2 || func_index == TWO_MENU_F
             -2_E1_D3 || func_index == TWO_MENU_F2_E1_D4 )
 284   2                              {
 285   3                                      main_press_time_temp = return_main_press_time();
 286   3                                      if (main_press_time_temp >= 10)
 287   3                                      {
 288   4                                              delete_call_function(Two_Menu_F2_E1);
 289   4                                              delay10ms();
 290   4                                              clear_main_press_time();
 291   4      //                                      if (sound_table == 1)
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 7   

 292   4      //                                      {
 293   4      //#if SOUND
 294   4      //                                              GD5800_select_chapter(SETSUCCESS_POSITION);
 295   4      //#endif
 296   4      //                                              sound_table = 0;
 297   4      //                                      }
 298   4                                      }
 299   3                                      else
 300   3                                              func_index = table[func_index].enter;
 301   3                              }
 302   2                              else if (func_index == TWO_MENU_F2_E2_D1 || func_index == TWO_MENU_F2_E2_D2 || func_index == TWO_MENU_F
             -2_E2_D3 || func_index == TWO_MENU_F2_E2_D4)
 303   2                              {
 304   3                                      main_press_time_temp = return_main_press_time();
 305   3                                      if (main_press_time_temp >= 10)
 306   3                                      {
 307   4                                              delete_host_function(Two_Menu_F2_E2);
 308   4                                              delay10ms();
 309   4                                              clear_main_press_time();
 310   4                                              //                                      if (sound_table == 1)
 311   4                                              //                                      {
 312   4                                              //#if SOUND
 313   4                                              //                                              GD5800_select_chapter(SETSUCCESS_POSITION);
 314   4                                              //#endif
 315   4                                              //                                              sound_table = 0;
 316   4                                              //                                      }
 317   4                                      }
 318   3                                      else
 319   3                                              func_index = table[func_index].enter;
 320   3                              }
 321   2                              else if (func_index == TWO_MENU_F2_E3_D1 || func_index == TWO_MENU_F2_E3_D2 || func_index == TWO_MENU_F
             -2_E3_D3 || func_index == TWO_MENU_F2_E3_D4)
 322   2                              {
 323   3                                      main_press_time_temp = return_main_press_time();
 324   3                                      if (main_press_time_temp >= 10)
 325   3                                      {
 326   4                                              delete_alarm_function(Two_Menu_F2_E3);
 327   4                                              delay10ms();
 328   4                                              clear_main_press_time();
 329   4                                              //                                      if (sound_table == 1)
 330   4                                              //                                      {
 331   4                                              //#if SOUND
 332   4                                              //                                              GD5800_select_chapter(SETSUCCESS_POSITION);
 333   4                                              //#endif
 334   4                                              //                                              sound_table = 0;
 335   4                                              //                                      }
 336   4                                      }
 337   3                                      else
 338   3                                              func_index = table[func_index].enter;
 339   3                              }
 340   2                              else if (func_index == TWO_MENU_F2_E4_D1 || func_index == TWO_MENU_F2_E4_D2 || func_index == TWO_MENU_F
             -2_E4_D3 || func_index == TWO_MENU_F2_E4_D4)
 341   2                              {
 342   3                                      main_press_time_temp = return_main_press_time();
 343   3                                      if (main_press_time_temp >= 10)
 344   3                                      {
 345   4                                              delete_cancel_function(Two_Menu_F2_E4);
 346   4                                              delay10ms();
 347   4                                              clear_main_press_time();
 348   4                                              //                                      if (sound_table == 1)
 349   4                                              //                                      {
 350   4                                              //#if SOUND
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 8   

 351   4                                              //                                              GD5800_select_chapter(SETSUCCESS_POSITION);
 352   4                                              //#endif
 353   4                                              //                                              sound_table = 0;
 354   4                                              //                                      }
 355   4                                      }
 356   3                                      else
 357   3                                              func_index = table[func_index].enter;
 358   3                              }
 359   2                              else
 360   2                              {
 361   3                                      func_index = table[func_index].enter;
 362   3                                      clear_main_press_time();
 363   3                              }
 364   2                               break;
 365   2                      case KEY_RETURN:        
 366   2                              if (func_index == DECODER_MENU  && return_Two_Menu_Fb_E1() )
 367   2                              {
 368   3                                      Logout();
 369   3                              }
 370   2                              else
 371   2                              func_index = table[func_index].esc; 
 372   2                              break;
 373   2                      case KEY_UP:
 374   2                              switch (func_index)
 375   2                              {
 376   3                              case TWO_MENU_F0_YEAR: 
 377   3                                      if (time_buf1[1] == 99) time_buf1[1] = 0;       //设置万年历 年
 378   3                                                                         else time_buf1[1]++;
 379   3                                      break;
 380   3                              case TWO_MENU_F0_MOUTH:
 381   3                                      if (time_buf1[2] == 12) time_buf1[2] = 1;       //设置万年历 月
 382   3                                      else time_buf1[2]++;
 383   3                                      break;
 384   3                              case TWO_MENU_F0_DAY:
 385   3                                      if (time_buf1[3] == 31) time_buf1[3] = 1;       //设置万年历 日
 386   3                                      else time_buf1[3]++;
 387   3                                      break;
 388   3                              case TWO_MENU_F0_WEEK:
 389   3                                      if (time_buf1[7] == 7) time_buf1[7] = 1;        //设置万年历 星期
 390   3                                      else time_buf1[7]++;
 391   3                                      break;
 392   3                              case TWO_MENU_F0_HOUR:
 393   3                                      if (time_buf1[4] == 23) time_buf1[4] = 0;       //设置万年历 小时
 394   3                                      else time_buf1[4]++;
 395   3                                      break;
 396   3                              case TWO_MENU_F0_MINUTE:
 397   3                                      if (time_buf1[5] == 59) time_buf1[5] = 0;       //设置万年历 分钟
 398   3                                      else time_buf1[5]++;
 399   3                                      break;
 400   3                              case TWO_MENU_F1_E1_D1:
 401   3                                      if (Two_Menu_F1_E1[0] == 20 ) Two_Menu_F1_E1[0] = 0;    //设置F1_E1千位
 402   3                                      else Two_Menu_F1_E1[0]++;
 403   3                                      break;
 404   3                              case TWO_MENU_F1_E1_D2:
 405   3                                      if (Two_Menu_F1_E1[1] == 9) Two_Menu_F1_E1[1] = 0;      //设置F1_E1百位
 406   3                                      else Two_Menu_F1_E1[1]++;
 407   3                                      break;
 408   3                              case TWO_MENU_F1_E1_D3:
 409   3                                      if (Two_Menu_F1_E1[2] == 9) Two_Menu_F1_E1[2] = 0;      //设置F1_E1十位
 410   3                                      else Two_Menu_F1_E1[2]++;
 411   3                                      break;
 412   3                              case TWO_MENU_F1_E1_D4:
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 9   

 413   3                                      if (Two_Menu_F1_E1[3] == 9) Two_Menu_F1_E1[3] = 0;      //设置F1_E1个位
 414   3                                      else Two_Menu_F1_E1[3]++;
 415   3                                      break;
 416   3                              case TWO_MENU_F1_E2_D1:
 417   3                                      if (Two_Menu_F1_E2[0] == 20) Two_Menu_F1_E2[0] = 0;     //设置F1_E2千位
 418   3                                      else Two_Menu_F1_E2[0]++;
 419   3                                      break;
 420   3                              case TWO_MENU_F1_E2_D2:
 421   3                                      if (Two_Menu_F1_E2[1] == 9) Two_Menu_F1_E2[1] = 0;      //设置F1_E2百位
 422   3                                      else Two_Menu_F1_E2[1]++;
 423   3                                      break;
 424   3                              case TWO_MENU_F1_E2_D3:
 425   3                                      if (Two_Menu_F1_E2[2] == 9) Two_Menu_F1_E2[2] = 0;      //设置F1_E2十位
 426   3                                      else Two_Menu_F1_E2[2]++;
 427   3                                      break;
 428   3                              case TWO_MENU_F1_E2_D4:
 429   3                                      if (Two_Menu_F1_E2[3] == 9) Two_Menu_F1_E2[3] = 0;      //设置F1_E2个位
 430   3                                      else Two_Menu_F1_E2[3]++;
 431   3                                      break;
 432   3                              case TWO_MENU_F1_E3_D1:
 433   3                                      if (Two_Menu_F1_E3[0] == 20) Two_Menu_F1_E3[0] = 0;     //设置F1_E3千位
 434   3                                      else Two_Menu_F1_E3[0]++;
 435   3                                      break;
 436   3                              case TWO_MENU_F1_E3_D2:
 437   3                                      if (Two_Menu_F1_E3[1] == 9) Two_Menu_F1_E3[1] = 0;      //设置F1_E3百位
 438   3                                      else Two_Menu_F1_E3[1]++;
 439   3                                      break;
 440   3                              case TWO_MENU_F1_E3_D3:
 441   3                                      if (Two_Menu_F1_E3[2] == 9) Two_Menu_F1_E3[2] = 0;      //设置F1_E3十位
 442   3                                      else Two_Menu_F1_E3[2]++;
 443   3                                      break;
 444   3                              case TWO_MENU_F1_E3_D4:
 445   3                                      if (Two_Menu_F1_E3[3] == 9) Two_Menu_F1_E3[3] = 0;      //设置F1_E3个位
 446   3                                      else Two_Menu_F1_E3[3]++;
 447   3                                      break;
 448   3                              case TWO_MENU_F1_E4_D1:
 449   3                                      if (Two_Menu_F1_E4[0] == 20) Two_Menu_F1_E4[0] = 0;     //设置F1_E4千位
 450   3                                      else Two_Menu_F1_E4[0]++;
 451   3                                      break;
 452   3                              case TWO_MENU_F1_E4_D2:
 453   3                                      if (Two_Menu_F1_E4[1] == 9) Two_Menu_F1_E4[1] = 0;      //设置F1_E4百位
 454   3                                      else Two_Menu_F1_E4[1]++;
 455   3                                      break;
 456   3                              case TWO_MENU_F1_E4_D3:
 457   3                                      if (Two_Menu_F1_E4[2] == 9) Two_Menu_F1_E4[2] = 0;      //设置F1_E4十位
 458   3                                      else Two_Menu_F1_E4[2]++;
 459   3                                      break;
 460   3                              case TWO_MENU_F1_E4_D4:
 461   3                                      if (Two_Menu_F1_E4[3] == 9) Two_Menu_F1_E4[3] = 0;      //设置F1_E4个位
 462   3                                      else Two_Menu_F1_E4[3]++;
 463   3                                      break;
 464   3                              case TWO_MENU_F2_E1_D1:
 465   3                                      if (Two_Menu_F2_E1[0] == 20) Two_Menu_F2_E1[0] = 0;     //设置F2_E1千位
 466   3                                      else Two_Menu_F2_E1[0]++;
 467   3                                      break;
 468   3                              case TWO_MENU_F2_E1_D2:
 469   3                                      if (Two_Menu_F2_E1[1] == 9) Two_Menu_F2_E1[1] = 0;      //设置F2_E1百位
 470   3                                      else Two_Menu_F2_E1[1]++;
 471   3                                      break;
 472   3                              case TWO_MENU_F2_E1_D3:
 473   3                                      if (Two_Menu_F2_E1[2] == 9) Two_Menu_F2_E1[2] = 0;      //设置F2_E1十位
 474   3                                      else Two_Menu_F2_E1[2]++;
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 10  

 475   3                                      break;
 476   3                              case TWO_MENU_F2_E1_D4:
 477   3                                      if (Two_Menu_F2_E1[3] == 9) Two_Menu_F2_E1[3] = 0;      //设置F2_E1个位
 478   3                                      else Two_Menu_F2_E1[3]++;
 479   3                                      break;
 480   3                              case TWO_MENU_F2_E2_D1:
 481   3                                      if (Two_Menu_F2_E2[0] == 20) Two_Menu_F2_E2[0] = 0;     //设置F2_E2千位
 482   3                                      else Two_Menu_F2_E2[0]++;
 483   3                                      break;
 484   3                              case TWO_MENU_F2_E2_D2:
 485   3                                      if (Two_Menu_F2_E2[1] == 9) Two_Menu_F2_E2[1] = 0;      //设置F2_E2百位
 486   3                                      else Two_Menu_F2_E2[1]++;
 487   3                                      break;
 488   3                              case TWO_MENU_F2_E2_D3:
 489   3                                      if (Two_Menu_F2_E2[2] == 9) Two_Menu_F2_E2[2] = 0;      //设置F2_E2十位
 490   3                                      else Two_Menu_F2_E2[2]++;
 491   3                                      break;
 492   3                              case TWO_MENU_F2_E2_D4:
 493   3                                      if (Two_Menu_F2_E2[3] == 9) Two_Menu_F2_E2[3] = 0;      //设置F2_E2个位
 494   3                                      else Two_Menu_F2_E2[3]++;
 495   3                                      break;
 496   3                              case TWO_MENU_F2_E3_D1:
 497   3                                      if (Two_Menu_F2_E3[0] == 20) Two_Menu_F2_E3[0] = 0;     //设置F2_E3千位
 498   3                                      else Two_Menu_F2_E3[0]++;
 499   3                                      break;
 500   3                              case TWO_MENU_F2_E3_D2:
 501   3                                      if (Two_Menu_F2_E3[1] == 9) Two_Menu_F2_E3[1] = 0;      //设置F2_E3百位
 502   3                                      else Two_Menu_F2_E3[1]++;
 503   3                                      break;
 504   3                              case TWO_MENU_F2_E3_D3:
 505   3                                      if (Two_Menu_F2_E3[2] == 9) Two_Menu_F2_E3[2] = 0;      //设置F2_E3十位
 506   3                                      else Two_Menu_F2_E3[2]++;
 507   3                                      break;
 508   3                              case TWO_MENU_F2_E3_D4:
 509   3                                      if (Two_Menu_F2_E3[3] == 9) Two_Menu_F2_E3[3] = 0;      //设置F2_E3个位
 510   3                                      else Two_Menu_F2_E3[3]++;
 511   3                                      break;
 512   3                              case TWO_MENU_F2_E4_D1:
 513   3                                      if (Two_Menu_F2_E4[0] == 20) Two_Menu_F2_E4[0] = 0;     //设置F2_E4千位
 514   3                                      else Two_Menu_F2_E4[0]++;
 515   3                                      break;
 516   3                              case TWO_MENU_F2_E4_D2:
 517   3                                      if (Two_Menu_F2_E4[1] == 9) Two_Menu_F2_E4[1] = 0;      //设置F2_E4百位
 518   3                                      else Two_Menu_F2_E4[1]++;
 519   3                                      break;
 520   3                              case TWO_MENU_F2_E4_D3:
 521   3                                      if (Two_Menu_F2_E4[2] == 9) Two_Menu_F2_E4[2] = 0;      //设置F2_E4十位
 522   3                                      else Two_Menu_F2_E4[2]++;
 523   3                                      break;
 524   3                              case TWO_MENU_F2_E4_D4:
 525   3                                      if (Two_Menu_F2_E4[3] == 9) Two_Menu_F2_E4[3] = 0;      //设置F2_E4个位
 526   3                                      else Two_Menu_F2_E4[3]++;
 527   3                              case TWO_MENU_F3_E1_SET:
 528   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 529   3                                      else Two_Menu_F3_E1 = 1;
 530   3                                      break;
 531   3                              case TWO_MENU_F3_E2_SET:
 532   3                                      if (Two_Menu_F3_E2 == 20) Two_Menu_F3_E2 = 1;   //存储队列个数
 533   3                                      else Two_Menu_F3_E2 ++;
 534   3                                      break;
 535   3                              case TWO_MENU_F4_SET:
 536   3                                      if (Two_Menu_F4_E1 == 99) Two_Menu_F4_E1 = 0;   //销号时间设置
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 11  

 537   3                                      else Two_Menu_F4_E1++;
 538   3                                      break;
 539   3                              case TWO_MENU_F5_SET:
 540   3                                      if (Two_Menu_F5_E1 == 99) Two_Menu_F5_E1 = 0;   //循环时间设置
 541   3                                      else Two_Menu_F5_E1++;
 542   3                                      break;
 543   3                              case TWO_MENU_F6_E1_SET:
 544   3                                      if (Two_Menu_F6_E1 == 5) Two_Menu_F6_E1 = 0;    //F6_E1语音选择
 545   3                                      else Two_Menu_F6_E1++;
 546   3                                      break;
 547   3                              case TWO_MENU_F6_E2_SET:
 548   3                                      if (Two_Menu_F6_E2 == 9) Two_Menu_F6_E2 = 1;    //F6_E2语音报读次数
 549   3                                      else Two_Menu_F6_E2++;
 550   3                                      break;
 551   3                              case TWO_MENU_F6_E3_SET:
 552   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 553   3                                      else Two_Menu_F6_E3 = 0;
 554   3                                      break;
 555   3                              case TWO_MENU_F6_E4_SET:
 556   3                                      if (Two_Menu_F6_E4 == 9) Two_Menu_F6_E4 = 0;    //F6_E4音量大小调整
 557   3                                      else Two_Menu_F6_E4++;
 558   3                                      break;
 559   3                              case TWO_MENU_F6_E5_SET:
 560   3                                      if (Two_Menu_F6_E5 == 7) Two_Menu_F6_E5 = 0;    //F6_E5屏幕亮度调整
 561   3                                      else Two_Menu_F6_E5++;
 562   3                                      break;
 563   3                              case TWO_MENU_F7_E1_SET:
 564   3                                      if (Two_Menu_F7_E1 == 11) Two_Menu_F7_E1 = 0;   //F7_E1原始规则 999*9
 565   3                                      else Two_Menu_F7_E1++;
 566   3                                      break;
 567   3                              case TWO_MENU_F7_E2_SET:
 568   3                                      if (Two_Menu_F7_E2 == 11) Two_Menu_F7_E2 = 0;   //F7_E2附加规则 9999*9
 569   3                                      else Two_Menu_F7_E2++;
 570   3                                      break;
 571   3                              case TWO_MENU_F7_E3_SET:
 572   3                                      if (Two_Menu_F7_E3 == 11) Two_Menu_F7_E3 = 0;   //F7_E3附加规则 999*99
 573   3                                      else Two_Menu_F7_E3++;
 574   3                                      break;
 575   3                              case TWO_MENU_F7_E4_SET:
 576   3                                      if (Two_Menu_F7_E4 == 11) Two_Menu_F7_E4 = 0;   //F7_E3附加规则 9999*99
 577   3                                      else Two_Menu_F7_E4++;
 578   3                                      break;
 579   3                              case TWO_MENU_F8_E1_SET:
 580   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 581   3                                      else Two_Menu_F8_E1 = 1 ;
 582   3                                      break;
 583   3                              case TWO_MENU_F8_E2_SET:
 584   3                                      if (Two_Menu_F8_E2 == 43) Two_Menu_F8_E2 = 0;   //F8_E2键位设置
 585   3                                      else Two_Menu_F8_E2++;
 586   3                                      break;
 587   3                              case DECODER_MENU:
 588   3                                      CycleUp();
 589   3                                      break;
 590   3                              case TWO_MENU_FC_SET:
 591   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 592   3                                      else Two_Menu_FC_E1 = 1;
 593   3                              case TWO_MENU_Fb_SET:
 594   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 595   3                                      else Two_Menu_Fb_E1 = 1;
 596   3      
 597   3                                      default:break;
 598   3                              }       
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 12  

 599   2                              func_index = table[func_index].up; break;
 600   2                      case KEY_DOWN:
 601   2                              switch (func_index)
 602   2                              {
 603   3                              case TWO_MENU_F0_YEAR:
 604   3                                      if (time_buf1[1] == 0) time_buf1[1] = 99;       //设置万年历 年
 605   3                                      else time_buf1[1]--;
 606   3                                      break;
 607   3                              case TWO_MENU_F0_MOUTH:
 608   3                                      if (time_buf1[2] == 1) time_buf1[2] = 12;       //设置万年历 月
 609   3                                      else time_buf1[2]--;
 610   3                                      break;
 611   3                              case TWO_MENU_F0_DAY:
 612   3                                      if (time_buf1[3] == 1) time_buf1[3] = 31;       //设置万年历 日
 613   3                                      else time_buf1[3]--;
 614   3                                      break;
 615   3                              case TWO_MENU_F0_WEEK:
 616   3                                      if (time_buf1[7] == 1) time_buf1[7] = 7;        //设置万年历 星期
 617   3                                      else time_buf1[7]--;
 618   3                                      break;
 619   3                              case TWO_MENU_F0_HOUR:
 620   3                                      if (time_buf1[4] == 0) time_buf1[4] = 23;       //设置万年历 小时
 621   3                                      else time_buf1[4]--;
 622   3                                      break;
 623   3                              case TWO_MENU_F0_MINUTE:
 624   3                                      if (time_buf1[5] == 0) time_buf1[5] = 59;       //设置万年历 分钟
 625   3                                      else time_buf1[5]--;
 626   3                                      break;
 627   3                              case TWO_MENU_F1_E1_D1:
 628   3                                      if (Two_Menu_F1_E1[0] == 0) Two_Menu_F1_E1[0] = 20;     //设置F1_E1千位
 629   3                                      else Two_Menu_F1_E1[0]--;
 630   3                                      break;
 631   3                              case TWO_MENU_F1_E1_D2:
 632   3                                      if (Two_Menu_F1_E1[1] == 0) Two_Menu_F1_E1[1] = 9;      //设置F1_E1百位
 633   3                                      else Two_Menu_F1_E1[1]--;
 634   3                                      break;
 635   3                              case TWO_MENU_F1_E1_D3:
 636   3                                      if (Two_Menu_F1_E1[2] == 0) Two_Menu_F1_E1[2] = 9;      //设置F1_E1十位
 637   3                                      else Two_Menu_F1_E1[2]--;
 638   3                                      break;
 639   3                              case TWO_MENU_F1_E1_D4:
 640   3                                      if (Two_Menu_F1_E1[3] == 0) Two_Menu_F1_E1[3] = 9;      //设置F1_E1个位
 641   3                                      else Two_Menu_F1_E1[3]--;
 642   3                                      break;
 643   3                              case TWO_MENU_F1_E2_D1:
 644   3                                      if (Two_Menu_F1_E2[0] == 0) Two_Menu_F1_E2[0] = 20;     //设置F1_E2千位
 645   3                                      else Two_Menu_F1_E2[0]--;
 646   3                                      break;
 647   3                              case TWO_MENU_F1_E2_D2:
 648   3                                      if (Two_Menu_F1_E2[1] == 0) Two_Menu_F1_E2[1] = 9;      //设置F1_E2百位
 649   3                                      else Two_Menu_F1_E2[1]--;
 650   3                                      break;
 651   3                              case TWO_MENU_F1_E2_D3:
 652   3                                      if (Two_Menu_F1_E2[2] == 0) Two_Menu_F1_E2[2] = 9;      //设置F1_E2十位
 653   3                                      else Two_Menu_F1_E2[2]--;
 654   3                                      break;
 655   3                              case TWO_MENU_F1_E2_D4:
 656   3                                      if (Two_Menu_F1_E2[3] == 0) Two_Menu_F1_E2[3] = 9;      //设置F1_E2个位
 657   3                                      else Two_Menu_F1_E2[3]--;
 658   3                                      break;
 659   3                              case TWO_MENU_F1_E3_D1:
 660   3                                      if (Two_Menu_F1_E3[0] == 0) Two_Menu_F1_E3[0] = 20;     //设置F1_E3千位
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 13  

 661   3                                      else Two_Menu_F1_E3[0]--;
 662   3                                      break;
 663   3                              case TWO_MENU_F1_E3_D2:
 664   3                                      if (Two_Menu_F1_E3[1] == 0) Two_Menu_F1_E3[1] = 9;      //设置F1_E3百位
 665   3                                      else Two_Menu_F1_E3[1]--;
 666   3                                      break;
 667   3                              case TWO_MENU_F1_E3_D3:
 668   3                                      if (Two_Menu_F1_E3[2] == 0) Two_Menu_F1_E3[2] = 9;      //设置F1_E3十位
 669   3                                      else Two_Menu_F1_E3[2]--;
 670   3                                      break;
 671   3                              case TWO_MENU_F1_E3_D4:
 672   3                                      if (Two_Menu_F1_E3[3] == 0) Two_Menu_F1_E3[3] = 9;      //设置F1_E3个位
 673   3                                      else Two_Menu_F1_E3[3]--;
 674   3                                      break;
 675   3                              case TWO_MENU_F1_E4_D1:
 676   3                                      if (Two_Menu_F1_E4[0] == 0) Two_Menu_F1_E4[0] = 20;     //设置F1_E4千位
 677   3                                      else Two_Menu_F1_E4[0]--;
 678   3                                      break;
 679   3                              case TWO_MENU_F1_E4_D2:
 680   3                                      if (Two_Menu_F1_E4[1] == 0) Two_Menu_F1_E4[1] = 9;      //设置F1_E4百位
 681   3                                      else Two_Menu_F1_E4[1]--;
 682   3                                      break;
 683   3                              case TWO_MENU_F1_E4_D3:
 684   3                                      if (Two_Menu_F1_E4[2] == 0) Two_Menu_F1_E4[2] = 9;      //设置F1_E4十位
 685   3                                      else Two_Menu_F1_E4[2]--;
 686   3                                      break;
 687   3                              case TWO_MENU_F1_E4_D4:
 688   3                                      if (Two_Menu_F1_E4[3] == 0) Two_Menu_F1_E4[3] = 9;      //设置F1_E4个位
 689   3                                      else Two_Menu_F1_E4[3]--;
 690   3                                      break;
 691   3                              case TWO_MENU_F2_E1_D1:
 692   3                                      if (Two_Menu_F2_E1[0] == 0) Two_Menu_F2_E1[0] = 20;     //设置F2_E1千位
 693   3                                      else Two_Menu_F2_E1[0]--;
 694   3                                      break;
 695   3                              case TWO_MENU_F2_E1_D2:
 696   3                                      if (Two_Menu_F2_E1[1] == 0) Two_Menu_F2_E1[1] = 9;      //设置F2_E1百位
 697   3                                      else Two_Menu_F2_E1[1]--;
 698   3                                      break;
 699   3                              case TWO_MENU_F2_E1_D3:
 700   3                                      if (Two_Menu_F2_E1[2] == 0) Two_Menu_F2_E1[2] = 9;      //设置F2_E1十位
 701   3                                      else Two_Menu_F2_E1[2]--;
 702   3                                      break;
 703   3                              case TWO_MENU_F2_E1_D4:
 704   3                                      if (Two_Menu_F2_E1[3] == 0) Two_Menu_F2_E1[3] = 9;      //设置F2_E1个位
 705   3                                      else Two_Menu_F2_E1[3]--;
 706   3                                      break;
 707   3                              case TWO_MENU_F2_E2_D1:
 708   3                                      if (Two_Menu_F2_E2[0] == 0) Two_Menu_F2_E2[0] = 20;     //设置F2_E2千位
 709   3                                      else Two_Menu_F2_E2[0]--;
 710   3                                      break;
 711   3                              case TWO_MENU_F2_E2_D2:
 712   3                                      if (Two_Menu_F2_E2[1] == 0) Two_Menu_F2_E2[1] = 9;      //设置F2_E2百位
 713   3                                      else Two_Menu_F2_E2[1]--;
 714   3                                      break;
 715   3                              case TWO_MENU_F2_E2_D3:
 716   3                                      if (Two_Menu_F2_E2[2] == 0) Two_Menu_F2_E2[2] = 9;      //设置F2_E2十位
 717   3                                      else Two_Menu_F2_E2[2]--;
 718   3                                      break;
 719   3                              case TWO_MENU_F2_E2_D4:
 720   3                                      if (Two_Menu_F2_E2[3] == 0) Two_Menu_F2_E2[3] = 9;      //设置F2_E2个位
 721   3                                      else Two_Menu_F2_E2[3]--;
 722   3                                      break;
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 14  

 723   3                              case TWO_MENU_F2_E3_D1:
 724   3                                      if (Two_Menu_F2_E3[0] == 0) Two_Menu_F2_E3[0] = 20;     //设置F2_E3千位
 725   3                                      else Two_Menu_F2_E3[0]--;
 726   3                                      break;
 727   3                              case TWO_MENU_F2_E3_D2:
 728   3                                      if (Two_Menu_F2_E3[1] == 0) Two_Menu_F2_E3[1] = 9;      //设置F2_E3百位
 729   3                                      else Two_Menu_F2_E3[1]--;
 730   3                                      break;
 731   3                              case TWO_MENU_F2_E3_D3:
 732   3                                      if (Two_Menu_F2_E3[2] == 0) Two_Menu_F2_E3[2] = 9;      //设置F2_E3十位
 733   3                                      else Two_Menu_F2_E3[2]--;
 734   3                                      break;
 735   3                              case TWO_MENU_F2_E3_D4:
 736   3                                      if (Two_Menu_F2_E3[3] == 0) Two_Menu_F2_E3[3] = 9;      //设置F2_E3个位
 737   3                                      else Two_Menu_F2_E3[3]--;
 738   3                                      break;
 739   3                              case TWO_MENU_F2_E4_D1:
 740   3                                      if (Two_Menu_F2_E4[0] == 0) Two_Menu_F2_E4[0] = 20;     //设置F2_E4千位
 741   3                                      else Two_Menu_F2_E4[0]--;
 742   3                                      break;
 743   3                              case TWO_MENU_F2_E4_D2:
 744   3                                      if (Two_Menu_F2_E4[1] == 0) Two_Menu_F2_E4[1] = 9;      //设置F2_E4百位
 745   3                                      else Two_Menu_F2_E4[1]--;
 746   3                                      break;
 747   3                              case TWO_MENU_F2_E4_D3:
 748   3                                      if (Two_Menu_F2_E4[2] == 0) Two_Menu_F2_E4[2] = 9;      //设置F2_E4十位
 749   3                                      else Two_Menu_F2_E4[2]--;
 750   3                                      break;
 751   3                              case TWO_MENU_F2_E4_D4:
 752   3                                      if (Two_Menu_F2_E4[3] == 0) Two_Menu_F2_E4[3] = 9;      //设置F2_E4个位
 753   3                                      else Two_Menu_F2_E4[3]--;
 754   3                                      break;
 755   3                              case TWO_MENU_F3_E1_SET:
 756   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 757   3                                      else Two_Menu_F3_E1 = 1;
 758   3                                      break;
 759   3                              case TWO_MENU_F3_E2_SET:
 760   3                                      if (Two_Menu_F3_E2 == 1) Two_Menu_F3_E2 = 20;   //存储队列个数
 761   3                                      else Two_Menu_F3_E2--;
 762   3                                      break;
 763   3                              case TWO_MENU_F4_SET:
 764   3                                      if (Two_Menu_F4_E1 == 0) Two_Menu_F4_E1 = 99;   //销号时间设置
 765   3                                      else Two_Menu_F4_E1--;
 766   3                                      break;
 767   3                              case TWO_MENU_F5_SET:
 768   3                                      if (Two_Menu_F5_E1 == 0) Two_Menu_F5_E1 = 99;   //销号时间设置
 769   3                                      else Two_Menu_F5_E1--;
 770   3                                      break;
 771   3                              case TWO_MENU_F6_E1_SET:
 772   3                                      if (Two_Menu_F6_E1 == 0) Two_Menu_F6_E1 = 5;    //F6_E1额语音选择
 773   3                                      else Two_Menu_F6_E1--;
 774   3                                      break;
 775   3                              case TWO_MENU_F6_E2_SET:
 776   3                                      if (Two_Menu_F6_E2 == 1) Two_Menu_F6_E2 = 9;    //F6_E2语音报读次数调整
 777   3                                      else Two_Menu_F6_E2--;
 778   3                                      break;
 779   3                              case TWO_MENU_F6_E3_SET:
 780   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 781   3                                      else Two_Menu_F6_E3 = 0;
 782   3                                      break;
 783   3                              case TWO_MENU_F6_E4_SET:
 784   3                                      if (Two_Menu_F6_E4 == 0) Two_Menu_F6_E4 = 9;    //F6_E4音量大小调整
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 15  

 785   3                                      else Two_Menu_F6_E4--;
 786   3                                      break;
 787   3                              case TWO_MENU_F6_E5_SET:
 788   3                                      if (Two_Menu_F6_E5 == 0) Two_Menu_F6_E5 = 7;    //F6_E5屏幕亮度调整
 789   3                                      else Two_Menu_F6_E5--;
 790   3                                      break;
 791   3                              case TWO_MENU_F7_E1_SET:
 792   3                                      if (Two_Menu_F7_E1 == 0) Two_Menu_F7_E1 = 11;   //F7_E1原始规则 999*9
 793   3                                      else Two_Menu_F7_E1--;
 794   3                                      break;
 795   3                              case TWO_MENU_F7_E2_SET:
 796   3                                      if (Two_Menu_F7_E2 == 0) Two_Menu_F7_E2 = 11;   //F7_E2附加规则 9999*9
 797   3                                      else Two_Menu_F7_E2--;
 798   3                                      break;
 799   3                              case TWO_MENU_F7_E3_SET:
 800   3                                      if (Two_Menu_F7_E3 == 0) Two_Menu_F7_E3 = 11;   //F7_E3附加规则 999*99
 801   3                                      else Two_Menu_F7_E3--;
 802   3                                      break;
 803   3                              case TWO_MENU_F7_E4_SET:
 804   3                                      if (Two_Menu_F7_E4 == 0) Two_Menu_F7_E4 = 11;   //F7_E3附加规则 9999*99
 805   3                                      else Two_Menu_F7_E4--;
 806   3                                      break;
 807   3                              case TWO_MENU_F8_E1_SET:
 808   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 809   3                                      else Two_Menu_F8_E1 = 1;
 810   3                                      break;
 811   3                              case TWO_MENU_F8_E2_SET:
 812   3                                      if (Two_Menu_F8_E2 == 0) Two_Menu_F8_E2 = 43;   //F8_E2键位设置
 813   3                                      else Two_Menu_F8_E2--;
 814   3                                      break;
 815   3                              case DECODER_MENU:
 816   3                                      CycleDown();
 817   3                                      break;
 818   3                              case TWO_MENU_FC_SET:
 819   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 820   3                                      else Two_Menu_FC_E1 = 1;
 821   3                              case TWO_MENU_Fb_SET:
 822   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 823   3                                      else Two_Menu_Fb_E1 = 1;
 824   3      
 825   3                                      default:break;
 826   3                              }
 827   2                              func_index = table[func_index].down; break;
 828   2                      default:break;
 829   2              }
 830   1              current_operation_index = table[func_index].index_operation;
 831   1              (*current_operation_index)();//执行当前操作函数
 832   1      }
 833          
 834          void delay10ms(void)   //误差 -0.054253472222us
 835          {
 836   1              unsigned char a, b, c;
 837   1              for (c = 4; c>0; c--)
 838   1              for (b = 52; b>0; b--)
 839   1              for (a = 220; a>0; a--);
 840   1              _nop_();  //if Keil,require use intrins.h
 841   1      }
 842          
 843          unsigned char return_func_index(void)
 844          {
 845   1              unsigned char func_index_temp = 0;
 846   1              func_index_temp = func_index;
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 16  

 847   1              return func_index_temp;
 848   1      }
 849          
 850          void set_func_index(unsigned char temp)
 851          {
 852   1              func_index = temp;
 853   1      }
 854          
 855          unsigned char return_Two_Menu_F3_E1(void)
 856          {
 857   1              unsigned char temp = 0;
 858   1              temp = Two_Menu_F3_E1;
 859   1              return temp;
 860   1      }
 861          
 862          unsigned char return_Two_Menu_F3_E2(void)
 863          {
 864   1              unsigned char temp = 0;
 865   1              temp = Two_Menu_F3_E2;
 866   1              return temp;
 867   1      }
 868          
 869          unsigned char return_Two_Menu_F4_E1(void)
 870          {
 871   1              unsigned char temp = 0;
 872   1              temp = Two_Menu_F4_E1;
 873   1              return temp;
 874   1      }
 875          
 876          unsigned char return_Two_Menu_F5_E1(void)
 877          {
 878   1              unsigned char temp = 0;
 879   1              temp = Two_Menu_F5_E1;
 880   1              return temp;
 881   1      }
 882          
 883          unsigned char return_Two_Menu_F6_E1(void)
 884          {
 885   1              unsigned char temp = 0;
 886   1              temp = Two_Menu_F6_E1;
 887   1              return temp;
 888   1      }
 889          
 890          unsigned char return_Two_Menu_F6_E2(void)
 891          {
 892   1              unsigned char temp = 0;
 893   1              temp = Two_Menu_F6_E2;
 894   1              return temp;
 895   1      }
 896          
 897          unsigned char return_Two_Menu_F6_E3(void)
 898          {
 899   1              unsigned char temp = 0;
 900   1              temp = Two_Menu_F6_E3;
 901   1              return temp;
 902   1      }
 903          
 904          unsigned char return_Two_Menu_F6_E4(void)
 905          {
 906   1              unsigned char temp = 0;
 907   1              temp = Two_Menu_F6_E4;
 908   1              return temp;
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 17  

 909   1      }
 910          
 911          unsigned char return_Two_Menu_F6_E5(void)
 912          {
 913   1              unsigned char temp = 0;
 914   1              temp = Two_Menu_F6_E5;
 915   1              return temp;
 916   1      }
 917          
 918          unsigned char return_Two_Menu_F7_E1(void)
 919          {
 920   1              unsigned char temp = 0;
 921   1              temp = Two_Menu_F7_E1;
 922   1              return temp;
 923   1      }
 924          
 925          unsigned char return_Two_Menu_F7_E2(void)
 926          {
 927   1              unsigned char temp = 0;
 928   1              temp = Two_Menu_F7_E2;
 929   1              return temp;
 930   1      }
 931          
 932          unsigned char return_Two_Menu_F7_E3(void)
 933          {
 934   1              unsigned char temp = 0;
 935   1              temp = Two_Menu_F7_E3;
 936   1              return temp;
 937   1      }
 938          
 939          unsigned char return_Two_Menu_F7_E4(void)
 940          {
 941   1              unsigned char temp = 0;
 942   1              temp = Two_Menu_F7_E4;
 943   1              return temp;
 944   1      }
 945          
 946          unsigned char return_Two_Menu_F8_E1(void)
 947          {
 948   1              unsigned char temp = 0;
 949   1              temp = Two_Menu_F8_E1;
 950   1              return temp;
 951   1      }
 952          
 953          unsigned char return_Two_Menu_F8_E2(void)
 954          {
 955   1              unsigned char temp = 0;
 956   1              temp = Two_Menu_F8_E2;
 957   1              return temp;
 958   1      }
 959          
 960          unsigned char return_sound_table(void)
 961          {
 962   1              unsigned char temp = 0;
 963   1              temp = sound_table;
 964   1              return temp;
 965   1      }
 966          
 967          void set_sound_table(unsigned char temp)
 968          {
 969   1              sound_table = temp;
 970   1      }
C51 COMPILER V9.00   KEY                                                                   10/06/2015 10:45:54 PAGE 18  

 971          
 972          unsigned char return_Two_Menu_FC_E1(void)
 973          {
 974   1              unsigned char temp = 0;
 975   1              temp = Two_Menu_FC_E1;
 976   1              return temp;
 977   1      }
 978          
 979          unsigned char return_Two_Menu_Fb_E1(void)
 980          {
 981   1              unsigned char temp = 0;
 982   1              temp = Two_Menu_Fb_E1;
 983   1              return temp;
 984   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3037    ----
   CONSTANT SIZE    =    818    ----
   XDATA SIZE       =     55       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
