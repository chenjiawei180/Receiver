C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\key.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\k
                    -ey.lst) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "usart.h"
   3          #include "tm1629.h"
   4          #include "menu.h"
   5          #include "timer.h"
   6          #include "ds1302.h"
   7          #include "at24c256.h"
   8          #include "gd5800.h"
   9          #include "ev1527.h"
  10          
  11          unsigned char sound_table = 0;
  12          unsigned char accumulate_decoder = 0;
  13          
  14          unsigned char func_index = 0; //多级菜单索引变量
  15          void(*current_operation_index)();// 多级菜单函数指针
  16          
  17          unsigned char Two_Menu_F1_E1[4] = { 0, 0, 0, 1 }; //F1_E1
  18          unsigned char Two_Menu_F1_E2[4] = { 0, 0, 0, 1 }; //F1_E2
  19          unsigned char Two_Menu_F1_E3[4] = { 0, 0, 0, 1 }; //F1_E3
  20          unsigned char Two_Menu_F1_E4[4] = { 0, 0, 0, 1 }; //F1_E4
  21          unsigned char Two_Menu_F2_E1[4] = { 0, 0, 0, 1 }; //F2_E1
  22          unsigned char Two_Menu_F2_E2[4] = { 0, 0, 0, 1 }; //F2_E2
  23          unsigned char Two_Menu_F2_E3[4] = { 0, 0, 0, 1 }; //F2_E3
  24          unsigned char Two_Menu_F2_E4[4] = { 0, 0, 0, 1 }; //F2_E4
  25          
  26          unsigned char Two_Menu_F3_E1 = 1; //即时模式或者排队显示
  27          unsigned char Two_Menu_F3_E2 = 12; //呼叫时候存储数量
  28          
  29          unsigned char Two_Menu_F4_E1 = 0; //销号时间
  30          unsigned char Two_Menu_F5_E1 = 0; //循环间隔时间
  31          
  32          unsigned char Two_Menu_F6_E1 = 0; //简单报读
  33          unsigned char Two_Menu_F6_E2 = 1; //语音报读次数
  34          unsigned char Two_Menu_F6_E3 = 0; //循环时候是否报读
  35          unsigned char Two_Menu_F6_E4 = 0; //音量大小调整
  36          unsigned char Two_Menu_F6_E5 = 0; //显示屏LED亮度调整
  37          unsigned char Two_Menu_F6_E6 = 1; //语音导航调整
  38          unsigned char Two_Menu_F6_E7 = 0; //语音导航调整
  39          
  40          unsigned char Two_Menu_F7_E1 = 11; // E1默认键盘规则 999*9
  41          unsigned char Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
  42          unsigned char Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
  43          unsigned char Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
  44          
  45          unsigned char Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
  46          
  47          unsigned char Two_Menu_F8_E2 = 0; // 键位设置
  48          
  49          unsigned char Two_Menu_Fb_E1 = 1; // 设置主机有没有销号功能
  50          unsigned char Two_Menu_FC_E1 = 1; // 设置万年历待机与----待机的切换
  51          unsigned char Two_Menu_Fd_E1 = 1; // E1 E2 E3 E4 E5 E6
  52          
  53          key_table code table[100] =
  54          {       // 目标索引                 上                          下          确认                 退出         函数
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 2   

  55                  { MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, (*fun0) }, //待机
  56          
  57                  { ONE_MENU_F0, ONE_MENU_F1, ONE_MENU_Fd, TWO_MENU_F0_YEAR , MENU_STANDBY, (*fun1) }, //F0-F9
  58                  { ONE_MENU_F1, ONE_MENU_F2, ONE_MENU_F0, TWO_MENU_F1_E1   , MENU_STANDBY, (*fun2) },
  59                  { ONE_MENU_F2, ONE_MENU_F3, ONE_MENU_F1, TWO_MENU_F2_E1   , MENU_STANDBY, (*fun3) },
  60                  { ONE_MENU_F3, ONE_MENU_F4, ONE_MENU_F2, TWO_MENU_F3_E1   , MENU_STANDBY, (*fun4) },
  61                  { ONE_MENU_F4, ONE_MENU_F5, ONE_MENU_F3, TWO_MENU_F4_SET  , MENU_STANDBY, (*fun5) },
  62                  { ONE_MENU_F5, ONE_MENU_F6, ONE_MENU_F4, TWO_MENU_F5_SET  , MENU_STANDBY, (*fun6) },
  63                  { ONE_MENU_F6, ONE_MENU_F7, ONE_MENU_F5, TWO_MENU_F6_E1   , MENU_STANDBY, (*fun7) },
  64                  { ONE_MENU_F7, ONE_MENU_F8, ONE_MENU_F6, TWO_MENU_F7_E1   , MENU_STANDBY, (*fun8) },
  65                  { ONE_MENU_F8, ONE_MENU_F9, ONE_MENU_F7, TWO_MENU_F8_E1   , MENU_STANDBY, (*fun9) },
  66                  { ONE_MENU_F9, ONE_MENU_FA, ONE_MENU_F8, TWO_MENU_F9_E1   , MENU_STANDBY, (*fun10) },
  67                  { ONE_MENU_FA, ONE_MENU_Fb, ONE_MENU_F9, TWO_MENU_FA_SET  , MENU_STANDBY, (*fun11) }, //FA
  68                  { ONE_MENU_Fb, ONE_MENU_FC, ONE_MENU_FA, TWO_MENU_Fb_SET  , MENU_STANDBY, (*fun12) }, //Fb
  69                  { ONE_MENU_FC, ONE_MENU_Fd, ONE_MENU_Fb, TWO_MENU_FC_SET  , MENU_STANDBY, (*fun13) }, //FC
  70                  { ONE_MENU_Fd, ONE_MENU_F0, ONE_MENU_FC, TWO_MENU_Fd_SET  , MENU_STANDBY, (*fun14) }, //Fd
  71          
  72                  { TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_MOUTH , ONE_MENU_F0, (*fun15) }
             -, //万年历 年
  73                  { TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_DAY   , ONE_MENU_F0, (*fun16) }
             -, //万年历 月
  74                  { TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_WEEK  , ONE_MENU_F0, (*fun17) }
             -, //万年历 日
  75                  { TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_HOUR  , ONE_MENU_F0, (*fun18) }
             -, //万年历 周
  76                  { TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_MINUTE, ONE_MENU_F0, (*fun19) }
             -, //万年历 小时
  77                  { TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_YEAR  , ONE_MENU_F0, (*fun20) }
             -, //万年历 分钟
  78          
  79                  { TWO_MENU_F1_E1, TWO_MENU_F1_E2, TWO_MENU_F1_E4, TWO_MENU_F1_E1_D4, ONE_MENU_F1, (*fun21) }, //F1子菜单E
             -1
  80                  { TWO_MENU_F1_E2, TWO_MENU_F1_E3, TWO_MENU_F1_E1, TWO_MENU_F1_E2_D4, ONE_MENU_F1, (*fun22) }, //F1子菜单E
             -2
  81                  { TWO_MENU_F1_E3, TWO_MENU_F1_E4, TWO_MENU_F1_E2, TWO_MENU_F1_E3_D4, ONE_MENU_F1, (*fun23) }, //F1子菜单E
             -3
  82                  { TWO_MENU_F1_E4, TWO_MENU_F1_E1, TWO_MENU_F1_E3, TWO_MENU_F1_E4_D4, ONE_MENU_F1, (*fun24) }, //F1子菜单E
             -4
  83          
  84                  { TWO_MENU_F2_E1, TWO_MENU_F2_E2, TWO_MENU_F2_E4, TWO_MENU_F2_E1_D4, ONE_MENU_F2, (*fun25) }, //F2子菜单E
             -1
  85                  { TWO_MENU_F2_E2, TWO_MENU_F2_E3, TWO_MENU_F2_E1, TWO_MENU_F2_E2_D4, ONE_MENU_F2, (*fun26) }, //F2子菜单E
             -2
  86                  { TWO_MENU_F2_E3, TWO_MENU_F2_E4, TWO_MENU_F2_E2, TWO_MENU_F2_E3_D4, ONE_MENU_F2, (*fun27) }, //F2子菜单E
             -3
  87                  { TWO_MENU_F2_E4, TWO_MENU_F2_E1, TWO_MENU_F2_E3, TWO_MENU_F2_E4_D4, ONE_MENU_F2, (*fun28) }, //F2子菜单E
             -4
  88          
  89                  { TWO_MENU_F3_E1, TWO_MENU_F3_E2, TWO_MENU_F3_E2, TWO_MENU_F3_E1_SET, ONE_MENU_F3, (*fun29) }, //F3子菜单
             -E1
  90                  { TWO_MENU_F3_E2, TWO_MENU_F3_E1, TWO_MENU_F3_E1, TWO_MENU_F3_E2_SET, ONE_MENU_F3, (*fun30) }, //F3子菜单
             -E2
  91          
  92                  { TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, ONE_MENU_F4, (*fun31) }, //F4子菜单
  93                  { TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, ONE_MENU_F5, (*fun32) }, //F5子菜单
  94          
  95                  { TWO_MENU_F6_E1, TWO_MENU_F6_E2, TWO_MENU_F6_E7, TWO_MENU_F6_E1_SET, ONE_MENU_F6, (*fun33) }, //F6子菜单
             -E1
  96                  { TWO_MENU_F6_E2, TWO_MENU_F6_E3, TWO_MENU_F6_E1, TWO_MENU_F6_E2_SET, ONE_MENU_F6, (*fun34) }, //F6子菜单
             -E2
  97                  { TWO_MENU_F6_E3, TWO_MENU_F6_E4, TWO_MENU_F6_E2, TWO_MENU_F6_E3_SET, ONE_MENU_F6, (*fun35) }, //F6子菜单
             -E3
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 3   

  98                  { TWO_MENU_F6_E4, TWO_MENU_F6_E5, TWO_MENU_F6_E3, TWO_MENU_F6_E4_SET, ONE_MENU_F6, (*fun36) }, //F6子菜单
             -E4
  99                  { TWO_MENU_F6_E5, TWO_MENU_F6_E6, TWO_MENU_F6_E4, TWO_MENU_F6_E5_SET, ONE_MENU_F6, (*fun37) }, //F6子菜单
             -E5
 100          
 101                  { TWO_MENU_F7_E1, TWO_MENU_F7_E2, TWO_MENU_F7_E4, TWO_MENU_F7_E1_SET, ONE_MENU_F7, (*fun38) }, //F7子菜单
             -E1
 102                  { TWO_MENU_F7_E2, TWO_MENU_F7_E3, TWO_MENU_F7_E1, TWO_MENU_F7_E2_SET, ONE_MENU_F7, (*fun39) }, //F7子菜单
             -E2
 103                  { TWO_MENU_F7_E3, TWO_MENU_F7_E4, TWO_MENU_F7_E2, TWO_MENU_F7_E3_SET, ONE_MENU_F7, (*fun40) }, //F7子菜单
             -E3
 104                  { TWO_MENU_F7_E4, TWO_MENU_F7_E1, TWO_MENU_F7_E3, TWO_MENU_F7_E4_SET, ONE_MENU_F7, (*fun41) }, //F7子菜单
             -E4        
 105          
 106                  { TWO_MENU_F8_E1, TWO_MENU_F8_E2, TWO_MENU_F8_E2, TWO_MENU_F8_E1_SET, ONE_MENU_F8, (*fun42) }, //F8子菜单
             -E1
 107                  { TWO_MENU_F8_E2, TWO_MENU_F8_E1, TWO_MENU_F8_E1, TWO_MENU_F8_E2_SET, ONE_MENU_F8, (*fun43) }, //F8子菜单
             -E2
 108          
 109                  { TWO_MENU_F9_E1, TWO_MENU_F9_E2, TWO_MENU_F9_E2, 0, ONE_MENU_F9, (*fun44) }, //F9子菜单E1
 110                  { TWO_MENU_F9_E2, TWO_MENU_F9_E1, TWO_MENU_F9_E1, 0, ONE_MENU_F9, (*fun45) }, //F9子菜单E2
 111          
 112                  { TWO_MENU_FA_SET, TWO_MENU_FA_SET, TWO_MENU_FA_SET, 0, ONE_MENU_FA, (*fun46) }, //FA子菜单
 113                  { TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, 0, ONE_MENU_Fb, (*fun47) }, //Fb子菜单
 114                  { TWO_MENU_FC_SET, TWO_MENU_FC_SET, TWO_MENU_FC_SET, 0, ONE_MENU_FC, (*fun48) }, //FC子菜单
 115                  { TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, 0, ONE_MENU_Fd, (*fun49) }, //Fd子菜单
 116          
 117                  { TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1, (*fun50) },
             - //F1_E1注册呼叫器
 118                  { TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1, (*fun51) },
             - //F1_E1注册呼叫器
 119                  { TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1, (*fun52) },
             - //F1_E1注册呼叫器
 120                  { TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1, (*fun53) },
             - //F1_E1注册呼叫器
 121          
 122                  { TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2, (*fun54) },
             - //F1_E2注册管理器
 123                  { TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2, (*fun55) },
             - //F1_E2注册管理器
 124                  { TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2, (*fun56) },
             - //F1_E2注册管理器
 125                  { TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2, (*fun57) },
             - //F1_E2注册管理器
 126          
 127                  { TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3, (*fun58) },
             - //F1_E3注册报警器
 128                  { TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3, (*fun59) },
             - //F1_E3注册报警器
 129                  { TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3, (*fun60) },
             - //F1_E3注册报警器
 130                  { TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3, (*fun61) },
             - //F1_E3注册报警器
 131          
 132                  { TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4, (*fun62) },
             - //F1_E3注册取消器
 133                  { TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4, (*fun63) },
             - //F1_E3注册取消器
 134                  { TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4, (*fun64) },
             - //F1_E3注册取消器
 135                  { TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4, (*fun65) },
             - //F1_E3注册取消器
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 4   

 136          
 137                  { TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1, (*fun66) },
             - //F2_E1删除呼叫器
 138                  { TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1, (*fun67) },
             - //F2_E1删除呼叫器
 139                  { TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1, (*fun68) },
             - //F2_E1删除呼叫器
 140                  { TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1, (*fun69) },
             - //F2_E1删除呼叫器
 141          
 142                  { TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2, (*fun70) },
             - //F2_E2删除管理器
 143                  { TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2, (*fun71) },
             - //F2_E2删除管理器
 144                  { TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2, (*fun72) },
             - //F2_E2删除管理器
 145                  { TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2, (*fun73) },
             - //F2_E2删除管理器
 146          
 147                  { TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3, (*fun74) },
             - //F2_E3删除报警器
 148                  { TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3, (*fun75) },
             - //F2_E3删除报警器
 149                  { TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3, (*fun76) },
             - //F2_E3删除报警器
 150                  { TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3, (*fun77) },
             - //F2_E3删除报警器
 151          
 152                  { TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4, (*fun78) },
             - //F2_E4删除取消器
 153                  { TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4, (*fun79) },
             - //F2_E4删除取消器
 154                  { TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4, (*fun80) },
             - //F2_E4删除取消器
 155                  { TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4, (*fun81) },
             - //F2_E4删除取消器
 156          
 157                  { TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1, (*fun82
             -) }, //F3_E1设置排队显示或者循环显示
 158                  { TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2, (*fun83
             -) }, //F3_E2设置队列个数
 159          
 160                  { TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1, (*fun84
             -) }, //F6_E1语音选择
 161                  { TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2, (*fun85
             -) }, //F6_E2语音报读次数
 162                  { TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3, (*fun86
             -) }, //F6_E3循环时候是否报读
 163                  { TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4, (*fun87
             -) }, //F6_E4音量大小调整
 164                  { TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5, (*fun88
             -) }, //F6_E5屏幕亮度调整
 165          
 166                  { TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1, (*fun89
             -) }, //F7_E1 999*9
 167                  { TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2, (*fun90
             -) }, //F7_E2 9999*9
 168                  { TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3, (*fun91
             -) }, //F7_E3 999*99
 169                  { TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4, (*fun92
             -) }, //F7_E4 9999*99
 170          
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 5   

 171                  { TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1, (*fun93
             -) }, //F8_E1 单键位跟多键位切换
 172                  { TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2, (*fun94
             -) }, //F8_E2 键位设置
 173          
 174                  { DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, (*fun95)},
 175          
 176                  { TWO_MENU_F6_E6, TWO_MENU_F6_E7, TWO_MENU_F6_E5, TWO_MENU_F6_E6_SET, ONE_MENU_F6, (*fun96) },
 177                  { TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6, (*fun97
             -) },
 178                  { TWO_MENU_F6_E7, TWO_MENU_F6_E1, TWO_MENU_F6_E6, TWO_MENU_F6_E7_SET, ONE_MENU_F6, (*fun98) },
 179                  { TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7, (*fun99
             -) },
 180          };
 181          
 182          unsigned int KeyScan(void)  //Keyboard scan function
 183          {
 184   1              unsigned int Val = 0;
 185   1              HKeyPort |= 0x3C;//Row height
 186   1              if ((HKeyPort & 0x3C) != 0x3C)//Press button
 187   1              {
 188   2                      delay10ms();  //Remove jitter
 189   2                      if ((HKeyPort & 0x3C) != 0x3C)   //Press button
 190   2                      {
 191   3                              clear_return_standby_time();
 192   3                              if (func_index != TWO_MENU_F8_E2_SET && ((return_Two_Menu_F6_E6()) ? func_index > ONE_MENU_Fd : 1))
 193   3                              {
 194   4                                      GD5800_stop_music();
 195   4                                      delay10ms();
 196   4                                      GD5800_select_chapter(DI);
 197   4                              }
 198   3                                      sound_table=1;
 199   3                                      Val = HKeyPort & 0x3C;
 200   3                                      if (Val == 0x0038)
 201   3                                      {
 202   4                                              clear_main_press_time();        //清除菜单键按下的时间计算变量
 203   4                                              set_main_press_time_table(1); //设置相应的标志位，开始计算时间
 204   4                                      }
 205   3                                      while ((HKeyPort & 0x3C) != 0x3C);
 206   3                                      delay10ms();
 207   3                                      while ((HKeyPort & 0x3C) != 0x3C);
 208   3                                      set_main_press_time_table(0);//按键释放，清除相应的标志位
 209   3                                      set_logout_cycle_table(0);//循环跟销号重新计数
 210   3                                      return Val;
 211   3                      }
 212   2              }
 213   1              
 214   1              return 0x0fff;
 215   1      }
 216          
 217          unsigned char KeyDecoder(void)
 218          {
 219   1              unsigned int key_val = 0;
 220   1              unsigned char register_manager_temp = 0;
 221   1              key_val = KeyScan();
 222   1              register_manager_temp = return_register_manager();
 223   1              if (key_val == 0x0fff) /*do not key press*/
 224   1              {
 225   2                      /*sjz 有注册管理器标志*/
 226   2                      if (register_manager_temp == 1)
 227   2                      {
 228   3                              
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 6   

 229   3                              if (func_index == MENU_STANDBY)
 230   3                              {
 231   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)accumulate_decoder);
 232   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)old2_RF_RECE_REG[2] & 0x0f);
 233   4                                      if ((old2_RF_RECE_REG[2] & 0x0f) == 0x08)
 234   4                                      {
 235   5                                              accumulate_decoder++;
 236   5                                      }
 237   4                                      else
 238   4                                      {
 239   5                                              accumulate_decoder = 0;
 240   5                                      }
 241   4                                      if (accumulate_decoder>10)
 242   4                                      {
 243   5                                              set_main_press_time(20);
 244   5                                              accumulate_decoder = 0;
 245   5                                      }
 246   4                              }
 247   3                              clear_register_manager();
 248   3      
 249   3                              switch (old2_RF_RECE_REG[2] & 0x0f)
 250   3                              {
 251   4                              case 0x01:key_val = 0x001c; break;
 252   4                              case 0x02:key_val = 0x002c; break;
 253   4                              case 0x04:key_val = 0x0034; break;
 254   4                              case 0x08:key_val = 0x0038; break;
 255   4                              default:break;
 256   4                              }
 257   3                      }
 258   2              }
 259   1       
 260   1      
 261   1      #ifdef DEBUG
                      if (key_val != 0x0fff)
                      uart_printf("key_val is %x .\r\n", key_val); //测试按键键值
              #endif
 265   1              switch (key_val)
 266   1              {
 267   2              case 0x001c:return KEY_RETURN; break;//1 按下相应的键显示相对应的码值
 268   2              case 0x002c:return KEY_DOWN; break;//2  
 269   2              case 0x0034:return KEY_UP; break;//4
 270   2              case 0x0038:return KEY_FUNC; break;//5 按下相应的键显示相对应的码值
 271   2              default:return 0xff; break;
 272   2              }
 273   1      }
 274          
 275          void KeyProcess(void)
 276          {
 277   1              unsigned char key_value = 0, main_press_time_temp = 0;
 278   1              key_value = KeyDecoder();
 279   1              switch (key_value)
 280   1              {
 281   2                      case KEY_FUNC:
 282   2                              if ((return_Two_Menu_Fb_E1() == 0 && func_index == MENU_STANDBY) || (return_Two_Menu_Fb_E1() == 1&&( fu
             -nc_index == MENU_STANDBY || func_index == DECODER_MENU) ) )  //如果索引==0  则要1秒以上进入菜单
 283   2                              {
 284   3                                      main_press_time_temp = return_main_press_time();
 285   3                                      if (main_press_time_temp >= 20)
 286   3                                      {
 287   4                                              func_index = ONE_MENU_F1;
 288   4                                              clear_main_press_time();
 289   4                                      }
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 7   

 290   3                              }
 291   2                              else if (func_index == TWO_MENU_F2_E1_D1 || func_index == TWO_MENU_F2_E1_D2 || func_index == TWO_MENU_F
             -2_E1_D3 || func_index == TWO_MENU_F2_E1_D4 )
 292   2                              {
 293   3                                      main_press_time_temp = return_main_press_time();
 294   3                                      if (main_press_time_temp >= 10)
 295   3                                      {
 296   4                                              if (delete_call_function(Two_Menu_F2_E1))
 297   4                                              {
 298   5                                                      if (return_sound_table() == 1)
 299   5                                                      {
 300   6                                                              GD5800_select_chapter(CHENGGONG);
 301   6      
 302   6                                                              set_sound_table(0);
 303   6                                                      }
 304   5                                              }
 305   4                                              delay10ms();
 306   4                                              clear_main_press_time();
 307   4                                      }
 308   3                                      else
 309   3                                              func_index = table[func_index].enter;
 310   3                              }
 311   2                              else if (func_index == TWO_MENU_F2_E2_D1 || func_index == TWO_MENU_F2_E2_D2 || func_index == TWO_MENU_F
             -2_E2_D3 || func_index == TWO_MENU_F2_E2_D4)
 312   2                              {
 313   3                                      main_press_time_temp = return_main_press_time();
 314   3                                      if (main_press_time_temp >= 10)
 315   3                                      {
 316   4                                              if (delete_host_function(Two_Menu_F2_E2))
 317   4                                              {
 318   5                                                      if (return_sound_table() == 1)
 319   5                                                      {
 320   6                                                              GD5800_select_chapter(CHENGGONG);
 321   6      
 322   6                                                              set_sound_table(0);
 323   6                                                      }
 324   5                                              }
 325   4                                              delay10ms();
 326   4                                              clear_main_press_time();
 327   4                                      }
 328   3                                      else
 329   3                                              func_index = table[func_index].enter;
 330   3                              }
 331   2                              else if (func_index == TWO_MENU_F2_E3_D1 || func_index == TWO_MENU_F2_E3_D2 || func_index == TWO_MENU_F
             -2_E3_D3 || func_index == TWO_MENU_F2_E3_D4)
 332   2                              {
 333   3                                      main_press_time_temp = return_main_press_time();
 334   3                                      if (main_press_time_temp >= 10)
 335   3                                      {
 336   4                                              if (delete_alarm_function(Two_Menu_F2_E3))
 337   4                                              {
 338   5                                                      if (return_sound_table() == 1)
 339   5                                                      {
 340   6                                                              GD5800_select_chapter(CHENGGONG);
 341   6      
 342   6                                                              set_sound_table(0);
 343   6                                                      }
 344   5                                              }
 345   4                                              delay10ms();
 346   4                                              clear_main_press_time();
 347   4                                      }
 348   3                                      else
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 8   

 349   3                                              func_index = table[func_index].enter;
 350   3                              }
 351   2                              else if (func_index == TWO_MENU_F2_E4_D1 || func_index == TWO_MENU_F2_E4_D2 || func_index == TWO_MENU_F
             -2_E4_D3 || func_index == TWO_MENU_F2_E4_D4)
 352   2                              {
 353   3                                      main_press_time_temp = return_main_press_time();
 354   3                                      if (main_press_time_temp >= 10)
 355   3                                      {
 356   4                                              if (delete_cancel_function(Two_Menu_F2_E4))
 357   4                                              {
 358   5                                                      if (return_sound_table() == 1)
 359   5                                                      {
 360   6                                                              GD5800_select_chapter(CHENGGONG);
 361   6      
 362   6                                                              set_sound_table(0);
 363   6                                                      }
 364   5                                              }
 365   4                                              delay10ms();
 366   4                                              clear_main_press_time();                        
 367   4                                      }
 368   3                                      else
 369   3                                              func_index = table[func_index].enter;
 370   3                              }
 371   2                              else
 372   2                              {
 373   3                                      func_index = table[func_index].enter;
 374   3                                      clear_main_press_time();
 375   3                              }
 376   2                               break;
 377   2                      case KEY_RETURN:        
 378   2                              if (func_index == DECODER_MENU  && return_Two_Menu_Fb_E1() )
 379   2                              {
 380   3                                      Logout();
 381   3                              }
 382   2                              else
 383   2                              func_index = table[func_index].esc; 
 384   2                              break;
 385   2                      case KEY_UP:
 386   2                              switch (func_index)
 387   2                              {
 388   3                              case TWO_MENU_F0_YEAR: 
 389   3                                      if (time_buf1[1] == 99) time_buf1[1] = 0;       //设置万年历 年
 390   3                                                                         else time_buf1[1]++;
 391   3                                      break;
 392   3                              case TWO_MENU_F0_MOUTH:
 393   3                                      if (time_buf1[2] == 12) time_buf1[2] = 1;       //设置万年历 月
 394   3                                      else time_buf1[2]++;
 395   3                                      break;
 396   3                              case TWO_MENU_F0_DAY:
 397   3                                      if (time_buf1[3] == 31) time_buf1[3] = 1;       //设置万年历 日
 398   3                                      else time_buf1[3]++;
 399   3                                      break;
 400   3                              case TWO_MENU_F0_WEEK:
 401   3                                      if (time_buf1[7] == 7) time_buf1[7] = 1;        //设置万年历 星期
 402   3                                      else time_buf1[7]++;
 403   3                                      break;
 404   3                              case TWO_MENU_F0_HOUR:
 405   3                                      if (time_buf1[4] == 23) time_buf1[4] = 0;       //设置万年历 小时
 406   3                                      else time_buf1[4]++;
 407   3                                      break;
 408   3                              case TWO_MENU_F0_MINUTE:
 409   3                                      if (time_buf1[5] == 59) time_buf1[5] = 0;       //设置万年历 分钟
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 9   

 410   3                                      else time_buf1[5]++;
 411   3                                      break;
 412   3                              case TWO_MENU_F1_E1_D1:
 413   3                                      if (Two_Menu_F1_E1[0] == 20 ) Two_Menu_F1_E1[0] = 0;    //设置F1_E1千位
 414   3                                      else Two_Menu_F1_E1[0]++;
 415   3                                      break;
 416   3                              case TWO_MENU_F1_E1_D2:
 417   3                                      if (Two_Menu_F1_E1[1] == 9) Two_Menu_F1_E1[1] = 0;      //设置F1_E1百位
 418   3                                      else Two_Menu_F1_E1[1]++;
 419   3                                      break;
 420   3                              case TWO_MENU_F1_E1_D3:
 421   3                                      if (Two_Menu_F1_E1[2] == 9) Two_Menu_F1_E1[2] = 0;      //设置F1_E1十位
 422   3                                      else Two_Menu_F1_E1[2]++;
 423   3                                      break;
 424   3                              case TWO_MENU_F1_E1_D4:
 425   3                                      if (Two_Menu_F1_E1[3] == 9) Two_Menu_F1_E1[3] = 0;      //设置F1_E1个位
 426   3                                      else Two_Menu_F1_E1[3]++;
 427   3                                      break;
 428   3                              case TWO_MENU_F1_E2_D1:
 429   3                                      if (Two_Menu_F1_E2[0] == 20) Two_Menu_F1_E2[0] = 0;     //设置F1_E2千位
 430   3                                      else Two_Menu_F1_E2[0]++;
 431   3                                      break;
 432   3                              case TWO_MENU_F1_E2_D2:
 433   3                                      if (Two_Menu_F1_E2[1] == 9) Two_Menu_F1_E2[1] = 0;      //设置F1_E2百位
 434   3                                      else Two_Menu_F1_E2[1]++;
 435   3                                      break;
 436   3                              case TWO_MENU_F1_E2_D3:
 437   3                                      if (Two_Menu_F1_E2[2] == 9) Two_Menu_F1_E2[2] = 0;      //设置F1_E2十位
 438   3                                      else Two_Menu_F1_E2[2]++;
 439   3                                      break;
 440   3                              case TWO_MENU_F1_E2_D4:
 441   3                                      if (Two_Menu_F1_E2[3] == 9) Two_Menu_F1_E2[3] = 0;      //设置F1_E2个位
 442   3                                      else Two_Menu_F1_E2[3]++;
 443   3                                      break;
 444   3                              case TWO_MENU_F1_E3_D1:
 445   3                                      if (Two_Menu_F1_E3[0] == 20) Two_Menu_F1_E3[0] = 0;     //设置F1_E3千位
 446   3                                      else Two_Menu_F1_E3[0]++;
 447   3                                      break;
 448   3                              case TWO_MENU_F1_E3_D2:
 449   3                                      if (Two_Menu_F1_E3[1] == 9) Two_Menu_F1_E3[1] = 0;      //设置F1_E3百位
 450   3                                      else Two_Menu_F1_E3[1]++;
 451   3                                      break;
 452   3                              case TWO_MENU_F1_E3_D3:
 453   3                                      if (Two_Menu_F1_E3[2] == 9) Two_Menu_F1_E3[2] = 0;      //设置F1_E3十位
 454   3                                      else Two_Menu_F1_E3[2]++;
 455   3                                      break;
 456   3                              case TWO_MENU_F1_E3_D4:
 457   3                                      if (Two_Menu_F1_E3[3] == 9) Two_Menu_F1_E3[3] = 0;      //设置F1_E3个位
 458   3                                      else Two_Menu_F1_E3[3]++;
 459   3                                      break;
 460   3                              case TWO_MENU_F1_E4_D1:
 461   3                                      if (Two_Menu_F1_E4[0] == 20) Two_Menu_F1_E4[0] = 0;     //设置F1_E4千位
 462   3                                      else Two_Menu_F1_E4[0]++;
 463   3                                      break;
 464   3                              case TWO_MENU_F1_E4_D2:
 465   3                                      if (Two_Menu_F1_E4[1] == 9) Two_Menu_F1_E4[1] = 0;      //设置F1_E4百位
 466   3                                      else Two_Menu_F1_E4[1]++;
 467   3                                      break;
 468   3                              case TWO_MENU_F1_E4_D3:
 469   3                                      if (Two_Menu_F1_E4[2] == 9) Two_Menu_F1_E4[2] = 0;      //设置F1_E4十位
 470   3                                      else Two_Menu_F1_E4[2]++;
 471   3                                      break;
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 10  

 472   3                              case TWO_MENU_F1_E4_D4:
 473   3                                      if (Two_Menu_F1_E4[3] == 9) Two_Menu_F1_E4[3] = 0;      //设置F1_E4个位
 474   3                                      else Two_Menu_F1_E4[3]++;
 475   3                                      break;
 476   3                              case TWO_MENU_F2_E1_D1:
 477   3                                      if (Two_Menu_F2_E1[0] == 20) Two_Menu_F2_E1[0] = 0;     //设置F2_E1千位
 478   3                                      else Two_Menu_F2_E1[0]++;
 479   3                                      break;
 480   3                              case TWO_MENU_F2_E1_D2:
 481   3                                      if (Two_Menu_F2_E1[1] == 9) Two_Menu_F2_E1[1] = 0;      //设置F2_E1百位
 482   3                                      else Two_Menu_F2_E1[1]++;
 483   3                                      break;
 484   3                              case TWO_MENU_F2_E1_D3:
 485   3                                      if (Two_Menu_F2_E1[2] == 9) Two_Menu_F2_E1[2] = 0;      //设置F2_E1十位
 486   3                                      else Two_Menu_F2_E1[2]++;
 487   3                                      break;
 488   3                              case TWO_MENU_F2_E1_D4:
 489   3                                      if (Two_Menu_F2_E1[3] == 9) Two_Menu_F2_E1[3] = 0;      //设置F2_E1个位
 490   3                                      else Two_Menu_F2_E1[3]++;
 491   3                                      break;
 492   3                              case TWO_MENU_F2_E2_D1:
 493   3                                      if (Two_Menu_F2_E2[0] == 20) Two_Menu_F2_E2[0] = 0;     //设置F2_E2千位
 494   3                                      else Two_Menu_F2_E2[0]++;
 495   3                                      break;
 496   3                              case TWO_MENU_F2_E2_D2:
 497   3                                      if (Two_Menu_F2_E2[1] == 9) Two_Menu_F2_E2[1] = 0;      //设置F2_E2百位
 498   3                                      else Two_Menu_F2_E2[1]++;
 499   3                                      break;
 500   3                              case TWO_MENU_F2_E2_D3:
 501   3                                      if (Two_Menu_F2_E2[2] == 9) Two_Menu_F2_E2[2] = 0;      //设置F2_E2十位
 502   3                                      else Two_Menu_F2_E2[2]++;
 503   3                                      break;
 504   3                              case TWO_MENU_F2_E2_D4:
 505   3                                      if (Two_Menu_F2_E2[3] == 9) Two_Menu_F2_E2[3] = 0;      //设置F2_E2个位
 506   3                                      else Two_Menu_F2_E2[3]++;
 507   3                                      break;
 508   3                              case TWO_MENU_F2_E3_D1:
 509   3                                      if (Two_Menu_F2_E3[0] == 20) Two_Menu_F2_E3[0] = 0;     //设置F2_E3千位
 510   3                                      else Two_Menu_F2_E3[0]++;
 511   3                                      break;
 512   3                              case TWO_MENU_F2_E3_D2:
 513   3                                      if (Two_Menu_F2_E3[1] == 9) Two_Menu_F2_E3[1] = 0;      //设置F2_E3百位
 514   3                                      else Two_Menu_F2_E3[1]++;
 515   3                                      break;
 516   3                              case TWO_MENU_F2_E3_D3:
 517   3                                      if (Two_Menu_F2_E3[2] == 9) Two_Menu_F2_E3[2] = 0;      //设置F2_E3十位
 518   3                                      else Two_Menu_F2_E3[2]++;
 519   3                                      break;
 520   3                              case TWO_MENU_F2_E3_D4:
 521   3                                      if (Two_Menu_F2_E3[3] == 9) Two_Menu_F2_E3[3] = 0;      //设置F2_E3个位
 522   3                                      else Two_Menu_F2_E3[3]++;
 523   3                                      break;
 524   3                              case TWO_MENU_F2_E4_D1:
 525   3                                      if (Two_Menu_F2_E4[0] == 20) Two_Menu_F2_E4[0] = 0;     //设置F2_E4千位
 526   3                                      else Two_Menu_F2_E4[0]++;
 527   3                                      break;
 528   3                              case TWO_MENU_F2_E4_D2:
 529   3                                      if (Two_Menu_F2_E4[1] == 9) Two_Menu_F2_E4[1] = 0;      //设置F2_E4百位
 530   3                                      else Two_Menu_F2_E4[1]++;
 531   3                                      break;
 532   3                              case TWO_MENU_F2_E4_D3:
 533   3                                      if (Two_Menu_F2_E4[2] == 9) Two_Menu_F2_E4[2] = 0;      //设置F2_E4十位
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 11  

 534   3                                      else Two_Menu_F2_E4[2]++;
 535   3                                      break;
 536   3                              case TWO_MENU_F2_E4_D4:
 537   3                                      if (Two_Menu_F2_E4[3] == 9) Two_Menu_F2_E4[3] = 0;      //设置F2_E4个位
 538   3                                      else Two_Menu_F2_E4[3]++;
 539   3                              case TWO_MENU_F3_E1_SET:
 540   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 541   3                                      else Two_Menu_F3_E1 = 1;
 542   3                                      break;
 543   3                              case TWO_MENU_F3_E2_SET:
 544   3                                      if (Two_Menu_F3_E2 == 20) Two_Menu_F3_E2 = 1;   //存储队列个数
 545   3                                      else Two_Menu_F3_E2 ++;
 546   3                                      break;
 547   3                              case TWO_MENU_F4_SET:
 548   3                                      if (Two_Menu_F4_E1 == 99) Two_Menu_F4_E1 = 0;   //销号时间设置
 549   3                                      else Two_Menu_F4_E1++;
 550   3                                      break;
 551   3                              case TWO_MENU_F5_SET:
 552   3                                      if (Two_Menu_F5_E1 == 99) Two_Menu_F5_E1 = 0;   //循环时间设置
 553   3                                      else Two_Menu_F5_E1++;
 554   3                                      break;
 555   3                              case TWO_MENU_F6_E1_SET:
 556   3                                      if (Two_Menu_F6_E1 == 7) Two_Menu_F6_E1 = 0;    //F6_E1语音选择
 557   3                                      else Two_Menu_F6_E1++;
 558   3                                      break;
 559   3                              case TWO_MENU_F6_E2_SET:
 560   3                                      if (Two_Menu_F6_E2 == 9) Two_Menu_F6_E2 = 1;    //F6_E2语音报读次数
 561   3                                      else Two_Menu_F6_E2++;
 562   3                                      break;
 563   3                              case TWO_MENU_F6_E3_SET:
 564   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 565   3                                      else Two_Menu_F6_E3 = 0;
 566   3                                      break;
 567   3                              case TWO_MENU_F6_E4_SET:
 568   3                                      if (Two_Menu_F6_E4 == 9) Two_Menu_F6_E4 = 0;    //F6_E4音量大小调整
 569   3                                      else Two_Menu_F6_E4++;
 570   3                                      break;
 571   3                              case TWO_MENU_F6_E5_SET:
 572   3                                      if (Two_Menu_F6_E5 == 7) Two_Menu_F6_E5 = 0;    //F6_E5屏幕亮度调整
 573   3                                      else Two_Menu_F6_E5++;
 574   3                                      break;
 575   3                              case TWO_MENU_F7_E1_SET:
 576   3                                      if (Two_Menu_F7_E1 == 11) Two_Menu_F7_E1 = 0;   //F7_E1原始规则 999*9
 577   3                                      else Two_Menu_F7_E1++;
 578   3                                      break;
 579   3                              case TWO_MENU_F7_E2_SET:
 580   3                                      if (Two_Menu_F7_E2 == 11) Two_Menu_F7_E2 = 0;   //F7_E2附加规则 9999*9
 581   3                                      else Two_Menu_F7_E2++;
 582   3                                      break;
 583   3                              case TWO_MENU_F7_E3_SET:
 584   3                                      if (Two_Menu_F7_E3 == 11) Two_Menu_F7_E3 = 0;   //F7_E3附加规则 999*99
 585   3                                      else Two_Menu_F7_E3++;
 586   3                                      break;
 587   3                              case TWO_MENU_F7_E4_SET:
 588   3                                      if (Two_Menu_F7_E4 == 11) Two_Menu_F7_E4 = 0;   //F7_E3附加规则 9999*99
 589   3                                      else Two_Menu_F7_E4++;
 590   3                                      break;
 591   3                              case TWO_MENU_F8_E1_SET:
 592   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 593   3                                      else Two_Menu_F8_E1 = 1 ;
 594   3                                      break;
 595   3                              case TWO_MENU_F8_E2_SET:
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 12  

 596   3                                      if (Two_Menu_F8_E2 == 38) Two_Menu_F8_E2 = 0;   //F8_E2键位设置
 597   3                                      else Two_Menu_F8_E2++;
 598   3                                      break;
 599   3                              case DECODER_MENU:
 600   3                                      CycleUp();
 601   3                                      break;
 602   3                              case TWO_MENU_FC_SET:
 603   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 604   3                                      else Two_Menu_FC_E1 = 1;
 605   3                                      break;
 606   3                              case TWO_MENU_Fb_SET:
 607   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 608   3                                      else Two_Menu_Fb_E1 = 1;
 609   3                                      break;
 610   3                              case TWO_MENU_F6_E6_SET:
 611   3                                      if (Two_Menu_F6_E6 == 1) Two_Menu_F6_E6 = 0;    
 612   3                                      else Two_Menu_F6_E6 = 1;
 613   3                                      break;
 614   3                              case TWO_MENU_F6_E7_SET:
 615   3                                      if (Two_Menu_F6_E7 == 1) Two_Menu_F6_E7 = 0;
 616   3                                      else Two_Menu_F6_E7 = 1;
 617   3                                      break;
 618   3      
 619   3                                      default:break;
 620   3                              }       
 621   2                              func_index = table[func_index].up; break;
 622   2                      case KEY_DOWN:
 623   2                              switch (func_index)
 624   2                              {
 625   3                              case TWO_MENU_F0_YEAR:
 626   3                                      if (time_buf1[1] == 0) time_buf1[1] = 99;       //设置万年历 年
 627   3                                      else time_buf1[1]--;
 628   3                                      break;
 629   3                              case TWO_MENU_F0_MOUTH:
 630   3                                      if (time_buf1[2] == 1) time_buf1[2] = 12;       //设置万年历 月
 631   3                                      else time_buf1[2]--;
 632   3                                      break;
 633   3                              case TWO_MENU_F0_DAY:
 634   3                                      if (time_buf1[3] == 1) time_buf1[3] = 31;       //设置万年历 日
 635   3                                      else time_buf1[3]--;
 636   3                                      break;
 637   3                              case TWO_MENU_F0_WEEK:
 638   3                                      if (time_buf1[7] == 1) time_buf1[7] = 7;        //设置万年历 星期
 639   3                                      else time_buf1[7]--;
 640   3                                      break;
 641   3                              case TWO_MENU_F0_HOUR:
 642   3                                      if (time_buf1[4] == 0) time_buf1[4] = 23;       //设置万年历 小时
 643   3                                      else time_buf1[4]--;
 644   3                                      break;
 645   3                              case TWO_MENU_F0_MINUTE:
 646   3                                      if (time_buf1[5] == 0) time_buf1[5] = 59;       //设置万年历 分钟
 647   3                                      else time_buf1[5]--;
 648   3                                      break;
 649   3                              case TWO_MENU_F1_E1_D1:
 650   3                                      if (Two_Menu_F1_E1[0] == 0) Two_Menu_F1_E1[0] = 20;     //设置F1_E1千位
 651   3                                      else Two_Menu_F1_E1[0]--;
 652   3                                      break;
 653   3                              case TWO_MENU_F1_E1_D2:
 654   3                                      if (Two_Menu_F1_E1[1] == 0) Two_Menu_F1_E1[1] = 9;      //设置F1_E1百位
 655   3                                      else Two_Menu_F1_E1[1]--;
 656   3                                      break;
 657   3                              case TWO_MENU_F1_E1_D3:
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 13  

 658   3                                      if (Two_Menu_F1_E1[2] == 0) Two_Menu_F1_E1[2] = 9;      //设置F1_E1十位
 659   3                                      else Two_Menu_F1_E1[2]--;
 660   3                                      break;
 661   3                              case TWO_MENU_F1_E1_D4:
 662   3                                      if (Two_Menu_F1_E1[3] == 0) Two_Menu_F1_E1[3] = 9;      //设置F1_E1个位
 663   3                                      else Two_Menu_F1_E1[3]--;
 664   3                                      break;
 665   3                              case TWO_MENU_F1_E2_D1:
 666   3                                      if (Two_Menu_F1_E2[0] == 0) Two_Menu_F1_E2[0] = 20;     //设置F1_E2千位
 667   3                                      else Two_Menu_F1_E2[0]--;
 668   3                                      break;
 669   3                              case TWO_MENU_F1_E2_D2:
 670   3                                      if (Two_Menu_F1_E2[1] == 0) Two_Menu_F1_E2[1] = 9;      //设置F1_E2百位
 671   3                                      else Two_Menu_F1_E2[1]--;
 672   3                                      break;
 673   3                              case TWO_MENU_F1_E2_D3:
 674   3                                      if (Two_Menu_F1_E2[2] == 0) Two_Menu_F1_E2[2] = 9;      //设置F1_E2十位
 675   3                                      else Two_Menu_F1_E2[2]--;
 676   3                                      break;
 677   3                              case TWO_MENU_F1_E2_D4:
 678   3                                      if (Two_Menu_F1_E2[3] == 0) Two_Menu_F1_E2[3] = 9;      //设置F1_E2个位
 679   3                                      else Two_Menu_F1_E2[3]--;
 680   3                                      break;
 681   3                              case TWO_MENU_F1_E3_D1:
 682   3                                      if (Two_Menu_F1_E3[0] == 0) Two_Menu_F1_E3[0] = 20;     //设置F1_E3千位
 683   3                                      else Two_Menu_F1_E3[0]--;
 684   3                                      break;
 685   3                              case TWO_MENU_F1_E3_D2:
 686   3                                      if (Two_Menu_F1_E3[1] == 0) Two_Menu_F1_E3[1] = 9;      //设置F1_E3百位
 687   3                                      else Two_Menu_F1_E3[1]--;
 688   3                                      break;
 689   3                              case TWO_MENU_F1_E3_D3:
 690   3                                      if (Two_Menu_F1_E3[2] == 0) Two_Menu_F1_E3[2] = 9;      //设置F1_E3十位
 691   3                                      else Two_Menu_F1_E3[2]--;
 692   3                                      break;
 693   3                              case TWO_MENU_F1_E3_D4:
 694   3                                      if (Two_Menu_F1_E3[3] == 0) Two_Menu_F1_E3[3] = 9;      //设置F1_E3个位
 695   3                                      else Two_Menu_F1_E3[3]--;
 696   3                                      break;
 697   3                              case TWO_MENU_F1_E4_D1:
 698   3                                      if (Two_Menu_F1_E4[0] == 0) Two_Menu_F1_E4[0] = 20;     //设置F1_E4千位
 699   3                                      else Two_Menu_F1_E4[0]--;
 700   3                                      break;
 701   3                              case TWO_MENU_F1_E4_D2:
 702   3                                      if (Two_Menu_F1_E4[1] == 0) Two_Menu_F1_E4[1] = 9;      //设置F1_E4百位
 703   3                                      else Two_Menu_F1_E4[1]--;
 704   3                                      break;
 705   3                              case TWO_MENU_F1_E4_D3:
 706   3                                      if (Two_Menu_F1_E4[2] == 0) Two_Menu_F1_E4[2] = 9;      //设置F1_E4十位
 707   3                                      else Two_Menu_F1_E4[2]--;
 708   3                                      break;
 709   3                              case TWO_MENU_F1_E4_D4:
 710   3                                      if (Two_Menu_F1_E4[3] == 0) Two_Menu_F1_E4[3] = 9;      //设置F1_E4个位
 711   3                                      else Two_Menu_F1_E4[3]--;
 712   3                                      break;
 713   3                              case TWO_MENU_F2_E1_D1:
 714   3                                      if (Two_Menu_F2_E1[0] == 0) Two_Menu_F2_E1[0] = 20;     //设置F2_E1千位
 715   3                                      else Two_Menu_F2_E1[0]--;
 716   3                                      break;
 717   3                              case TWO_MENU_F2_E1_D2:
 718   3                                      if (Two_Menu_F2_E1[1] == 0) Two_Menu_F2_E1[1] = 9;      //设置F2_E1百位
 719   3                                      else Two_Menu_F2_E1[1]--;
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 14  

 720   3                                      break;
 721   3                              case TWO_MENU_F2_E1_D3:
 722   3                                      if (Two_Menu_F2_E1[2] == 0) Two_Menu_F2_E1[2] = 9;      //设置F2_E1十位
 723   3                                      else Two_Menu_F2_E1[2]--;
 724   3                                      break;
 725   3                              case TWO_MENU_F2_E1_D4:
 726   3                                      if (Two_Menu_F2_E1[3] == 0) Two_Menu_F2_E1[3] = 9;      //设置F2_E1个位
 727   3                                      else Two_Menu_F2_E1[3]--;
 728   3                                      break;
 729   3                              case TWO_MENU_F2_E2_D1:
 730   3                                      if (Two_Menu_F2_E2[0] == 0) Two_Menu_F2_E2[0] = 20;     //设置F2_E2千位
 731   3                                      else Two_Menu_F2_E2[0]--;
 732   3                                      break;
 733   3                              case TWO_MENU_F2_E2_D2:
 734   3                                      if (Two_Menu_F2_E2[1] == 0) Two_Menu_F2_E2[1] = 9;      //设置F2_E2百位
 735   3                                      else Two_Menu_F2_E2[1]--;
 736   3                                      break;
 737   3                              case TWO_MENU_F2_E2_D3:
 738   3                                      if (Two_Menu_F2_E2[2] == 0) Two_Menu_F2_E2[2] = 9;      //设置F2_E2十位
 739   3                                      else Two_Menu_F2_E2[2]--;
 740   3                                      break;
 741   3                              case TWO_MENU_F2_E2_D4:
 742   3                                      if (Two_Menu_F2_E2[3] == 0) Two_Menu_F2_E2[3] = 9;      //设置F2_E2个位
 743   3                                      else Two_Menu_F2_E2[3]--;
 744   3                                      break;
 745   3                              case TWO_MENU_F2_E3_D1:
 746   3                                      if (Two_Menu_F2_E3[0] == 0) Two_Menu_F2_E3[0] = 20;     //设置F2_E3千位
 747   3                                      else Two_Menu_F2_E3[0]--;
 748   3                                      break;
 749   3                              case TWO_MENU_F2_E3_D2:
 750   3                                      if (Two_Menu_F2_E3[1] == 0) Two_Menu_F2_E3[1] = 9;      //设置F2_E3百位
 751   3                                      else Two_Menu_F2_E3[1]--;
 752   3                                      break;
 753   3                              case TWO_MENU_F2_E3_D3:
 754   3                                      if (Two_Menu_F2_E3[2] == 0) Two_Menu_F2_E3[2] = 9;      //设置F2_E3十位
 755   3                                      else Two_Menu_F2_E3[2]--;
 756   3                                      break;
 757   3                              case TWO_MENU_F2_E3_D4:
 758   3                                      if (Two_Menu_F2_E3[3] == 0) Two_Menu_F2_E3[3] = 9;      //设置F2_E3个位
 759   3                                      else Two_Menu_F2_E3[3]--;
 760   3                                      break;
 761   3                              case TWO_MENU_F2_E4_D1:
 762   3                                      if (Two_Menu_F2_E4[0] == 0) Two_Menu_F2_E4[0] = 20;     //设置F2_E4千位
 763   3                                      else Two_Menu_F2_E4[0]--;
 764   3                                      break;
 765   3                              case TWO_MENU_F2_E4_D2:
 766   3                                      if (Two_Menu_F2_E4[1] == 0) Two_Menu_F2_E4[1] = 9;      //设置F2_E4百位
 767   3                                      else Two_Menu_F2_E4[1]--;
 768   3                                      break;
 769   3                              case TWO_MENU_F2_E4_D3:
 770   3                                      if (Two_Menu_F2_E4[2] == 0) Two_Menu_F2_E4[2] = 9;      //设置F2_E4十位
 771   3                                      else Two_Menu_F2_E4[2]--;
 772   3                                      break;
 773   3                              case TWO_MENU_F2_E4_D4:
 774   3                                      if (Two_Menu_F2_E4[3] == 0) Two_Menu_F2_E4[3] = 9;      //设置F2_E4个位
 775   3                                      else Two_Menu_F2_E4[3]--;
 776   3                                      break;
 777   3                              case TWO_MENU_F3_E1_SET:
 778   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 779   3                                      else Two_Menu_F3_E1 = 1;
 780   3                                      break;
 781   3                              case TWO_MENU_F3_E2_SET:
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 15  

 782   3                                      if (Two_Menu_F3_E2 == 1) Two_Menu_F3_E2 = 20;   //存储队列个数
 783   3                                      else Two_Menu_F3_E2--;
 784   3                                      break;
 785   3                              case TWO_MENU_F4_SET:
 786   3                                      if (Two_Menu_F4_E1 == 0) Two_Menu_F4_E1 = 99;   //销号时间设置
 787   3                                      else Two_Menu_F4_E1--;
 788   3                                      break;
 789   3                              case TWO_MENU_F5_SET:
 790   3                                      if (Two_Menu_F5_E1 == 0) Two_Menu_F5_E1 = 99;   //销号时间设置
 791   3                                      else Two_Menu_F5_E1--;
 792   3                                      break;
 793   3                              case TWO_MENU_F6_E1_SET:
 794   3                                      if (Two_Menu_F6_E1 == 0) Two_Menu_F6_E1 = 7;    //F6_E1额语音选择
 795   3                                      else Two_Menu_F6_E1--;
 796   3                                      break;
 797   3                              case TWO_MENU_F6_E2_SET:
 798   3                                      if (Two_Menu_F6_E2 == 1) Two_Menu_F6_E2 = 9;    //F6_E2语音报读次数调整
 799   3                                      else Two_Menu_F6_E2--;
 800   3                                      break;
 801   3                              case TWO_MENU_F6_E3_SET:
 802   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 803   3                                      else Two_Menu_F6_E3 = 0;
 804   3                                      break;
 805   3                              case TWO_MENU_F6_E4_SET:
 806   3                                      if (Two_Menu_F6_E4 == 0) Two_Menu_F6_E4 = 9;    //F6_E4音量大小调整
 807   3                                      else Two_Menu_F6_E4--;
 808   3                                      break;
 809   3                              case TWO_MENU_F6_E5_SET:
 810   3                                      if (Two_Menu_F6_E5 == 0) Two_Menu_F6_E5 = 7;    //F6_E5屏幕亮度调整
 811   3                                      else Two_Menu_F6_E5--;
 812   3                                      break;
 813   3                              case TWO_MENU_F7_E1_SET:
 814   3                                      if (Two_Menu_F7_E1 == 0) Two_Menu_F7_E1 = 11;   //F7_E1原始规则 999*9
 815   3                                      else Two_Menu_F7_E1--;
 816   3                                      break;
 817   3                              case TWO_MENU_F7_E2_SET:
 818   3                                      if (Two_Menu_F7_E2 == 0) Two_Menu_F7_E2 = 11;   //F7_E2附加规则 9999*9
 819   3                                      else Two_Menu_F7_E2--;
 820   3                                      break;
 821   3                              case TWO_MENU_F7_E3_SET:
 822   3                                      if (Two_Menu_F7_E3 == 0) Two_Menu_F7_E3 = 11;   //F7_E3附加规则 999*99
 823   3                                      else Two_Menu_F7_E3--;
 824   3                                      break;
 825   3                              case TWO_MENU_F7_E4_SET:
 826   3                                      if (Two_Menu_F7_E4 == 0) Two_Menu_F7_E4 = 11;   //F7_E3附加规则 9999*99
 827   3                                      else Two_Menu_F7_E4--;
 828   3                                      break;
 829   3                              case TWO_MENU_F8_E1_SET:
 830   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 831   3                                      else Two_Menu_F8_E1 = 1;
 832   3                                      break;
 833   3                              case TWO_MENU_F8_E2_SET:
 834   3                                      if (Two_Menu_F8_E2 == 0) Two_Menu_F8_E2 = 38;   //F8_E2键位设置
 835   3                                      else Two_Menu_F8_E2--;
 836   3                                      break;
 837   3                              case DECODER_MENU:
 838   3                                      CycleDown();
 839   3                                      break;
 840   3                              case TWO_MENU_FC_SET:
 841   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 842   3                                      else Two_Menu_FC_E1 = 1;
 843   3                                      break;
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 16  

 844   3                              case TWO_MENU_Fb_SET:
 845   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 846   3                                      else Two_Menu_Fb_E1 = 1;
 847   3                                      break;
 848   3                              case TWO_MENU_F6_E6_SET:
 849   3                                      if (Two_Menu_F6_E6 == 1) Two_Menu_F6_E6 = 0;
 850   3                                      else Two_Menu_F6_E6 = 1;
 851   3                                      break;
 852   3                              case TWO_MENU_F6_E7_SET:
 853   3                                      if (Two_Menu_F6_E7 == 1) Two_Menu_F6_E7 = 0;
 854   3                                      else Two_Menu_F6_E7 = 1;
 855   3                                      break;
 856   3      
 857   3                                      default:break;
 858   3                              }
 859   2                              func_index = table[func_index].down; break;
 860   2                      default:break;
 861   2              }
 862   1              current_operation_index = table[func_index].index_operation;
 863   1              (*current_operation_index)();//执行当前操作函数
 864   1      }
 865          
 866          void delay10ms(void)   //误差 -0.054253472222us
 867          {
 868   1              unsigned char a, b, c;
 869   1              for (c = 4; c>0; c--)
 870   1              for (b = 52; b>0; b--)
 871   1              for (a = 220; a>0; a--);
 872   1              _nop_();  //if Keil,require use intrins.h
 873   1      }
 874          
 875          unsigned char return_func_index(void)
 876          {
 877   1              unsigned char func_index_temp = 0;
 878   1              func_index_temp = func_index;
 879   1              return func_index_temp;
 880   1      }
 881          
 882          void set_func_index(unsigned char temp)
 883          {
 884   1              func_index = temp;
 885   1      }
 886          
 887          unsigned char return_Two_Menu_F3_E1(void)
 888          {
 889   1              unsigned char temp = 0;
 890   1              temp = Two_Menu_F3_E1;
 891   1              return temp;
 892   1      }
 893          
 894          unsigned char return_Two_Menu_F3_E2(void)
 895          {
 896   1              unsigned char temp = 0;
 897   1              temp = Two_Menu_F3_E2;
 898   1              return temp;
 899   1      }
 900          
 901          unsigned char return_Two_Menu_F4_E1(void)
 902          {
 903   1              unsigned char temp = 0;
 904   1              temp = Two_Menu_F4_E1;
 905   1              return temp;
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 17  

 906   1      }
 907          
 908          unsigned char return_Two_Menu_F5_E1(void)
 909          {
 910   1              unsigned char temp = 0;
 911   1              temp = Two_Menu_F5_E1;
 912   1              return temp;
 913   1      }
 914          
 915          unsigned char return_Two_Menu_F6_E1(void)
 916          {
 917   1              unsigned char temp = 0;
 918   1              temp = Two_Menu_F6_E1;
 919   1              return temp;
 920   1      }
 921          
 922          unsigned char return_Two_Menu_F6_E2(void)
 923          {
 924   1              unsigned char temp = 0;
 925   1              temp = Two_Menu_F6_E2;
 926   1              return temp;
 927   1      }
 928          
 929          unsigned char return_Two_Menu_F6_E3(void)
 930          {
 931   1              unsigned char temp = 0;
 932   1              temp = Two_Menu_F6_E3;
 933   1              return temp;
 934   1      }
 935          
 936          unsigned char return_Two_Menu_F6_E4(void)
 937          {
 938   1              unsigned char temp = 0;
 939   1              temp = Two_Menu_F6_E4;
 940   1              return temp;
 941   1      }
 942          
 943          unsigned char return_Two_Menu_F6_E5(void)
 944          {
 945   1              unsigned char temp = 0;
 946   1              temp = Two_Menu_F6_E5;
 947   1              return temp;
 948   1      }
 949          unsigned char return_Two_Menu_F6_E6(void)
 950          {
 951   1              unsigned char temp = 0;
 952   1              temp = Two_Menu_F6_E6;
 953   1              return temp;
 954   1      }
 955          
 956          unsigned char return_Two_Menu_F6_E7(void)
 957          {
 958   1              unsigned char temp = 0;
 959   1              temp = Two_Menu_F6_E7;
 960   1              return temp;
 961   1      }
 962          
 963          
 964          unsigned char return_Two_Menu_F7_E1(void)
 965          {
 966   1              unsigned char temp = 0;
 967   1              temp = Two_Menu_F7_E1;
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 18  

 968   1              return temp;
 969   1      }
 970          
 971          unsigned char return_Two_Menu_F7_E2(void)
 972          {
 973   1              unsigned char temp = 0;
 974   1              temp = Two_Menu_F7_E2;
 975   1              return temp;
 976   1      }
 977          
 978          unsigned char return_Two_Menu_F7_E3(void)
 979          {
 980   1              unsigned char temp = 0;
 981   1              temp = Two_Menu_F7_E3;
 982   1              return temp;
 983   1      }
 984          
 985          unsigned char return_Two_Menu_F7_E4(void)
 986          {
 987   1              unsigned char temp = 0;
 988   1              temp = Two_Menu_F7_E4;
 989   1              return temp;
 990   1      }
 991          
 992          unsigned char return_Two_Menu_F8_E1(void)
 993          {
 994   1              unsigned char temp = 0;
 995   1              temp = Two_Menu_F8_E1;
 996   1              return temp;
 997   1      }
 998          
 999          unsigned char return_Two_Menu_F8_E2(void)
1000          {
1001   1              unsigned char temp = 0;
1002   1              temp = Two_Menu_F8_E2;
1003   1              return temp;
1004   1      }
1005          
1006          unsigned char return_sound_table(void)
1007          {
1008   1              unsigned char temp = 0;
1009   1              temp = sound_table;
1010   1              return temp;
1011   1      }
1012          
1013          void set_sound_table(unsigned char temp)
1014          {
1015   1              sound_table = temp;
1016   1      }
1017          
1018          unsigned char return_Two_Menu_FC_E1(void)
1019          {
1020   1              unsigned char temp = 0;
1021   1              temp = Two_Menu_FC_E1;
1022   1              return temp;
1023   1      }
1024          
1025          unsigned char return_Two_Menu_Fb_E1(void)
1026          {
1027   1              unsigned char temp = 0;
1028   1              temp = Two_Menu_Fb_E1;
1029   1              return temp;
C51 COMPILER V9.00   KEY                                                                   10/22/2015 11:41:03 PAGE 19  

1030   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3325    ----
   CONSTANT SIZE    =    800    ----
   XDATA SIZE       =     58       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
