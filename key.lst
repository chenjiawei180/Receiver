C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\key.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\k
                    -ey.lst) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "usart.h"
   3          #include "tm1629.h"
   4          #include "menu.h"
   5          #include "timer.h"
   6          #include "ds1302.h"
   7          #include "at24c256.h"
   8          #include "gd5800.h"
   9          #include "ev1527.h"
  10          
  11          unsigned char sound_table = 0;
  12          unsigned char accumulate_decoder = 0;
  13          
  14          unsigned char func_index = 0; //多级菜单索引变量
  15          void(*current_operation_index)();// 多级菜单函数指针
  16          
  17          unsigned char Two_Menu_F1_E1[4] = { 0, 0, 0, 1 }; //F1_E1
  18          unsigned char Two_Menu_F1_E2[4] = { 0, 0, 0, 1 }; //F1_E2
  19          unsigned char Two_Menu_F1_E3[4] = { 0, 0, 0, 1 }; //F1_E3
  20          unsigned char Two_Menu_F1_E4[4] = { 0, 0, 0, 1 }; //F1_E4
  21          unsigned char Two_Menu_F2_E1[4] = { 0, 0, 0, 1 }; //F2_E1
  22          unsigned char Two_Menu_F2_E2[4] = { 0, 0, 0, 1 }; //F2_E2
  23          unsigned char Two_Menu_F2_E3[4] = { 0, 0, 0, 1 }; //F2_E3
  24          unsigned char Two_Menu_F2_E4[4] = { 0, 0, 0, 1 }; //F2_E4
  25          
  26          unsigned char Two_Menu_F3_E1 = 1; //即时模式或者排队显示
  27          unsigned char Two_Menu_F3_E2 = 12; //呼叫时候存储数量
  28          
  29          unsigned char Two_Menu_F4_E1 = 0; //销号时间
  30          unsigned char Two_Menu_F5_E1 = 0; //循环间隔时间
  31          
  32          unsigned char Two_Menu_F6_E1 = 0; //简单报读
  33          unsigned char Two_Menu_F6_E2 = 1; //语音报读次数
  34          unsigned char Two_Menu_F6_E3 = 0; //循环时候是否报读
  35          unsigned char Two_Menu_F6_E4 = 0; //音量大小调整
  36          unsigned char Two_Menu_F6_E5 = 0; //显示屏LED亮度调整
  37          unsigned char Two_Menu_F6_E6 = 1; //显示屏LED亮度调整
  38          
  39          unsigned char Two_Menu_F7_E1 = 11; // E1默认键盘规则 999*9
  40          unsigned char Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
  41          unsigned char Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
  42          unsigned char Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
  43          
  44          unsigned char Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
  45          
  46          unsigned char Two_Menu_F8_E2 = 0; // 键位设置
  47          
  48          unsigned char Two_Menu_Fb_E1 = 1; // 设置主机有没有销号功能
  49          unsigned char Two_Menu_FC_E1 = 1; // 设置万年历待机与----待机的切换
  50          unsigned char Two_Menu_Fd_E1 = 1; // E1 E2 E3 E4 E5 E6
  51          
  52          key_table code table[100] =
  53          {       // 目标索引                 上                          下          确认                 退出         函数
  54                  { MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, (*fun0) }, //待机
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 2   

  55          
  56                  { ONE_MENU_F0, ONE_MENU_F1, ONE_MENU_Fd, TWO_MENU_F0_YEAR , MENU_STANDBY, (*fun1) }, //F0-F9
  57                  { ONE_MENU_F1, ONE_MENU_F2, ONE_MENU_F0, TWO_MENU_F1_E1   , MENU_STANDBY, (*fun2) },
  58                  { ONE_MENU_F2, ONE_MENU_F3, ONE_MENU_F1, TWO_MENU_F2_E1   , MENU_STANDBY, (*fun3) },
  59                  { ONE_MENU_F3, ONE_MENU_F4, ONE_MENU_F2, TWO_MENU_F3_E1   , MENU_STANDBY, (*fun4) },
  60                  { ONE_MENU_F4, ONE_MENU_F5, ONE_MENU_F3, TWO_MENU_F4_SET  , MENU_STANDBY, (*fun5) },
  61                  { ONE_MENU_F5, ONE_MENU_F6, ONE_MENU_F4, TWO_MENU_F5_SET  , MENU_STANDBY, (*fun6) },
  62                  { ONE_MENU_F6, ONE_MENU_F7, ONE_MENU_F5, TWO_MENU_F6_E1   , MENU_STANDBY, (*fun7) },
  63                  { ONE_MENU_F7, ONE_MENU_F8, ONE_MENU_F6, TWO_MENU_F7_E1   , MENU_STANDBY, (*fun8) },
  64                  { ONE_MENU_F8, ONE_MENU_F9, ONE_MENU_F7, TWO_MENU_F8_E1   , MENU_STANDBY, (*fun9) },
  65                  { ONE_MENU_F9, ONE_MENU_FA, ONE_MENU_F8, TWO_MENU_F9_E1   , MENU_STANDBY, (*fun10) },
  66                  { ONE_MENU_FA, ONE_MENU_Fb, ONE_MENU_F9, TWO_MENU_FA_SET  , MENU_STANDBY, (*fun11) }, //FA
  67                  { ONE_MENU_Fb, ONE_MENU_FC, ONE_MENU_FA, TWO_MENU_Fb_SET  , MENU_STANDBY, (*fun12) }, //Fb
  68                  { ONE_MENU_FC, ONE_MENU_Fd, ONE_MENU_Fb, TWO_MENU_FC_SET  , MENU_STANDBY, (*fun13) }, //FC
  69                  { ONE_MENU_Fd, ONE_MENU_F0, ONE_MENU_FC, TWO_MENU_Fd_SET  , MENU_STANDBY, (*fun14) }, //Fd
  70          
  71                  { TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_MOUTH , ONE_MENU_F0, (*fun15) }
             -, //万年历 年
  72                  { TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_DAY   , ONE_MENU_F0, (*fun16) }
             -, //万年历 月
  73                  { TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_WEEK  , ONE_MENU_F0, (*fun17) }
             -, //万年历 日
  74                  { TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_HOUR  , ONE_MENU_F0, (*fun18) }
             -, //万年历 周
  75                  { TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_MINUTE, ONE_MENU_F0, (*fun19) }
             -, //万年历 小时
  76                  { TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_YEAR  , ONE_MENU_F0, (*fun20) }
             -, //万年历 分钟
  77          
  78                  { TWO_MENU_F1_E1, TWO_MENU_F1_E2, TWO_MENU_F1_E4, TWO_MENU_F1_E1_D4, ONE_MENU_F1, (*fun21) }, //F1子菜单E
             -1
  79                  { TWO_MENU_F1_E2, TWO_MENU_F1_E3, TWO_MENU_F1_E1, TWO_MENU_F1_E2_D4, ONE_MENU_F1, (*fun22) }, //F1子菜单E
             -2
  80                  { TWO_MENU_F1_E3, TWO_MENU_F1_E4, TWO_MENU_F1_E2, TWO_MENU_F1_E3_D4, ONE_MENU_F1, (*fun23) }, //F1子菜单E
             -3
  81                  { TWO_MENU_F1_E4, TWO_MENU_F1_E1, TWO_MENU_F1_E3, TWO_MENU_F1_E4_D4, ONE_MENU_F1, (*fun24) }, //F1子菜单E
             -4
  82          
  83                  { TWO_MENU_F2_E1, TWO_MENU_F2_E2, TWO_MENU_F2_E4, TWO_MENU_F2_E1_D4, ONE_MENU_F2, (*fun25) }, //F2子菜单E
             -1
  84                  { TWO_MENU_F2_E2, TWO_MENU_F2_E3, TWO_MENU_F2_E1, TWO_MENU_F2_E2_D4, ONE_MENU_F2, (*fun26) }, //F2子菜单E
             -2
  85                  { TWO_MENU_F2_E3, TWO_MENU_F2_E4, TWO_MENU_F2_E2, TWO_MENU_F2_E3_D4, ONE_MENU_F2, (*fun27) }, //F2子菜单E
             -3
  86                  { TWO_MENU_F2_E4, TWO_MENU_F2_E1, TWO_MENU_F2_E3, TWO_MENU_F2_E4_D4, ONE_MENU_F2, (*fun28) }, //F2子菜单E
             -4
  87          
  88                  { TWO_MENU_F3_E1, TWO_MENU_F3_E2, TWO_MENU_F3_E2, TWO_MENU_F3_E1_SET, ONE_MENU_F3, (*fun29) }, //F3子菜单
             -E1
  89                  { TWO_MENU_F3_E2, TWO_MENU_F3_E1, TWO_MENU_F3_E1, TWO_MENU_F3_E2_SET, ONE_MENU_F3, (*fun30) }, //F3子菜单
             -E2
  90          
  91                  { TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, ONE_MENU_F4, (*fun31) }, //F4子菜单
  92                  { TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, ONE_MENU_F5, (*fun32) }, //F5子菜单
  93          
  94                  { TWO_MENU_F6_E1, TWO_MENU_F6_E2, TWO_MENU_F6_E6, TWO_MENU_F6_E1_SET, ONE_MENU_F6, (*fun33) }, //F6子菜单
             -E1
  95                  { TWO_MENU_F6_E2, TWO_MENU_F6_E3, TWO_MENU_F6_E1, TWO_MENU_F6_E2_SET, ONE_MENU_F6, (*fun34) }, //F6子菜单
             -E2
  96                  { TWO_MENU_F6_E3, TWO_MENU_F6_E4, TWO_MENU_F6_E2, TWO_MENU_F6_E3_SET, ONE_MENU_F6, (*fun35) }, //F6子菜单
             -E3
  97                  { TWO_MENU_F6_E4, TWO_MENU_F6_E5, TWO_MENU_F6_E3, TWO_MENU_F6_E4_SET, ONE_MENU_F6, (*fun36) }, //F6子菜单
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 3   

             -E4
  98                  { TWO_MENU_F6_E5, TWO_MENU_F6_E6, TWO_MENU_F6_E4, TWO_MENU_F6_E5_SET, ONE_MENU_F6, (*fun37) }, //F6子菜单
             -E5
  99          
 100                  { TWO_MENU_F7_E1, TWO_MENU_F7_E2, TWO_MENU_F7_E4, TWO_MENU_F7_E1_SET, ONE_MENU_F7, (*fun38) }, //F7子菜单
             -E1
 101                  { TWO_MENU_F7_E2, TWO_MENU_F7_E3, TWO_MENU_F7_E1, TWO_MENU_F7_E2_SET, ONE_MENU_F7, (*fun39) }, //F7子菜单
             -E2
 102                  { TWO_MENU_F7_E3, TWO_MENU_F7_E4, TWO_MENU_F7_E2, TWO_MENU_F7_E3_SET, ONE_MENU_F7, (*fun40) }, //F7子菜单
             -E3
 103                  { TWO_MENU_F7_E4, TWO_MENU_F7_E1, TWO_MENU_F7_E3, TWO_MENU_F7_E4_SET, ONE_MENU_F7, (*fun41) }, //F7子菜单
             -E4        
 104          
 105                  { TWO_MENU_F8_E1, TWO_MENU_F8_E2, TWO_MENU_F8_E2, TWO_MENU_F8_E1_SET, ONE_MENU_F8, (*fun42) }, //F8子菜单
             -E1
 106                  { TWO_MENU_F8_E2, TWO_MENU_F8_E1, TWO_MENU_F8_E1, TWO_MENU_F8_E2_SET, ONE_MENU_F8, (*fun43) }, //F8子菜单
             -E2
 107          
 108                  { TWO_MENU_F9_E1, TWO_MENU_F9_E2, TWO_MENU_F9_E2, 0, ONE_MENU_F9, (*fun44) }, //F9子菜单E1
 109                  { TWO_MENU_F9_E2, TWO_MENU_F9_E1, TWO_MENU_F9_E1, 0, ONE_MENU_F9, (*fun45) }, //F9子菜单E2
 110          
 111                  { TWO_MENU_FA_SET, TWO_MENU_FA_SET, TWO_MENU_FA_SET, 0, ONE_MENU_FA, (*fun46) }, //FA子菜单
 112                  { TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, 0, ONE_MENU_Fb, (*fun47) }, //Fb子菜单
 113                  { TWO_MENU_FC_SET, TWO_MENU_FC_SET, TWO_MENU_FC_SET, 0, ONE_MENU_FC, (*fun48) }, //FC子菜单
 114                  { TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, 0, ONE_MENU_Fd, (*fun49) }, //Fd子菜单
 115          
 116                  { TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1, (*fun50) },
             - //F1_E1注册呼叫器
 117                  { TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1, (*fun51) },
             - //F1_E1注册呼叫器
 118                  { TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1, (*fun52) },
             - //F1_E1注册呼叫器
 119                  { TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1, (*fun53) },
             - //F1_E1注册呼叫器
 120          
 121                  { TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2, (*fun54) },
             - //F1_E2注册管理器
 122                  { TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2, (*fun55) },
             - //F1_E2注册管理器
 123                  { TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2, (*fun56) },
             - //F1_E2注册管理器
 124                  { TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2, (*fun57) },
             - //F1_E2注册管理器
 125          
 126                  { TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3, (*fun58) },
             - //F1_E3注册报警器
 127                  { TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3, (*fun59) },
             - //F1_E3注册报警器
 128                  { TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3, (*fun60) },
             - //F1_E3注册报警器
 129                  { TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3, (*fun61) },
             - //F1_E3注册报警器
 130          
 131                  { TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4, (*fun62) },
             - //F1_E3注册取消器
 132                  { TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4, (*fun63) },
             - //F1_E3注册取消器
 133                  { TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4, (*fun64) },
             - //F1_E3注册取消器
 134                  { TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4, (*fun65) },
             - //F1_E3注册取消器
 135          
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 4   

 136                  { TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1, (*fun66) },
             - //F2_E1删除呼叫器
 137                  { TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1, (*fun67) },
             - //F2_E1删除呼叫器
 138                  { TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1, (*fun68) },
             - //F2_E1删除呼叫器
 139                  { TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1, (*fun69) },
             - //F2_E1删除呼叫器
 140          
 141                  { TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2, (*fun70) },
             - //F2_E2删除管理器
 142                  { TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2, (*fun71) },
             - //F2_E2删除管理器
 143                  { TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2, (*fun72) },
             - //F2_E2删除管理器
 144                  { TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2, (*fun73) },
             - //F2_E2删除管理器
 145          
 146                  { TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3, (*fun74) },
             - //F2_E3删除报警器
 147                  { TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3, (*fun75) },
             - //F2_E3删除报警器
 148                  { TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3, (*fun76) },
             - //F2_E3删除报警器
 149                  { TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3, (*fun77) },
             - //F2_E3删除报警器
 150          
 151                  { TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4, (*fun78) },
             - //F2_E4删除取消器
 152                  { TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4, (*fun79) },
             - //F2_E4删除取消器
 153                  { TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4, (*fun80) },
             - //F2_E4删除取消器
 154                  { TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4, (*fun81) },
             - //F2_E4删除取消器
 155          
 156                  { TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1, (*fun82
             -) }, //F3_E1设置排队显示或者循环显示
 157                  { TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2, (*fun83
             -) }, //F3_E2设置队列个数
 158          
 159                  { TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1, (*fun84
             -) }, //F6_E1语音选择
 160                  { TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2, (*fun85
             -) }, //F6_E2语音报读次数
 161                  { TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3, (*fun86
             -) }, //F6_E3循环时候是否报读
 162                  { TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4, (*fun87
             -) }, //F6_E4音量大小调整
 163                  { TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5, (*fun88
             -) }, //F6_E5屏幕亮度调整
 164          
 165                  { TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1, (*fun89
             -) }, //F7_E1 999*9
 166                  { TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2, (*fun90
             -) }, //F7_E2 9999*9
 167                  { TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3, (*fun91
             -) }, //F7_E3 999*99
 168                  { TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4, (*fun92
             -) }, //F7_E4 9999*99
 169          
 170                  { TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1, (*fun93
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 5   

             -) }, //F8_E1 单键位跟多键位切换
 171                  { TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2, (*fun94
             -) }, //F8_E2 键位设置
 172          
 173                  { DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, (*fun95)},
 174          
 175                  { TWO_MENU_F6_E6, TWO_MENU_F6_E1, TWO_MENU_F6_E5, TWO_MENU_F6_E6_SET, ONE_MENU_F6, (*fun96) },
 176                  { TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6, (*fun97
             -) },
 177          
 178          };
 179          
 180          unsigned int KeyScan(void)  //Keyboard scan function
 181          {
 182   1              unsigned int Val = 0;
 183   1              HKeyPort |= 0x3C;//Row height
 184   1              if ((HKeyPort & 0x3C) != 0x3C)//Press button
 185   1              {
 186   2                      delay10ms();  //Remove jitter
 187   2                      if ((HKeyPort & 0x3C) != 0x3C)   //Press button
 188   2                      {
 189   3                              clear_return_standby_time();
 190   3                              if (func_index != TWO_MENU_F8_E2_SET && ((return_Two_Menu_F6_E6()) ? func_index > ONE_MENU_Fd : 1))
 191   3                              {
 192   4                                      GD5800_stop_music();
 193   4                                      delay10ms();
 194   4                                      GD5800_select_chapter(DI);
 195   4                              }
 196   3                                      sound_table=1;
 197   3                                      Val = HKeyPort & 0x3C;
 198   3                                      if (Val == 0x0038)
 199   3                                      {
 200   4                                              clear_main_press_time();        //清除菜单键按下的时间计算变量
 201   4                                              set_main_press_time_table(1); //设置相应的标志位，开始计算时间
 202   4                                      }
 203   3                                      while ((HKeyPort & 0x3C) != 0x3C);
 204   3                                      delay10ms();
 205   3                                      while ((HKeyPort & 0x3C) != 0x3C);
 206   3                                      set_main_press_time_table(0);//按键释放，清除相应的标志位
 207   3                                      set_logout_cycle_table(0);//循环跟销号重新计数
 208   3                                      return Val;
 209   3                      }
 210   2              }
 211   1              
 212   1              return 0x0fff;
 213   1      }
 214          
 215          unsigned char KeyDecoder(void)
 216          {
 217   1              unsigned int key_val = 0;
 218   1              unsigned char register_manager_temp = 0;
 219   1              key_val = KeyScan();
 220   1              register_manager_temp = return_register_manager();
 221   1              if (key_val == 0x0fff) /*do not key press*/
 222   1              {
 223   2                      /*sjz 有注册管理器标志*/
 224   2                      if (register_manager_temp == 1)
 225   2                      {
 226   3                              
 227   3                              if (func_index == MENU_STANDBY)
 228   3                              {
 229   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)accumulate_decoder);
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 6   

 230   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)old2_RF_RECE_REG[2] & 0x0f);
 231   4                                      if ((old2_RF_RECE_REG[2] & 0x0f) == 0x08)
 232   4                                      {
 233   5                                              accumulate_decoder++;
 234   5                                      }
 235   4                                      else
 236   4                                      {
 237   5                                              accumulate_decoder = 0;
 238   5                                      }
 239   4                                      if (accumulate_decoder>10)
 240   4                                      {
 241   5                                              set_main_press_time(20);
 242   5                                              accumulate_decoder = 0;
 243   5                                      }
 244   4                              }
 245   3                              clear_register_manager();
 246   3      
 247   3                              switch (old2_RF_RECE_REG[2] & 0x0f)
 248   3                              {
 249   4                              case 0x01:key_val = 0x001c; break;
 250   4                              case 0x02:key_val = 0x002c; break;
 251   4                              case 0x04:key_val = 0x0034; break;
 252   4                              case 0x08:key_val = 0x0038; break;
 253   4                              default:break;
 254   4                              }
 255   3                      }
 256   2              }
 257   1       
 258   1      
 259   1      #ifdef DEBUG
                      if (key_val != 0x0fff)
                      uart_printf("key_val is %x .\r\n", key_val); //测试按键键值
              #endif
 263   1              switch (key_val)
 264   1              {
 265   2              case 0x001c:return KEY_RETURN; break;//1 按下相应的键显示相对应的码值
 266   2              case 0x002c:return KEY_DOWN; break;//2  
 267   2              case 0x0034:return KEY_UP; break;//4
 268   2              case 0x0038:return KEY_FUNC; break;//5 按下相应的键显示相对应的码值
 269   2              default:return 0xff; break;
 270   2              }
 271   1      }
 272          
 273          void KeyProcess(void)
 274          {
 275   1              unsigned char key_value = 0, main_press_time_temp = 0;
 276   1              key_value = KeyDecoder();
 277   1              switch (key_value)
 278   1              {
 279   2                      case KEY_FUNC:
 280   2                              if ((return_Two_Menu_Fb_E1() == 0 && func_index == MENU_STANDBY) || (return_Two_Menu_Fb_E1() == 1&&( fu
             -nc_index == MENU_STANDBY || func_index == DECODER_MENU) ) )  //如果索引==0  则要1秒以上进入菜单
 281   2                              {
 282   3                                      main_press_time_temp = return_main_press_time();
 283   3                                      if (main_press_time_temp >= 20)
 284   3                                      {
 285   4                                              func_index = ONE_MENU_F1;
 286   4                                              clear_main_press_time();
 287   4                                      }
 288   3                              }
 289   2                              else if (func_index == TWO_MENU_F2_E1_D1 || func_index == TWO_MENU_F2_E1_D2 || func_index == TWO_MENU_F
             -2_E1_D3 || func_index == TWO_MENU_F2_E1_D4 )
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 7   

 290   2                              {
 291   3                                      main_press_time_temp = return_main_press_time();
 292   3                                      if (main_press_time_temp >= 10)
 293   3                                      {
 294   4                                              if (delete_call_function(Two_Menu_F2_E1))
 295   4                                              {
 296   5                                                      if (return_sound_table() == 1)
 297   5                                                      {
 298   6                                                              GD5800_select_chapter(CHENGGONG);
 299   6      
 300   6                                                              set_sound_table(0);
 301   6                                                      }
 302   5                                              }
 303   4                                              delay10ms();
 304   4                                              clear_main_press_time();
 305   4                                      }
 306   3                                      else
 307   3                                              func_index = table[func_index].enter;
 308   3                              }
 309   2                              else if (func_index == TWO_MENU_F2_E2_D1 || func_index == TWO_MENU_F2_E2_D2 || func_index == TWO_MENU_F
             -2_E2_D3 || func_index == TWO_MENU_F2_E2_D4)
 310   2                              {
 311   3                                      main_press_time_temp = return_main_press_time();
 312   3                                      if (main_press_time_temp >= 10)
 313   3                                      {
 314   4                                              if (delete_host_function(Two_Menu_F2_E2))
 315   4                                              {
 316   5                                                      if (return_sound_table() == 1)
 317   5                                                      {
 318   6                                                              GD5800_select_chapter(CHENGGONG);
 319   6      
 320   6                                                              set_sound_table(0);
 321   6                                                      }
 322   5                                              }
 323   4                                              delay10ms();
 324   4                                              clear_main_press_time();
 325   4                                      }
 326   3                                      else
 327   3                                              func_index = table[func_index].enter;
 328   3                              }
 329   2                              else if (func_index == TWO_MENU_F2_E3_D1 || func_index == TWO_MENU_F2_E3_D2 || func_index == TWO_MENU_F
             -2_E3_D3 || func_index == TWO_MENU_F2_E3_D4)
 330   2                              {
 331   3                                      main_press_time_temp = return_main_press_time();
 332   3                                      if (main_press_time_temp >= 10)
 333   3                                      {
 334   4                                              if (delete_alarm_function(Two_Menu_F2_E3))
 335   4                                              {
 336   5                                                      if (return_sound_table() == 1)
 337   5                                                      {
 338   6                                                              GD5800_select_chapter(CHENGGONG);
 339   6      
 340   6                                                              set_sound_table(0);
 341   6                                                      }
 342   5                                              }
 343   4                                              delay10ms();
 344   4                                              clear_main_press_time();
 345   4                                      }
 346   3                                      else
 347   3                                              func_index = table[func_index].enter;
 348   3                              }
 349   2                              else if (func_index == TWO_MENU_F2_E4_D1 || func_index == TWO_MENU_F2_E4_D2 || func_index == TWO_MENU_F
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 8   

             -2_E4_D3 || func_index == TWO_MENU_F2_E4_D4)
 350   2                              {
 351   3                                      main_press_time_temp = return_main_press_time();
 352   3                                      if (main_press_time_temp >= 10)
 353   3                                      {
 354   4                                              if (delete_cancel_function(Two_Menu_F2_E4))
 355   4                                              {
 356   5                                                      if (return_sound_table() == 1)
 357   5                                                      {
 358   6                                                              GD5800_select_chapter(CHENGGONG);
 359   6      
 360   6                                                              set_sound_table(0);
 361   6                                                      }
 362   5                                              }
 363   4                                              delay10ms();
 364   4                                              clear_main_press_time();                        
 365   4                                      }
 366   3                                      else
 367   3                                              func_index = table[func_index].enter;
 368   3                              }
 369   2                              else
 370   2                              {
 371   3                                      func_index = table[func_index].enter;
 372   3                                      clear_main_press_time();
 373   3                              }
 374   2                               break;
 375   2                      case KEY_RETURN:        
 376   2                              if (func_index == DECODER_MENU  && return_Two_Menu_Fb_E1() )
 377   2                              {
 378   3                                      Logout();
 379   3                              }
 380   2                              else
 381   2                              func_index = table[func_index].esc; 
 382   2                              break;
 383   2                      case KEY_UP:
 384   2                              switch (func_index)
 385   2                              {
 386   3                              case TWO_MENU_F0_YEAR: 
 387   3                                      if (time_buf1[1] == 99) time_buf1[1] = 0;       //设置万年历 年
 388   3                                                                         else time_buf1[1]++;
 389   3                                      break;
 390   3                              case TWO_MENU_F0_MOUTH:
 391   3                                      if (time_buf1[2] == 12) time_buf1[2] = 1;       //设置万年历 月
 392   3                                      else time_buf1[2]++;
 393   3                                      break;
 394   3                              case TWO_MENU_F0_DAY:
 395   3                                      if (time_buf1[3] == 31) time_buf1[3] = 1;       //设置万年历 日
 396   3                                      else time_buf1[3]++;
 397   3                                      break;
 398   3                              case TWO_MENU_F0_WEEK:
 399   3                                      if (time_buf1[7] == 7) time_buf1[7] = 1;        //设置万年历 星期
 400   3                                      else time_buf1[7]++;
 401   3                                      break;
 402   3                              case TWO_MENU_F0_HOUR:
 403   3                                      if (time_buf1[4] == 23) time_buf1[4] = 0;       //设置万年历 小时
 404   3                                      else time_buf1[4]++;
 405   3                                      break;
 406   3                              case TWO_MENU_F0_MINUTE:
 407   3                                      if (time_buf1[5] == 59) time_buf1[5] = 0;       //设置万年历 分钟
 408   3                                      else time_buf1[5]++;
 409   3                                      break;
 410   3                              case TWO_MENU_F1_E1_D1:
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 9   

 411   3                                      if (Two_Menu_F1_E1[0] == 20 ) Two_Menu_F1_E1[0] = 0;    //设置F1_E1千位
 412   3                                      else Two_Menu_F1_E1[0]++;
 413   3                                      break;
 414   3                              case TWO_MENU_F1_E1_D2:
 415   3                                      if (Two_Menu_F1_E1[1] == 9) Two_Menu_F1_E1[1] = 0;      //设置F1_E1百位
 416   3                                      else Two_Menu_F1_E1[1]++;
 417   3                                      break;
 418   3                              case TWO_MENU_F1_E1_D3:
 419   3                                      if (Two_Menu_F1_E1[2] == 9) Two_Menu_F1_E1[2] = 0;      //设置F1_E1十位
 420   3                                      else Two_Menu_F1_E1[2]++;
 421   3                                      break;
 422   3                              case TWO_MENU_F1_E1_D4:
 423   3                                      if (Two_Menu_F1_E1[3] == 9) Two_Menu_F1_E1[3] = 0;      //设置F1_E1个位
 424   3                                      else Two_Menu_F1_E1[3]++;
 425   3                                      break;
 426   3                              case TWO_MENU_F1_E2_D1:
 427   3                                      if (Two_Menu_F1_E2[0] == 20) Two_Menu_F1_E2[0] = 0;     //设置F1_E2千位
 428   3                                      else Two_Menu_F1_E2[0]++;
 429   3                                      break;
 430   3                              case TWO_MENU_F1_E2_D2:
 431   3                                      if (Two_Menu_F1_E2[1] == 9) Two_Menu_F1_E2[1] = 0;      //设置F1_E2百位
 432   3                                      else Two_Menu_F1_E2[1]++;
 433   3                                      break;
 434   3                              case TWO_MENU_F1_E2_D3:
 435   3                                      if (Two_Menu_F1_E2[2] == 9) Two_Menu_F1_E2[2] = 0;      //设置F1_E2十位
 436   3                                      else Two_Menu_F1_E2[2]++;
 437   3                                      break;
 438   3                              case TWO_MENU_F1_E2_D4:
 439   3                                      if (Two_Menu_F1_E2[3] == 9) Two_Menu_F1_E2[3] = 0;      //设置F1_E2个位
 440   3                                      else Two_Menu_F1_E2[3]++;
 441   3                                      break;
 442   3                              case TWO_MENU_F1_E3_D1:
 443   3                                      if (Two_Menu_F1_E3[0] == 20) Two_Menu_F1_E3[0] = 0;     //设置F1_E3千位
 444   3                                      else Two_Menu_F1_E3[0]++;
 445   3                                      break;
 446   3                              case TWO_MENU_F1_E3_D2:
 447   3                                      if (Two_Menu_F1_E3[1] == 9) Two_Menu_F1_E3[1] = 0;      //设置F1_E3百位
 448   3                                      else Two_Menu_F1_E3[1]++;
 449   3                                      break;
 450   3                              case TWO_MENU_F1_E3_D3:
 451   3                                      if (Two_Menu_F1_E3[2] == 9) Two_Menu_F1_E3[2] = 0;      //设置F1_E3十位
 452   3                                      else Two_Menu_F1_E3[2]++;
 453   3                                      break;
 454   3                              case TWO_MENU_F1_E3_D4:
 455   3                                      if (Two_Menu_F1_E3[3] == 9) Two_Menu_F1_E3[3] = 0;      //设置F1_E3个位
 456   3                                      else Two_Menu_F1_E3[3]++;
 457   3                                      break;
 458   3                              case TWO_MENU_F1_E4_D1:
 459   3                                      if (Two_Menu_F1_E4[0] == 20) Two_Menu_F1_E4[0] = 0;     //设置F1_E4千位
 460   3                                      else Two_Menu_F1_E4[0]++;
 461   3                                      break;
 462   3                              case TWO_MENU_F1_E4_D2:
 463   3                                      if (Two_Menu_F1_E4[1] == 9) Two_Menu_F1_E4[1] = 0;      //设置F1_E4百位
 464   3                                      else Two_Menu_F1_E4[1]++;
 465   3                                      break;
 466   3                              case TWO_MENU_F1_E4_D3:
 467   3                                      if (Two_Menu_F1_E4[2] == 9) Two_Menu_F1_E4[2] = 0;      //设置F1_E4十位
 468   3                                      else Two_Menu_F1_E4[2]++;
 469   3                                      break;
 470   3                              case TWO_MENU_F1_E4_D4:
 471   3                                      if (Two_Menu_F1_E4[3] == 9) Two_Menu_F1_E4[3] = 0;      //设置F1_E4个位
 472   3                                      else Two_Menu_F1_E4[3]++;
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 10  

 473   3                                      break;
 474   3                              case TWO_MENU_F2_E1_D1:
 475   3                                      if (Two_Menu_F2_E1[0] == 20) Two_Menu_F2_E1[0] = 0;     //设置F2_E1千位
 476   3                                      else Two_Menu_F2_E1[0]++;
 477   3                                      break;
 478   3                              case TWO_MENU_F2_E1_D2:
 479   3                                      if (Two_Menu_F2_E1[1] == 9) Two_Menu_F2_E1[1] = 0;      //设置F2_E1百位
 480   3                                      else Two_Menu_F2_E1[1]++;
 481   3                                      break;
 482   3                              case TWO_MENU_F2_E1_D3:
 483   3                                      if (Two_Menu_F2_E1[2] == 9) Two_Menu_F2_E1[2] = 0;      //设置F2_E1十位
 484   3                                      else Two_Menu_F2_E1[2]++;
 485   3                                      break;
 486   3                              case TWO_MENU_F2_E1_D4:
 487   3                                      if (Two_Menu_F2_E1[3] == 9) Two_Menu_F2_E1[3] = 0;      //设置F2_E1个位
 488   3                                      else Two_Menu_F2_E1[3]++;
 489   3                                      break;
 490   3                              case TWO_MENU_F2_E2_D1:
 491   3                                      if (Two_Menu_F2_E2[0] == 20) Two_Menu_F2_E2[0] = 0;     //设置F2_E2千位
 492   3                                      else Two_Menu_F2_E2[0]++;
 493   3                                      break;
 494   3                              case TWO_MENU_F2_E2_D2:
 495   3                                      if (Two_Menu_F2_E2[1] == 9) Two_Menu_F2_E2[1] = 0;      //设置F2_E2百位
 496   3                                      else Two_Menu_F2_E2[1]++;
 497   3                                      break;
 498   3                              case TWO_MENU_F2_E2_D3:
 499   3                                      if (Two_Menu_F2_E2[2] == 9) Two_Menu_F2_E2[2] = 0;      //设置F2_E2十位
 500   3                                      else Two_Menu_F2_E2[2]++;
 501   3                                      break;
 502   3                              case TWO_MENU_F2_E2_D4:
 503   3                                      if (Two_Menu_F2_E2[3] == 9) Two_Menu_F2_E2[3] = 0;      //设置F2_E2个位
 504   3                                      else Two_Menu_F2_E2[3]++;
 505   3                                      break;
 506   3                              case TWO_MENU_F2_E3_D1:
 507   3                                      if (Two_Menu_F2_E3[0] == 20) Two_Menu_F2_E3[0] = 0;     //设置F2_E3千位
 508   3                                      else Two_Menu_F2_E3[0]++;
 509   3                                      break;
 510   3                              case TWO_MENU_F2_E3_D2:
 511   3                                      if (Two_Menu_F2_E3[1] == 9) Two_Menu_F2_E3[1] = 0;      //设置F2_E3百位
 512   3                                      else Two_Menu_F2_E3[1]++;
 513   3                                      break;
 514   3                              case TWO_MENU_F2_E3_D3:
 515   3                                      if (Two_Menu_F2_E3[2] == 9) Two_Menu_F2_E3[2] = 0;      //设置F2_E3十位
 516   3                                      else Two_Menu_F2_E3[2]++;
 517   3                                      break;
 518   3                              case TWO_MENU_F2_E3_D4:
 519   3                                      if (Two_Menu_F2_E3[3] == 9) Two_Menu_F2_E3[3] = 0;      //设置F2_E3个位
 520   3                                      else Two_Menu_F2_E3[3]++;
 521   3                                      break;
 522   3                              case TWO_MENU_F2_E4_D1:
 523   3                                      if (Two_Menu_F2_E4[0] == 20) Two_Menu_F2_E4[0] = 0;     //设置F2_E4千位
 524   3                                      else Two_Menu_F2_E4[0]++;
 525   3                                      break;
 526   3                              case TWO_MENU_F2_E4_D2:
 527   3                                      if (Two_Menu_F2_E4[1] == 9) Two_Menu_F2_E4[1] = 0;      //设置F2_E4百位
 528   3                                      else Two_Menu_F2_E4[1]++;
 529   3                                      break;
 530   3                              case TWO_MENU_F2_E4_D3:
 531   3                                      if (Two_Menu_F2_E4[2] == 9) Two_Menu_F2_E4[2] = 0;      //设置F2_E4十位
 532   3                                      else Two_Menu_F2_E4[2]++;
 533   3                                      break;
 534   3                              case TWO_MENU_F2_E4_D4:
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 11  

 535   3                                      if (Two_Menu_F2_E4[3] == 9) Two_Menu_F2_E4[3] = 0;      //设置F2_E4个位
 536   3                                      else Two_Menu_F2_E4[3]++;
 537   3                              case TWO_MENU_F3_E1_SET:
 538   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 539   3                                      else Two_Menu_F3_E1 = 1;
 540   3                                      break;
 541   3                              case TWO_MENU_F3_E2_SET:
 542   3                                      if (Two_Menu_F3_E2 == 20) Two_Menu_F3_E2 = 1;   //存储队列个数
 543   3                                      else Two_Menu_F3_E2 ++;
 544   3                                      break;
 545   3                              case TWO_MENU_F4_SET:
 546   3                                      if (Two_Menu_F4_E1 == 99) Two_Menu_F4_E1 = 0;   //销号时间设置
 547   3                                      else Two_Menu_F4_E1++;
 548   3                                      break;
 549   3                              case TWO_MENU_F5_SET:
 550   3                                      if (Two_Menu_F5_E1 == 99) Two_Menu_F5_E1 = 0;   //循环时间设置
 551   3                                      else Two_Menu_F5_E1++;
 552   3                                      break;
 553   3                              case TWO_MENU_F6_E1_SET:
 554   3                                      if (Two_Menu_F6_E1 == 7) Two_Menu_F6_E1 = 0;    //F6_E1语音选择
 555   3                                      else Two_Menu_F6_E1++;
 556   3                                      break;
 557   3                              case TWO_MENU_F6_E2_SET:
 558   3                                      if (Two_Menu_F6_E2 == 9) Two_Menu_F6_E2 = 1;    //F6_E2语音报读次数
 559   3                                      else Two_Menu_F6_E2++;
 560   3                                      break;
 561   3                              case TWO_MENU_F6_E3_SET:
 562   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 563   3                                      else Two_Menu_F6_E3 = 0;
 564   3                                      break;
 565   3                              case TWO_MENU_F6_E4_SET:
 566   3                                      if (Two_Menu_F6_E4 == 9) Two_Menu_F6_E4 = 0;    //F6_E4音量大小调整
 567   3                                      else Two_Menu_F6_E4++;
 568   3                                      break;
 569   3                              case TWO_MENU_F6_E5_SET:
 570   3                                      if (Two_Menu_F6_E5 == 7) Two_Menu_F6_E5 = 0;    //F6_E5屏幕亮度调整
 571   3                                      else Two_Menu_F6_E5++;
 572   3                                      break;
 573   3                              case TWO_MENU_F7_E1_SET:
 574   3                                      if (Two_Menu_F7_E1 == 11) Two_Menu_F7_E1 = 0;   //F7_E1原始规则 999*9
 575   3                                      else Two_Menu_F7_E1++;
 576   3                                      break;
 577   3                              case TWO_MENU_F7_E2_SET:
 578   3                                      if (Two_Menu_F7_E2 == 11) Two_Menu_F7_E2 = 0;   //F7_E2附加规则 9999*9
 579   3                                      else Two_Menu_F7_E2++;
 580   3                                      break;
 581   3                              case TWO_MENU_F7_E3_SET:
 582   3                                      if (Two_Menu_F7_E3 == 11) Two_Menu_F7_E3 = 0;   //F7_E3附加规则 999*99
 583   3                                      else Two_Menu_F7_E3++;
 584   3                                      break;
 585   3                              case TWO_MENU_F7_E4_SET:
 586   3                                      if (Two_Menu_F7_E4 == 11) Two_Menu_F7_E4 = 0;   //F7_E3附加规则 9999*99
 587   3                                      else Two_Menu_F7_E4++;
 588   3                                      break;
 589   3                              case TWO_MENU_F8_E1_SET:
 590   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 591   3                                      else Two_Menu_F8_E1 = 1 ;
 592   3                                      break;
 593   3                              case TWO_MENU_F8_E2_SET:
 594   3                                      if (Two_Menu_F8_E2 == 38) Two_Menu_F8_E2 = 0;   //F8_E2键位设置
 595   3                                      else Two_Menu_F8_E2++;
 596   3                                      break;
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 12  

 597   3                              case DECODER_MENU:
 598   3                                      CycleUp();
 599   3                                      break;
 600   3                              case TWO_MENU_FC_SET:
 601   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 602   3                                      else Two_Menu_FC_E1 = 1;
 603   3                                      break;
 604   3                              case TWO_MENU_Fb_SET:
 605   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 606   3                                      else Two_Menu_Fb_E1 = 1;
 607   3                                      break;
 608   3                              case TWO_MENU_F6_E6_SET:
 609   3                                      if (Two_Menu_F6_E6 == 1) Two_Menu_F6_E6 = 0;    
 610   3                                      else Two_Menu_F6_E6 = 1;
 611   3                                      break;
 612   3      
 613   3                                      default:break;
 614   3                              }       
 615   2                              func_index = table[func_index].up; break;
 616   2                      case KEY_DOWN:
 617   2                              switch (func_index)
 618   2                              {
 619   3                              case TWO_MENU_F0_YEAR:
 620   3                                      if (time_buf1[1] == 0) time_buf1[1] = 99;       //设置万年历 年
 621   3                                      else time_buf1[1]--;
 622   3                                      break;
 623   3                              case TWO_MENU_F0_MOUTH:
 624   3                                      if (time_buf1[2] == 1) time_buf1[2] = 12;       //设置万年历 月
 625   3                                      else time_buf1[2]--;
 626   3                                      break;
 627   3                              case TWO_MENU_F0_DAY:
 628   3                                      if (time_buf1[3] == 1) time_buf1[3] = 31;       //设置万年历 日
 629   3                                      else time_buf1[3]--;
 630   3                                      break;
 631   3                              case TWO_MENU_F0_WEEK:
 632   3                                      if (time_buf1[7] == 1) time_buf1[7] = 7;        //设置万年历 星期
 633   3                                      else time_buf1[7]--;
 634   3                                      break;
 635   3                              case TWO_MENU_F0_HOUR:
 636   3                                      if (time_buf1[4] == 0) time_buf1[4] = 23;       //设置万年历 小时
 637   3                                      else time_buf1[4]--;
 638   3                                      break;
 639   3                              case TWO_MENU_F0_MINUTE:
 640   3                                      if (time_buf1[5] == 0) time_buf1[5] = 59;       //设置万年历 分钟
 641   3                                      else time_buf1[5]--;
 642   3                                      break;
 643   3                              case TWO_MENU_F1_E1_D1:
 644   3                                      if (Two_Menu_F1_E1[0] == 0) Two_Menu_F1_E1[0] = 20;     //设置F1_E1千位
 645   3                                      else Two_Menu_F1_E1[0]--;
 646   3                                      break;
 647   3                              case TWO_MENU_F1_E1_D2:
 648   3                                      if (Two_Menu_F1_E1[1] == 0) Two_Menu_F1_E1[1] = 9;      //设置F1_E1百位
 649   3                                      else Two_Menu_F1_E1[1]--;
 650   3                                      break;
 651   3                              case TWO_MENU_F1_E1_D3:
 652   3                                      if (Two_Menu_F1_E1[2] == 0) Two_Menu_F1_E1[2] = 9;      //设置F1_E1十位
 653   3                                      else Two_Menu_F1_E1[2]--;
 654   3                                      break;
 655   3                              case TWO_MENU_F1_E1_D4:
 656   3                                      if (Two_Menu_F1_E1[3] == 0) Two_Menu_F1_E1[3] = 9;      //设置F1_E1个位
 657   3                                      else Two_Menu_F1_E1[3]--;
 658   3                                      break;
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 13  

 659   3                              case TWO_MENU_F1_E2_D1:
 660   3                                      if (Two_Menu_F1_E2[0] == 0) Two_Menu_F1_E2[0] = 20;     //设置F1_E2千位
 661   3                                      else Two_Menu_F1_E2[0]--;
 662   3                                      break;
 663   3                              case TWO_MENU_F1_E2_D2:
 664   3                                      if (Two_Menu_F1_E2[1] == 0) Two_Menu_F1_E2[1] = 9;      //设置F1_E2百位
 665   3                                      else Two_Menu_F1_E2[1]--;
 666   3                                      break;
 667   3                              case TWO_MENU_F1_E2_D3:
 668   3                                      if (Two_Menu_F1_E2[2] == 0) Two_Menu_F1_E2[2] = 9;      //设置F1_E2十位
 669   3                                      else Two_Menu_F1_E2[2]--;
 670   3                                      break;
 671   3                              case TWO_MENU_F1_E2_D4:
 672   3                                      if (Two_Menu_F1_E2[3] == 0) Two_Menu_F1_E2[3] = 9;      //设置F1_E2个位
 673   3                                      else Two_Menu_F1_E2[3]--;
 674   3                                      break;
 675   3                              case TWO_MENU_F1_E3_D1:
 676   3                                      if (Two_Menu_F1_E3[0] == 0) Two_Menu_F1_E3[0] = 20;     //设置F1_E3千位
 677   3                                      else Two_Menu_F1_E3[0]--;
 678   3                                      break;
 679   3                              case TWO_MENU_F1_E3_D2:
 680   3                                      if (Two_Menu_F1_E3[1] == 0) Two_Menu_F1_E3[1] = 9;      //设置F1_E3百位
 681   3                                      else Two_Menu_F1_E3[1]--;
 682   3                                      break;
 683   3                              case TWO_MENU_F1_E3_D3:
 684   3                                      if (Two_Menu_F1_E3[2] == 0) Two_Menu_F1_E3[2] = 9;      //设置F1_E3十位
 685   3                                      else Two_Menu_F1_E3[2]--;
 686   3                                      break;
 687   3                              case TWO_MENU_F1_E3_D4:
 688   3                                      if (Two_Menu_F1_E3[3] == 0) Two_Menu_F1_E3[3] = 9;      //设置F1_E3个位
 689   3                                      else Two_Menu_F1_E3[3]--;
 690   3                                      break;
 691   3                              case TWO_MENU_F1_E4_D1:
 692   3                                      if (Two_Menu_F1_E4[0] == 0) Two_Menu_F1_E4[0] = 20;     //设置F1_E4千位
 693   3                                      else Two_Menu_F1_E4[0]--;
 694   3                                      break;
 695   3                              case TWO_MENU_F1_E4_D2:
 696   3                                      if (Two_Menu_F1_E4[1] == 0) Two_Menu_F1_E4[1] = 9;      //设置F1_E4百位
 697   3                                      else Two_Menu_F1_E4[1]--;
 698   3                                      break;
 699   3                              case TWO_MENU_F1_E4_D3:
 700   3                                      if (Two_Menu_F1_E4[2] == 0) Two_Menu_F1_E4[2] = 9;      //设置F1_E4十位
 701   3                                      else Two_Menu_F1_E4[2]--;
 702   3                                      break;
 703   3                              case TWO_MENU_F1_E4_D4:
 704   3                                      if (Two_Menu_F1_E4[3] == 0) Two_Menu_F1_E4[3] = 9;      //设置F1_E4个位
 705   3                                      else Two_Menu_F1_E4[3]--;
 706   3                                      break;
 707   3                              case TWO_MENU_F2_E1_D1:
 708   3                                      if (Two_Menu_F2_E1[0] == 0) Two_Menu_F2_E1[0] = 20;     //设置F2_E1千位
 709   3                                      else Two_Menu_F2_E1[0]--;
 710   3                                      break;
 711   3                              case TWO_MENU_F2_E1_D2:
 712   3                                      if (Two_Menu_F2_E1[1] == 0) Two_Menu_F2_E1[1] = 9;      //设置F2_E1百位
 713   3                                      else Two_Menu_F2_E1[1]--;
 714   3                                      break;
 715   3                              case TWO_MENU_F2_E1_D3:
 716   3                                      if (Two_Menu_F2_E1[2] == 0) Two_Menu_F2_E1[2] = 9;      //设置F2_E1十位
 717   3                                      else Two_Menu_F2_E1[2]--;
 718   3                                      break;
 719   3                              case TWO_MENU_F2_E1_D4:
 720   3                                      if (Two_Menu_F2_E1[3] == 0) Two_Menu_F2_E1[3] = 9;      //设置F2_E1个位
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 14  

 721   3                                      else Two_Menu_F2_E1[3]--;
 722   3                                      break;
 723   3                              case TWO_MENU_F2_E2_D1:
 724   3                                      if (Two_Menu_F2_E2[0] == 0) Two_Menu_F2_E2[0] = 20;     //设置F2_E2千位
 725   3                                      else Two_Menu_F2_E2[0]--;
 726   3                                      break;
 727   3                              case TWO_MENU_F2_E2_D2:
 728   3                                      if (Two_Menu_F2_E2[1] == 0) Two_Menu_F2_E2[1] = 9;      //设置F2_E2百位
 729   3                                      else Two_Menu_F2_E2[1]--;
 730   3                                      break;
 731   3                              case TWO_MENU_F2_E2_D3:
 732   3                                      if (Two_Menu_F2_E2[2] == 0) Two_Menu_F2_E2[2] = 9;      //设置F2_E2十位
 733   3                                      else Two_Menu_F2_E2[2]--;
 734   3                                      break;
 735   3                              case TWO_MENU_F2_E2_D4:
 736   3                                      if (Two_Menu_F2_E2[3] == 0) Two_Menu_F2_E2[3] = 9;      //设置F2_E2个位
 737   3                                      else Two_Menu_F2_E2[3]--;
 738   3                                      break;
 739   3                              case TWO_MENU_F2_E3_D1:
 740   3                                      if (Two_Menu_F2_E3[0] == 0) Two_Menu_F2_E3[0] = 20;     //设置F2_E3千位
 741   3                                      else Two_Menu_F2_E3[0]--;
 742   3                                      break;
 743   3                              case TWO_MENU_F2_E3_D2:
 744   3                                      if (Two_Menu_F2_E3[1] == 0) Two_Menu_F2_E3[1] = 9;      //设置F2_E3百位
 745   3                                      else Two_Menu_F2_E3[1]--;
 746   3                                      break;
 747   3                              case TWO_MENU_F2_E3_D3:
 748   3                                      if (Two_Menu_F2_E3[2] == 0) Two_Menu_F2_E3[2] = 9;      //设置F2_E3十位
 749   3                                      else Two_Menu_F2_E3[2]--;
 750   3                                      break;
 751   3                              case TWO_MENU_F2_E3_D4:
 752   3                                      if (Two_Menu_F2_E3[3] == 0) Two_Menu_F2_E3[3] = 9;      //设置F2_E3个位
 753   3                                      else Two_Menu_F2_E3[3]--;
 754   3                                      break;
 755   3                              case TWO_MENU_F2_E4_D1:
 756   3                                      if (Two_Menu_F2_E4[0] == 0) Two_Menu_F2_E4[0] = 20;     //设置F2_E4千位
 757   3                                      else Two_Menu_F2_E4[0]--;
 758   3                                      break;
 759   3                              case TWO_MENU_F2_E4_D2:
 760   3                                      if (Two_Menu_F2_E4[1] == 0) Two_Menu_F2_E4[1] = 9;      //设置F2_E4百位
 761   3                                      else Two_Menu_F2_E4[1]--;
 762   3                                      break;
 763   3                              case TWO_MENU_F2_E4_D3:
 764   3                                      if (Two_Menu_F2_E4[2] == 0) Two_Menu_F2_E4[2] = 9;      //设置F2_E4十位
 765   3                                      else Two_Menu_F2_E4[2]--;
 766   3                                      break;
 767   3                              case TWO_MENU_F2_E4_D4:
 768   3                                      if (Two_Menu_F2_E4[3] == 0) Two_Menu_F2_E4[3] = 9;      //设置F2_E4个位
 769   3                                      else Two_Menu_F2_E4[3]--;
 770   3                                      break;
 771   3                              case TWO_MENU_F3_E1_SET:
 772   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 773   3                                      else Two_Menu_F3_E1 = 1;
 774   3                                      break;
 775   3                              case TWO_MENU_F3_E2_SET:
 776   3                                      if (Two_Menu_F3_E2 == 1) Two_Menu_F3_E2 = 20;   //存储队列个数
 777   3                                      else Two_Menu_F3_E2--;
 778   3                                      break;
 779   3                              case TWO_MENU_F4_SET:
 780   3                                      if (Two_Menu_F4_E1 == 0) Two_Menu_F4_E1 = 99;   //销号时间设置
 781   3                                      else Two_Menu_F4_E1--;
 782   3                                      break;
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 15  

 783   3                              case TWO_MENU_F5_SET:
 784   3                                      if (Two_Menu_F5_E1 == 0) Two_Menu_F5_E1 = 99;   //销号时间设置
 785   3                                      else Two_Menu_F5_E1--;
 786   3                                      break;
 787   3                              case TWO_MENU_F6_E1_SET:
 788   3                                      if (Two_Menu_F6_E1 == 0) Two_Menu_F6_E1 = 7;    //F6_E1额语音选择
 789   3                                      else Two_Menu_F6_E1--;
 790   3                                      break;
 791   3                              case TWO_MENU_F6_E2_SET:
 792   3                                      if (Two_Menu_F6_E2 == 1) Two_Menu_F6_E2 = 9;    //F6_E2语音报读次数调整
 793   3                                      else Two_Menu_F6_E2--;
 794   3                                      break;
 795   3                              case TWO_MENU_F6_E3_SET:
 796   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 797   3                                      else Two_Menu_F6_E3 = 0;
 798   3                                      break;
 799   3                              case TWO_MENU_F6_E4_SET:
 800   3                                      if (Two_Menu_F6_E4 == 0) Two_Menu_F6_E4 = 9;    //F6_E4音量大小调整
 801   3                                      else Two_Menu_F6_E4--;
 802   3                                      break;
 803   3                              case TWO_MENU_F6_E5_SET:
 804   3                                      if (Two_Menu_F6_E5 == 0) Two_Menu_F6_E5 = 7;    //F6_E5屏幕亮度调整
 805   3                                      else Two_Menu_F6_E5--;
 806   3                                      break;
 807   3                              case TWO_MENU_F7_E1_SET:
 808   3                                      if (Two_Menu_F7_E1 == 0) Two_Menu_F7_E1 = 11;   //F7_E1原始规则 999*9
 809   3                                      else Two_Menu_F7_E1--;
 810   3                                      break;
 811   3                              case TWO_MENU_F7_E2_SET:
 812   3                                      if (Two_Menu_F7_E2 == 0) Two_Menu_F7_E2 = 11;   //F7_E2附加规则 9999*9
 813   3                                      else Two_Menu_F7_E2--;
 814   3                                      break;
 815   3                              case TWO_MENU_F7_E3_SET:
 816   3                                      if (Two_Menu_F7_E3 == 0) Two_Menu_F7_E3 = 11;   //F7_E3附加规则 999*99
 817   3                                      else Two_Menu_F7_E3--;
 818   3                                      break;
 819   3                              case TWO_MENU_F7_E4_SET:
 820   3                                      if (Two_Menu_F7_E4 == 0) Two_Menu_F7_E4 = 11;   //F7_E3附加规则 9999*99
 821   3                                      else Two_Menu_F7_E4--;
 822   3                                      break;
 823   3                              case TWO_MENU_F8_E1_SET:
 824   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 825   3                                      else Two_Menu_F8_E1 = 1;
 826   3                                      break;
 827   3                              case TWO_MENU_F8_E2_SET:
 828   3                                      if (Two_Menu_F8_E2 == 0) Two_Menu_F8_E2 = 38;   //F8_E2键位设置
 829   3                                      else Two_Menu_F8_E2--;
 830   3                                      break;
 831   3                              case DECODER_MENU:
 832   3                                      CycleDown();
 833   3                                      break;
 834   3                              case TWO_MENU_FC_SET:
 835   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 836   3                                      else Two_Menu_FC_E1 = 1;
 837   3                                      break;
 838   3                              case TWO_MENU_Fb_SET:
 839   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 840   3                                      else Two_Menu_Fb_E1 = 1;
 841   3                                      break;
 842   3                              case TWO_MENU_F6_E6_SET:
 843   3                                      if (Two_Menu_F6_E6 == 1) Two_Menu_F6_E6 = 0;
 844   3                                      else Two_Menu_F6_E6 = 1;
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 16  

 845   3                                      break;
 846   3      
 847   3                                      default:break;
 848   3                              }
 849   2                              func_index = table[func_index].down; break;
 850   2                      default:break;
 851   2              }
 852   1              current_operation_index = table[func_index].index_operation;
 853   1              (*current_operation_index)();//执行当前操作函数
 854   1      }
 855          
 856          void delay10ms(void)   //误差 -0.054253472222us
 857          {
 858   1              unsigned char a, b, c;
 859   1              for (c = 4; c>0; c--)
 860   1              for (b = 52; b>0; b--)
 861   1              for (a = 220; a>0; a--);
 862   1              _nop_();  //if Keil,require use intrins.h
 863   1      }
 864          
 865          unsigned char return_func_index(void)
 866          {
 867   1              unsigned char func_index_temp = 0;
 868   1              func_index_temp = func_index;
 869   1              return func_index_temp;
 870   1      }
 871          
 872          void set_func_index(unsigned char temp)
 873          {
 874   1              func_index = temp;
 875   1      }
 876          
 877          unsigned char return_Two_Menu_F3_E1(void)
 878          {
 879   1              unsigned char temp = 0;
 880   1              temp = Two_Menu_F3_E1;
 881   1              return temp;
 882   1      }
 883          
 884          unsigned char return_Two_Menu_F3_E2(void)
 885          {
 886   1              unsigned char temp = 0;
 887   1              temp = Two_Menu_F3_E2;
 888   1              return temp;
 889   1      }
 890          
 891          unsigned char return_Two_Menu_F4_E1(void)
 892          {
 893   1              unsigned char temp = 0;
 894   1              temp = Two_Menu_F4_E1;
 895   1              return temp;
 896   1      }
 897          
 898          unsigned char return_Two_Menu_F5_E1(void)
 899          {
 900   1              unsigned char temp = 0;
 901   1              temp = Two_Menu_F5_E1;
 902   1              return temp;
 903   1      }
 904          
 905          unsigned char return_Two_Menu_F6_E1(void)
 906          {
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 17  

 907   1              unsigned char temp = 0;
 908   1              temp = Two_Menu_F6_E1;
 909   1              return temp;
 910   1      }
 911          
 912          unsigned char return_Two_Menu_F6_E2(void)
 913          {
 914   1              unsigned char temp = 0;
 915   1              temp = Two_Menu_F6_E2;
 916   1              return temp;
 917   1      }
 918          
 919          unsigned char return_Two_Menu_F6_E3(void)
 920          {
 921   1              unsigned char temp = 0;
 922   1              temp = Two_Menu_F6_E3;
 923   1              return temp;
 924   1      }
 925          
 926          unsigned char return_Two_Menu_F6_E4(void)
 927          {
 928   1              unsigned char temp = 0;
 929   1              temp = Two_Menu_F6_E4;
 930   1              return temp;
 931   1      }
 932          
 933          unsigned char return_Two_Menu_F6_E5(void)
 934          {
 935   1              unsigned char temp = 0;
 936   1              temp = Two_Menu_F6_E5;
 937   1              return temp;
 938   1      }
 939          unsigned char return_Two_Menu_F6_E6(void)
 940          {
 941   1              unsigned char temp = 0;
 942   1              temp = Two_Menu_F6_E6;
 943   1              return temp;
 944   1      }
 945          
 946          
 947          unsigned char return_Two_Menu_F7_E1(void)
 948          {
 949   1              unsigned char temp = 0;
 950   1              temp = Two_Menu_F7_E1;
 951   1              return temp;
 952   1      }
 953          
 954          unsigned char return_Two_Menu_F7_E2(void)
 955          {
 956   1              unsigned char temp = 0;
 957   1              temp = Two_Menu_F7_E2;
 958   1              return temp;
 959   1      }
 960          
 961          unsigned char return_Two_Menu_F7_E3(void)
 962          {
 963   1              unsigned char temp = 0;
 964   1              temp = Two_Menu_F7_E3;
 965   1              return temp;
 966   1      }
 967          
 968          unsigned char return_Two_Menu_F7_E4(void)
C51 COMPILER V9.00   KEY                                                                   10/20/2015 17:03:09 PAGE 18  

 969          {
 970   1              unsigned char temp = 0;
 971   1              temp = Two_Menu_F7_E4;
 972   1              return temp;
 973   1      }
 974          
 975          unsigned char return_Two_Menu_F8_E1(void)
 976          {
 977   1              unsigned char temp = 0;
 978   1              temp = Two_Menu_F8_E1;
 979   1              return temp;
 980   1      }
 981          
 982          unsigned char return_Two_Menu_F8_E2(void)
 983          {
 984   1              unsigned char temp = 0;
 985   1              temp = Two_Menu_F8_E2;
 986   1              return temp;
 987   1      }
 988          
 989          unsigned char return_sound_table(void)
 990          {
 991   1              unsigned char temp = 0;
 992   1              temp = sound_table;
 993   1              return temp;
 994   1      }
 995          
 996          void set_sound_table(unsigned char temp)
 997          {
 998   1              sound_table = temp;
 999   1      }
1000          
1001          unsigned char return_Two_Menu_FC_E1(void)
1002          {
1003   1              unsigned char temp = 0;
1004   1              temp = Two_Menu_FC_E1;
1005   1              return temp;
1006   1      }
1007          
1008          unsigned char return_Two_Menu_Fb_E1(void)
1009          {
1010   1              unsigned char temp = 0;
1011   1              temp = Two_Menu_Fb_E1;
1012   1              return temp;
1013   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3280    ----
   CONSTANT SIZE    =    800    ----
   XDATA SIZE       =     57       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
