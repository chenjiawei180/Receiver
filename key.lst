C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\key.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\k
                    -ey.lst) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "usart.h"
   3          #include "tm1629.h"
   4          #include "menu.h"
   5          #include "timer.h"
   6          #include "ds1302.h"
   7          #include "at24c256.h"
   8          #include "gd5800.h"
   9          #include "ev1527.h"
  10          
  11          unsigned char sound_table = 0;
  12          unsigned char accumulate_decoder = 0;
  13          
  14          unsigned char func_index = 0; //多级菜单索引变量
  15          void(*current_operation_index)();// 多级菜单函数指针
  16          
  17          unsigned char Two_Menu_F1_E1[4] = { 0, 0, 0, 1 }; //F1_E1
  18          unsigned char Two_Menu_F1_E2[4] = { 0, 0, 0, 1 }; //F1_E2
  19          unsigned char Two_Menu_F1_E3[4] = { 0, 0, 0, 1 }; //F1_E3
  20          unsigned char Two_Menu_F1_E4[4] = { 0, 0, 0, 1 }; //F1_E4
  21          unsigned char Two_Menu_F2_E1[4] = { 0, 0, 0, 1 }; //F2_E1
  22          unsigned char Two_Menu_F2_E2[4] = { 0, 0, 0, 1 }; //F2_E2
  23          unsigned char Two_Menu_F2_E3[4] = { 0, 0, 0, 1 }; //F2_E3
  24          unsigned char Two_Menu_F2_E4[4] = { 0, 0, 0, 1 }; //F2_E4
  25          
  26          unsigned char Two_Menu_F3_E1 = 1; //即时模式或者排队显示
  27          unsigned char Two_Menu_F3_E2 = 12; //呼叫时候存储数量
  28          
  29          unsigned char Two_Menu_F4_E1 = 0; //销号时间
  30          unsigned char Two_Menu_F5_E1 = 0; //循环间隔时间
  31          
  32          unsigned char Two_Menu_F6_E1 = 0; //简单报读
  33          unsigned char Two_Menu_F6_E2 = 2; //语音报读次数
  34          unsigned char Two_Menu_F6_E3 = 0; //循环时候是否报读
  35          unsigned char Two_Menu_F6_E4 = 0; //音量大小调整
  36          unsigned char Two_Menu_F6_E5 = 0; //显示屏LED亮度调整
  37          
  38          unsigned char Two_Menu_F7_E1 = 10; // E1默认键盘规则 999*9
  39          unsigned char Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
  40          unsigned char Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
  41          unsigned char Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
  42          
  43          unsigned char Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
  44          
  45          unsigned char Two_Menu_F8_E2 = 0; // 键位设置
  46          
  47          unsigned char Two_Menu_Fb_E1 = 1; // 设置主机有没有销号功能
  48          unsigned char Two_Menu_FC_E1 = 1; // 设置万年历待机与----待机的切换
  49          unsigned char Two_Menu_Fd_E1 = 1; // E1 E2 E3 E4 E5 E6
  50          
  51          key_table code table[100] =
  52          {       // 目标索引                 上                          下          确认                 退出         函数
  53                  { MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, (*fun0) }, //待机
  54          
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 2   

  55                  { ONE_MENU_F0, ONE_MENU_F1, ONE_MENU_Fd, TWO_MENU_F0_YEAR , MENU_STANDBY, (*fun1) }, //F0-F9
  56                  { ONE_MENU_F1, ONE_MENU_F2, ONE_MENU_F0, TWO_MENU_F1_E1   , MENU_STANDBY, (*fun2) },
  57                  { ONE_MENU_F2, ONE_MENU_F3, ONE_MENU_F1, TWO_MENU_F2_E1   , MENU_STANDBY, (*fun3) },
  58                  { ONE_MENU_F3, ONE_MENU_F4, ONE_MENU_F2, TWO_MENU_F3_E1   , MENU_STANDBY, (*fun4) },
  59                  { ONE_MENU_F4, ONE_MENU_F5, ONE_MENU_F3, TWO_MENU_F4_SET  , MENU_STANDBY, (*fun5) },
  60                  { ONE_MENU_F5, ONE_MENU_F6, ONE_MENU_F4, TWO_MENU_F5_SET  , MENU_STANDBY, (*fun6) },
  61                  { ONE_MENU_F6, ONE_MENU_F7, ONE_MENU_F5, TWO_MENU_F6_E1   , MENU_STANDBY, (*fun7) },
  62                  { ONE_MENU_F7, ONE_MENU_F8, ONE_MENU_F6, TWO_MENU_F7_E1   , MENU_STANDBY, (*fun8) },
  63                  { ONE_MENU_F8, ONE_MENU_F9, ONE_MENU_F7, TWO_MENU_F8_E1   , MENU_STANDBY, (*fun9) },
  64                  { ONE_MENU_F9, ONE_MENU_FA, ONE_MENU_F8, TWO_MENU_F9_E1   , MENU_STANDBY, (*fun10) },
  65                  { ONE_MENU_FA, ONE_MENU_Fb, ONE_MENU_F9, TWO_MENU_FA_SET  , MENU_STANDBY, (*fun11) }, //FA
  66                  { ONE_MENU_Fb, ONE_MENU_FC, ONE_MENU_FA, TWO_MENU_Fb_SET  , MENU_STANDBY, (*fun12) }, //Fb
  67                  { ONE_MENU_FC, ONE_MENU_Fd, ONE_MENU_Fb, TWO_MENU_FC_SET  , MENU_STANDBY, (*fun13) }, //FC
  68                  { ONE_MENU_Fd, ONE_MENU_F0, ONE_MENU_FC, TWO_MENU_Fd_SET  , MENU_STANDBY, (*fun14) }, //Fd
  69          
  70                  { TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_MOUTH , ONE_MENU_F0, (*fun15) }
             -, //万年历 年
  71                  { TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_DAY   , ONE_MENU_F0, (*fun16) }
             -, //万年历 月
  72                  { TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_WEEK  , ONE_MENU_F0, (*fun17) }
             -, //万年历 日
  73                  { TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_HOUR  , ONE_MENU_F0, (*fun18) }
             -, //万年历 周
  74                  { TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_MINUTE, ONE_MENU_F0, (*fun19) }
             -, //万年历 小时
  75                  { TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_YEAR  , ONE_MENU_F0, (*fun20) }
             -, //万年历 分钟
  76          
  77                  { TWO_MENU_F1_E1, TWO_MENU_F1_E2, TWO_MENU_F1_E4, TWO_MENU_F1_E1_D4, ONE_MENU_F1, (*fun21) }, //F1子菜单E
             -1
  78                  { TWO_MENU_F1_E2, TWO_MENU_F1_E3, TWO_MENU_F1_E1, TWO_MENU_F1_E2_D4, ONE_MENU_F1, (*fun22) }, //F1子菜单E
             -2
  79                  { TWO_MENU_F1_E3, TWO_MENU_F1_E4, TWO_MENU_F1_E2, TWO_MENU_F1_E3_D4, ONE_MENU_F1, (*fun23) }, //F1子菜单E
             -3
  80                  { TWO_MENU_F1_E4, TWO_MENU_F1_E1, TWO_MENU_F1_E3, TWO_MENU_F1_E4_D4, ONE_MENU_F1, (*fun24) }, //F1子菜单E
             -4
  81          
  82                  { TWO_MENU_F2_E1, TWO_MENU_F2_E2, TWO_MENU_F2_E4, TWO_MENU_F2_E1_D4, ONE_MENU_F2, (*fun25) }, //F2子菜单E
             -1
  83                  { TWO_MENU_F2_E2, TWO_MENU_F2_E3, TWO_MENU_F2_E1, TWO_MENU_F2_E2_D4, ONE_MENU_F2, (*fun26) }, //F2子菜单E
             -2
  84                  { TWO_MENU_F2_E3, TWO_MENU_F2_E4, TWO_MENU_F2_E2, TWO_MENU_F2_E3_D4, ONE_MENU_F2, (*fun27) }, //F2子菜单E
             -3
  85                  { TWO_MENU_F2_E4, TWO_MENU_F2_E1, TWO_MENU_F2_E3, TWO_MENU_F2_E4_D4, ONE_MENU_F2, (*fun28) }, //F2子菜单E
             -4
  86          
  87                  { TWO_MENU_F3_E1, TWO_MENU_F3_E2, TWO_MENU_F3_E2, TWO_MENU_F3_E1_SET, ONE_MENU_F3, (*fun29) }, //F3子菜单
             -E1
  88                  { TWO_MENU_F3_E2, TWO_MENU_F3_E1, TWO_MENU_F3_E1, TWO_MENU_F3_E2_SET, ONE_MENU_F3, (*fun30) }, //F3子菜单
             -E2
  89          
  90                  { TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, ONE_MENU_F4, (*fun31) }, //F4子菜单
  91                  { TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, ONE_MENU_F5, (*fun32) }, //F5子菜单
  92          
  93                  { TWO_MENU_F6_E1, TWO_MENU_F6_E2, TWO_MENU_F6_E5, TWO_MENU_F6_E1_SET, ONE_MENU_F6, (*fun33) }, //F6子菜单
             -E1
  94                  { TWO_MENU_F6_E2, TWO_MENU_F6_E3, TWO_MENU_F6_E1, TWO_MENU_F6_E2_SET, ONE_MENU_F6, (*fun34) }, //F6子菜单
             -E2
  95                  { TWO_MENU_F6_E3, TWO_MENU_F6_E4, TWO_MENU_F6_E2, TWO_MENU_F6_E3_SET, ONE_MENU_F6, (*fun35) }, //F6子菜单
             -E3
  96                  { TWO_MENU_F6_E4, TWO_MENU_F6_E5, TWO_MENU_F6_E3, TWO_MENU_F6_E4_SET, ONE_MENU_F6, (*fun36) }, //F6子菜单
             -E4
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 3   

  97                  { TWO_MENU_F6_E5, TWO_MENU_F6_E1, TWO_MENU_F6_E4, TWO_MENU_F6_E5_SET, ONE_MENU_F6, (*fun37) }, //F6子菜单
             -E5
  98          
  99                  { TWO_MENU_F7_E1, TWO_MENU_F7_E2, TWO_MENU_F7_E4, TWO_MENU_F7_E1_SET, ONE_MENU_F7, (*fun38) }, //F7子菜单
             -E1
 100                  { TWO_MENU_F7_E2, TWO_MENU_F7_E3, TWO_MENU_F7_E1, TWO_MENU_F7_E2_SET, ONE_MENU_F7, (*fun39) }, //F7子菜单
             -E2
 101                  { TWO_MENU_F7_E3, TWO_MENU_F7_E4, TWO_MENU_F7_E2, TWO_MENU_F7_E3_SET, ONE_MENU_F7, (*fun40) }, //F7子菜单
             -E3
 102                  { TWO_MENU_F7_E4, TWO_MENU_F7_E1, TWO_MENU_F7_E3, TWO_MENU_F7_E4_SET, ONE_MENU_F7, (*fun41) }, //F7子菜单
             -E4        
 103          
 104                  { TWO_MENU_F8_E1, TWO_MENU_F8_E2, TWO_MENU_F8_E2, TWO_MENU_F8_E1_SET, ONE_MENU_F8, (*fun42) }, //F8子菜单
             -E1
 105                  { TWO_MENU_F8_E2, TWO_MENU_F8_E1, TWO_MENU_F8_E1, TWO_MENU_F8_E2_SET, ONE_MENU_F8, (*fun43) }, //F8子菜单
             -E2
 106          
 107                  { TWO_MENU_F9_E1, TWO_MENU_F9_E2, TWO_MENU_F9_E2, 0, ONE_MENU_F9, (*fun44) }, //F9子菜单E1
 108                  { TWO_MENU_F9_E2, TWO_MENU_F9_E1, TWO_MENU_F9_E1, 0, ONE_MENU_F9, (*fun45) }, //F9子菜单E2
 109          
 110                  { TWO_MENU_FA_SET, TWO_MENU_FA_SET, TWO_MENU_FA_SET, 0, ONE_MENU_FA, (*fun46) }, //FA子菜单
 111                  { TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, 0, ONE_MENU_Fb, (*fun47) }, //Fb子菜单
 112                  { TWO_MENU_FC_SET, TWO_MENU_FC_SET, TWO_MENU_FC_SET, 0, ONE_MENU_FC, (*fun48) }, //FC子菜单
 113                  { TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, 0, ONE_MENU_Fd, (*fun49) }, //Fd子菜单
 114          
 115                  { TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1, (*fun50) },
             - //F1_E1注册呼叫器
 116                  { TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1, (*fun51) },
             - //F1_E1注册呼叫器
 117                  { TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1, (*fun52) },
             - //F1_E1注册呼叫器
 118                  { TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1, (*fun53) },
             - //F1_E1注册呼叫器
 119          
 120                  { TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2, (*fun54) },
             - //F1_E2注册管理器
 121                  { TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2, (*fun55) },
             - //F1_E2注册管理器
 122                  { TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2, (*fun56) },
             - //F1_E2注册管理器
 123                  { TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2, (*fun57) },
             - //F1_E2注册管理器
 124          
 125                  { TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3, (*fun58) },
             - //F1_E3注册报警器
 126                  { TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3, (*fun59) },
             - //F1_E3注册报警器
 127                  { TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3, (*fun60) },
             - //F1_E3注册报警器
 128                  { TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3, (*fun61) },
             - //F1_E3注册报警器
 129          
 130                  { TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4, (*fun62) },
             - //F1_E3注册取消器
 131                  { TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4, (*fun63) },
             - //F1_E3注册取消器
 132                  { TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4, (*fun64) },
             - //F1_E3注册取消器
 133                  { TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4, (*fun65) },
             - //F1_E3注册取消器
 134          
 135                  { TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1, (*fun66) },
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 4   

             - //F2_E1删除呼叫器
 136                  { TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1, (*fun67) },
             - //F2_E1删除呼叫器
 137                  { TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1, (*fun68) },
             - //F2_E1删除呼叫器
 138                  { TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1, (*fun69) },
             - //F2_E1删除呼叫器
 139          
 140                  { TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2, (*fun70) },
             - //F2_E2删除管理器
 141                  { TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2, (*fun71) },
             - //F2_E2删除管理器
 142                  { TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2, (*fun72) },
             - //F2_E2删除管理器
 143                  { TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2, (*fun73) },
             - //F2_E2删除管理器
 144          
 145                  { TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3, (*fun74) },
             - //F2_E3删除报警器
 146                  { TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3, (*fun75) },
             - //F2_E3删除报警器
 147                  { TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3, (*fun76) },
             - //F2_E3删除报警器
 148                  { TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3, (*fun77) },
             - //F2_E3删除报警器
 149          
 150                  { TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4, (*fun78) },
             - //F2_E4删除取消器
 151                  { TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4, (*fun79) },
             - //F2_E4删除取消器
 152                  { TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4, (*fun80) },
             - //F2_E4删除取消器
 153                  { TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4, (*fun81) },
             - //F2_E4删除取消器
 154          
 155                  { TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1, (*fun82
             -) }, //F3_E1设置排队显示或者循环显示
 156                  { TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2, (*fun83
             -) }, //F3_E2设置队列个数
 157          
 158                  { TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1, (*fun84
             -) }, //F6_E1语音选择
 159                  { TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2, (*fun85
             -) }, //F6_E2语音报读次数
 160                  { TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3, (*fun86
             -) }, //F6_E3循环时候是否报读
 161                  { TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4, (*fun87
             -) }, //F6_E4音量大小调整
 162                  { TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5, (*fun88
             -) }, //F6_E5屏幕亮度调整
 163          
 164                  { TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1, (*fun89
             -) }, //F7_E1 999*9
 165                  { TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2, (*fun90
             -) }, //F7_E2 9999*9
 166                  { TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3, (*fun91
             -) }, //F7_E3 999*99
 167                  { TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4, (*fun92
             -) }, //F7_E4 9999*99
 168          
 169                  { TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1, (*fun93
             -) }, //F8_E1 单键位跟多键位切换
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 5   

 170                  { TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2, (*fun94
             -) }, //F8_E2 键位设置
 171          
 172                  { DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, (*fun95)},
 173          };
 174          
 175          unsigned int KeyScan(void)  //Keyboard scan function
 176          {
 177   1              unsigned int Val = 0;
 178   1              HKeyPort |= 0x3C;//Row height
 179   1              if ((HKeyPort & 0x3C) != 0x3C)//Press button
 180   1              {
 181   2                      delay10ms();  //Remove jitter
 182   2                      if ((HKeyPort & 0x3C) != 0x3C)   //Press button
 183   2                      {
 184   3                              clear_return_standby_time();
 185   3      
 186   3                                      //GD5800_select_chapter(DI);
 187   3                                      sound_table=1;
 188   3                                      Val = HKeyPort & 0x3C;
 189   3                                      if (Val == 0x0038)
 190   3                                      {
 191   4                                              clear_main_press_time();        //清除菜单键按下的时间计算变量
 192   4                                              set_main_press_time_table(1); //设置相应的标志位，开始计算时间
 193   4                                      }
 194   3                                      while ((HKeyPort & 0x3C) != 0x3C);
 195   3                                      delay10ms();
 196   3                                      while ((HKeyPort & 0x3C) != 0x3C);
 197   3                                      set_main_press_time_table(0);//按键释放，清除相应的标志位
 198   3                                      set_logout_cycle_table(0);//循环跟销号重新计数
 199   3                                      return Val;
 200   3                      }
 201   2              }
 202   1              
 203   1              return 0x0fff;
 204   1      }
 205          
 206          unsigned char KeyDecoder(void)
 207          {
 208   1              unsigned int key_val = 0;
 209   1              unsigned char register_manager_temp = 0;
 210   1              key_val = KeyScan();
 211   1              register_manager_temp = return_register_manager();
 212   1              if (key_val == 0x0fff) /*do not key press*/
 213   1              {
 214   2                      /*sjz 有注册管理器标志*/
 215   2                      if (register_manager_temp == 1)
 216   2                      {
 217   3                              
 218   3                              if (func_index == MENU_STANDBY)
 219   3                              {
 220   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)accumulate_decoder);
 221   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)old2_RF_RECE_REG[2] & 0x0f);
 222   4                                      if ((old2_RF_RECE_REG[2] & 0x0f) == 0x08)
 223   4                                      {
 224   5                                              accumulate_decoder++;
 225   5                                      }
 226   4                                      else
 227   4                                      {
 228   5                                              accumulate_decoder = 0;
 229   5                                      }
 230   4                                      if (accumulate_decoder>10)
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 6   

 231   4                                      {
 232   5                                              set_main_press_time(20);
 233   5                                              accumulate_decoder = 0;
 234   5                                      }
 235   4                              }
 236   3                              clear_register_manager();
 237   3      
 238   3                              switch (old2_RF_RECE_REG[2] & 0x0f)
 239   3                              {
 240   4                              case 0x01:key_val = 0x5c78; break;
 241   4                              case 0x02:key_val = 0x7478; break;
 242   4                              case 0x04:key_val = 0x6c78; break;
 243   4                              case 0x08:key_val = 0x7878; break;
 244   4                              default:break;
 245   4                              }
 246   3                      }
 247   2              }
 248   1       
 249   1      
 250   1      #ifdef DEBUG
                      if (key_val != 0x0fff)
                      uart_printf("key_val is %x .\r\n", key_val); //测试按键键值
              #endif
 254   1              switch (key_val)
 255   1              {
 256   2              case 0x001c:return KEY_RETURN; break;//1 按下相应的键显示相对应的码值
 257   2              case 0x002c:return KEY_DOWN; break;//2  
 258   2              case 0x0034:return KEY_UP; break;//4
 259   2              case 0x0038:return KEY_FUNC; break;//5 按下相应的键显示相对应的码值
 260   2              default:return 0xff; break;
 261   2              }
 262   1      }
 263          
 264          void KeyProcess(void)
 265          {
 266   1              unsigned char key_value = 0, main_press_time_temp = 0;
 267   1              key_value = KeyDecoder();
 268   1              switch (key_value)
 269   1              {
 270   2                      case KEY_FUNC:
 271   2                              if (func_index == MENU_STANDBY || func_index == DECODER_MENU)  //如果索引==0  则要1秒以上进入菜单
 272   2                              {
 273   3                                      main_press_time_temp = return_main_press_time();
 274   3                                      if (main_press_time_temp >= 20)
 275   3                                      {
 276   4                                              func_index = ONE_MENU_F1;
 277   4                                              clear_main_press_time();
 278   4                                      }
 279   3                              }
 280   2                              else if (func_index == TWO_MENU_F2_E1_D1 || func_index == TWO_MENU_F2_E1_D2 || func_index == TWO_MENU_F
             -2_E1_D3 || func_index == TWO_MENU_F2_E1_D4 )
 281   2                              {
 282   3                                      main_press_time_temp = return_main_press_time();
 283   3                                      if (main_press_time_temp >= 10)
 284   3                                      {
 285   4                                              if (delete_call_function(Two_Menu_F2_E1))
 286   4                                              {
 287   5                                                      if (return_sound_table() == 1)
 288   5                                                      {
 289   6                                                              GD5800_select_chapter(CHENGGONG);
 290   6      
 291   6                                                              set_sound_table(0);
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 7   

 292   6                                                      }
 293   5                                              }
 294   4                                              delay10ms();
 295   4                                              clear_main_press_time();
 296   4                                      }
 297   3                                      else
 298   3                                              func_index = table[func_index].enter;
 299   3                              }
 300   2                              else if (func_index == TWO_MENU_F2_E2_D1 || func_index == TWO_MENU_F2_E2_D2 || func_index == TWO_MENU_F
             -2_E2_D3 || func_index == TWO_MENU_F2_E2_D4)
 301   2                              {
 302   3                                      main_press_time_temp = return_main_press_time();
 303   3                                      if (main_press_time_temp >= 10)
 304   3                                      {
 305   4                                              if (delete_host_function(Two_Menu_F2_E2))
 306   4                                              {
 307   5                                                      if (return_sound_table() == 1)
 308   5                                                      {
 309   6                                                              GD5800_select_chapter(CHENGGONG);
 310   6      
 311   6                                                              set_sound_table(0);
 312   6                                                      }
 313   5                                              }
 314   4                                              delay10ms();
 315   4                                              clear_main_press_time();
 316   4                                      }
 317   3                                      else
 318   3                                              func_index = table[func_index].enter;
 319   3                              }
 320   2                              else if (func_index == TWO_MENU_F2_E3_D1 || func_index == TWO_MENU_F2_E3_D2 || func_index == TWO_MENU_F
             -2_E3_D3 || func_index == TWO_MENU_F2_E3_D4)
 321   2                              {
 322   3                                      main_press_time_temp = return_main_press_time();
 323   3                                      if (main_press_time_temp >= 10)
 324   3                                      {
 325   4                                              if (delete_alarm_function(Two_Menu_F2_E3))
 326   4                                              {
 327   5                                                      if (return_sound_table() == 1)
 328   5                                                      {
 329   6                                                              GD5800_select_chapter(CHENGGONG);
 330   6      
 331   6                                                              set_sound_table(0);
 332   6                                                      }
 333   5                                              }
 334   4                                              delay10ms();
 335   4                                              clear_main_press_time();
 336   4                                      }
 337   3                                      else
 338   3                                              func_index = table[func_index].enter;
 339   3                              }
 340   2                              else if (func_index == TWO_MENU_F2_E4_D1 || func_index == TWO_MENU_F2_E4_D2 || func_index == TWO_MENU_F
             -2_E4_D3 || func_index == TWO_MENU_F2_E4_D4)
 341   2                              {
 342   3                                      main_press_time_temp = return_main_press_time();
 343   3                                      if (main_press_time_temp >= 10)
 344   3                                      {
 345   4                                              if (delete_cancel_function(Two_Menu_F2_E4))
 346   4                                              {
 347   5                                                      if (return_sound_table() == 1)
 348   5                                                      {
 349   6                                                              GD5800_select_chapter(CHENGGONG);
 350   6      
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 8   

 351   6                                                              set_sound_table(0);
 352   6                                                      }
 353   5                                              }
 354   4                                              delay10ms();
 355   4                                              clear_main_press_time();                        
 356   4                                      }
 357   3                                      else
 358   3                                              func_index = table[func_index].enter;
 359   3                              }
 360   2                              else
 361   2                              {
 362   3                                      func_index = table[func_index].enter;
 363   3                                      clear_main_press_time();
 364   3                              }
 365   2                               break;
 366   2                      case KEY_RETURN:        
 367   2                              if (func_index == DECODER_MENU  && return_Two_Menu_Fb_E1() )
 368   2                              {
 369   3                                      Logout();
 370   3                              }
 371   2                              else
 372   2                              func_index = table[func_index].esc; 
 373   2                              break;
 374   2                      case KEY_UP:
 375   2                              switch (func_index)
 376   2                              {
 377   3                              case TWO_MENU_F0_YEAR: 
 378   3                                      if (time_buf1[1] == 99) time_buf1[1] = 0;       //设置万年历 年
 379   3                                                                         else time_buf1[1]++;
 380   3                                      break;
 381   3                              case TWO_MENU_F0_MOUTH:
 382   3                                      if (time_buf1[2] == 12) time_buf1[2] = 1;       //设置万年历 月
 383   3                                      else time_buf1[2]++;
 384   3                                      break;
 385   3                              case TWO_MENU_F0_DAY:
 386   3                                      if (time_buf1[3] == 31) time_buf1[3] = 1;       //设置万年历 日
 387   3                                      else time_buf1[3]++;
 388   3                                      break;
 389   3                              case TWO_MENU_F0_WEEK:
 390   3                                      if (time_buf1[7] == 7) time_buf1[7] = 1;        //设置万年历 星期
 391   3                                      else time_buf1[7]++;
 392   3                                      break;
 393   3                              case TWO_MENU_F0_HOUR:
 394   3                                      if (time_buf1[4] == 23) time_buf1[4] = 0;       //设置万年历 小时
 395   3                                      else time_buf1[4]++;
 396   3                                      break;
 397   3                              case TWO_MENU_F0_MINUTE:
 398   3                                      if (time_buf1[5] == 59) time_buf1[5] = 0;       //设置万年历 分钟
 399   3                                      else time_buf1[5]++;
 400   3                                      break;
 401   3                              case TWO_MENU_F1_E1_D1:
 402   3                                      if (Two_Menu_F1_E1[0] == 20 ) Two_Menu_F1_E1[0] = 0;    //设置F1_E1千位
 403   3                                      else Two_Menu_F1_E1[0]++;
 404   3                                      break;
 405   3                              case TWO_MENU_F1_E1_D2:
 406   3                                      if (Two_Menu_F1_E1[1] == 9) Two_Menu_F1_E1[1] = 0;      //设置F1_E1百位
 407   3                                      else Two_Menu_F1_E1[1]++;
 408   3                                      break;
 409   3                              case TWO_MENU_F1_E1_D3:
 410   3                                      if (Two_Menu_F1_E1[2] == 9) Two_Menu_F1_E1[2] = 0;      //设置F1_E1十位
 411   3                                      else Two_Menu_F1_E1[2]++;
 412   3                                      break;
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 9   

 413   3                              case TWO_MENU_F1_E1_D4:
 414   3                                      if (Two_Menu_F1_E1[3] == 9) Two_Menu_F1_E1[3] = 0;      //设置F1_E1个位
 415   3                                      else Two_Menu_F1_E1[3]++;
 416   3                                      break;
 417   3                              case TWO_MENU_F1_E2_D1:
 418   3                                      if (Two_Menu_F1_E2[0] == 20) Two_Menu_F1_E2[0] = 0;     //设置F1_E2千位
 419   3                                      else Two_Menu_F1_E2[0]++;
 420   3                                      break;
 421   3                              case TWO_MENU_F1_E2_D2:
 422   3                                      if (Two_Menu_F1_E2[1] == 9) Two_Menu_F1_E2[1] = 0;      //设置F1_E2百位
 423   3                                      else Two_Menu_F1_E2[1]++;
 424   3                                      break;
 425   3                              case TWO_MENU_F1_E2_D3:
 426   3                                      if (Two_Menu_F1_E2[2] == 9) Two_Menu_F1_E2[2] = 0;      //设置F1_E2十位
 427   3                                      else Two_Menu_F1_E2[2]++;
 428   3                                      break;
 429   3                              case TWO_MENU_F1_E2_D4:
 430   3                                      if (Two_Menu_F1_E2[3] == 9) Two_Menu_F1_E2[3] = 0;      //设置F1_E2个位
 431   3                                      else Two_Menu_F1_E2[3]++;
 432   3                                      break;
 433   3                              case TWO_MENU_F1_E3_D1:
 434   3                                      if (Two_Menu_F1_E3[0] == 20) Two_Menu_F1_E3[0] = 0;     //设置F1_E3千位
 435   3                                      else Two_Menu_F1_E3[0]++;
 436   3                                      break;
 437   3                              case TWO_MENU_F1_E3_D2:
 438   3                                      if (Two_Menu_F1_E3[1] == 9) Two_Menu_F1_E3[1] = 0;      //设置F1_E3百位
 439   3                                      else Two_Menu_F1_E3[1]++;
 440   3                                      break;
 441   3                              case TWO_MENU_F1_E3_D3:
 442   3                                      if (Two_Menu_F1_E3[2] == 9) Two_Menu_F1_E3[2] = 0;      //设置F1_E3十位
 443   3                                      else Two_Menu_F1_E3[2]++;
 444   3                                      break;
 445   3                              case TWO_MENU_F1_E3_D4:
 446   3                                      if (Two_Menu_F1_E3[3] == 9) Two_Menu_F1_E3[3] = 0;      //设置F1_E3个位
 447   3                                      else Two_Menu_F1_E3[3]++;
 448   3                                      break;
 449   3                              case TWO_MENU_F1_E4_D1:
 450   3                                      if (Two_Menu_F1_E4[0] == 20) Two_Menu_F1_E4[0] = 0;     //设置F1_E4千位
 451   3                                      else Two_Menu_F1_E4[0]++;
 452   3                                      break;
 453   3                              case TWO_MENU_F1_E4_D2:
 454   3                                      if (Two_Menu_F1_E4[1] == 9) Two_Menu_F1_E4[1] = 0;      //设置F1_E4百位
 455   3                                      else Two_Menu_F1_E4[1]++;
 456   3                                      break;
 457   3                              case TWO_MENU_F1_E4_D3:
 458   3                                      if (Two_Menu_F1_E4[2] == 9) Two_Menu_F1_E4[2] = 0;      //设置F1_E4十位
 459   3                                      else Two_Menu_F1_E4[2]++;
 460   3                                      break;
 461   3                              case TWO_MENU_F1_E4_D4:
 462   3                                      if (Two_Menu_F1_E4[3] == 9) Two_Menu_F1_E4[3] = 0;      //设置F1_E4个位
 463   3                                      else Two_Menu_F1_E4[3]++;
 464   3                                      break;
 465   3                              case TWO_MENU_F2_E1_D1:
 466   3                                      if (Two_Menu_F2_E1[0] == 20) Two_Menu_F2_E1[0] = 0;     //设置F2_E1千位
 467   3                                      else Two_Menu_F2_E1[0]++;
 468   3                                      break;
 469   3                              case TWO_MENU_F2_E1_D2:
 470   3                                      if (Two_Menu_F2_E1[1] == 9) Two_Menu_F2_E1[1] = 0;      //设置F2_E1百位
 471   3                                      else Two_Menu_F2_E1[1]++;
 472   3                                      break;
 473   3                              case TWO_MENU_F2_E1_D3:
 474   3                                      if (Two_Menu_F2_E1[2] == 9) Two_Menu_F2_E1[2] = 0;      //设置F2_E1十位
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 10  

 475   3                                      else Two_Menu_F2_E1[2]++;
 476   3                                      break;
 477   3                              case TWO_MENU_F2_E1_D4:
 478   3                                      if (Two_Menu_F2_E1[3] == 9) Two_Menu_F2_E1[3] = 0;      //设置F2_E1个位
 479   3                                      else Two_Menu_F2_E1[3]++;
 480   3                                      break;
 481   3                              case TWO_MENU_F2_E2_D1:
 482   3                                      if (Two_Menu_F2_E2[0] == 20) Two_Menu_F2_E2[0] = 0;     //设置F2_E2千位
 483   3                                      else Two_Menu_F2_E2[0]++;
 484   3                                      break;
 485   3                              case TWO_MENU_F2_E2_D2:
 486   3                                      if (Two_Menu_F2_E2[1] == 9) Two_Menu_F2_E2[1] = 0;      //设置F2_E2百位
 487   3                                      else Two_Menu_F2_E2[1]++;
 488   3                                      break;
 489   3                              case TWO_MENU_F2_E2_D3:
 490   3                                      if (Two_Menu_F2_E2[2] == 9) Two_Menu_F2_E2[2] = 0;      //设置F2_E2十位
 491   3                                      else Two_Menu_F2_E2[2]++;
 492   3                                      break;
 493   3                              case TWO_MENU_F2_E2_D4:
 494   3                                      if (Two_Menu_F2_E2[3] == 9) Two_Menu_F2_E2[3] = 0;      //设置F2_E2个位
 495   3                                      else Two_Menu_F2_E2[3]++;
 496   3                                      break;
 497   3                              case TWO_MENU_F2_E3_D1:
 498   3                                      if (Two_Menu_F2_E3[0] == 20) Two_Menu_F2_E3[0] = 0;     //设置F2_E3千位
 499   3                                      else Two_Menu_F2_E3[0]++;
 500   3                                      break;
 501   3                              case TWO_MENU_F2_E3_D2:
 502   3                                      if (Two_Menu_F2_E3[1] == 9) Two_Menu_F2_E3[1] = 0;      //设置F2_E3百位
 503   3                                      else Two_Menu_F2_E3[1]++;
 504   3                                      break;
 505   3                              case TWO_MENU_F2_E3_D3:
 506   3                                      if (Two_Menu_F2_E3[2] == 9) Two_Menu_F2_E3[2] = 0;      //设置F2_E3十位
 507   3                                      else Two_Menu_F2_E3[2]++;
 508   3                                      break;
 509   3                              case TWO_MENU_F2_E3_D4:
 510   3                                      if (Two_Menu_F2_E3[3] == 9) Two_Menu_F2_E3[3] = 0;      //设置F2_E3个位
 511   3                                      else Two_Menu_F2_E3[3]++;
 512   3                                      break;
 513   3                              case TWO_MENU_F2_E4_D1:
 514   3                                      if (Two_Menu_F2_E4[0] == 20) Two_Menu_F2_E4[0] = 0;     //设置F2_E4千位
 515   3                                      else Two_Menu_F2_E4[0]++;
 516   3                                      break;
 517   3                              case TWO_MENU_F2_E4_D2:
 518   3                                      if (Two_Menu_F2_E4[1] == 9) Two_Menu_F2_E4[1] = 0;      //设置F2_E4百位
 519   3                                      else Two_Menu_F2_E4[1]++;
 520   3                                      break;
 521   3                              case TWO_MENU_F2_E4_D3:
 522   3                                      if (Two_Menu_F2_E4[2] == 9) Two_Menu_F2_E4[2] = 0;      //设置F2_E4十位
 523   3                                      else Two_Menu_F2_E4[2]++;
 524   3                                      break;
 525   3                              case TWO_MENU_F2_E4_D4:
 526   3                                      if (Two_Menu_F2_E4[3] == 9) Two_Menu_F2_E4[3] = 0;      //设置F2_E4个位
 527   3                                      else Two_Menu_F2_E4[3]++;
 528   3                              case TWO_MENU_F3_E1_SET:
 529   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 530   3                                      else Two_Menu_F3_E1 = 1;
 531   3                                      break;
 532   3                              case TWO_MENU_F3_E2_SET:
 533   3                                      if (Two_Menu_F3_E2 == 20) Two_Menu_F3_E2 = 1;   //存储队列个数
 534   3                                      else Two_Menu_F3_E2 ++;
 535   3                                      break;
 536   3                              case TWO_MENU_F4_SET:
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 11  

 537   3                                      if (Two_Menu_F4_E1 == 99) Two_Menu_F4_E1 = 0;   //销号时间设置
 538   3                                      else Two_Menu_F4_E1++;
 539   3                                      break;
 540   3                              case TWO_MENU_F5_SET:
 541   3                                      if (Two_Menu_F5_E1 == 99) Two_Menu_F5_E1 = 0;   //循环时间设置
 542   3                                      else Two_Menu_F5_E1++;
 543   3                                      break;
 544   3                              case TWO_MENU_F6_E1_SET:
 545   3                                      if (Two_Menu_F6_E1 == 5) Two_Menu_F6_E1 = 0;    //F6_E1语音选择
 546   3                                      else Two_Menu_F6_E1++;
 547   3                                      break;
 548   3                              case TWO_MENU_F6_E2_SET:
 549   3                                      if (Two_Menu_F6_E2 == 9) Two_Menu_F6_E2 = 1;    //F6_E2语音报读次数
 550   3                                      else Two_Menu_F6_E2++;
 551   3                                      break;
 552   3                              case TWO_MENU_F6_E3_SET:
 553   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 554   3                                      else Two_Menu_F6_E3 = 0;
 555   3                                      break;
 556   3                              case TWO_MENU_F6_E4_SET:
 557   3                                      if (Two_Menu_F6_E4 == 9) Two_Menu_F6_E4 = 0;    //F6_E4音量大小调整
 558   3                                      else Two_Menu_F6_E4++;
 559   3                                      break;
 560   3                              case TWO_MENU_F6_E5_SET:
 561   3                                      if (Two_Menu_F6_E5 == 7) Two_Menu_F6_E5 = 0;    //F6_E5屏幕亮度调整
 562   3                                      else Two_Menu_F6_E5++;
 563   3                                      break;
 564   3                              case TWO_MENU_F7_E1_SET:
 565   3                                      if (Two_Menu_F7_E1 == 11) Two_Menu_F7_E1 = 0;   //F7_E1原始规则 999*9
 566   3                                      else Two_Menu_F7_E1++;
 567   3                                      break;
 568   3                              case TWO_MENU_F7_E2_SET:
 569   3                                      if (Two_Menu_F7_E2 == 11) Two_Menu_F7_E2 = 0;   //F7_E2附加规则 9999*9
 570   3                                      else Two_Menu_F7_E2++;
 571   3                                      break;
 572   3                              case TWO_MENU_F7_E3_SET:
 573   3                                      if (Two_Menu_F7_E3 == 11) Two_Menu_F7_E3 = 0;   //F7_E3附加规则 999*99
 574   3                                      else Two_Menu_F7_E3++;
 575   3                                      break;
 576   3                              case TWO_MENU_F7_E4_SET:
 577   3                                      if (Two_Menu_F7_E4 == 11) Two_Menu_F7_E4 = 0;   //F7_E3附加规则 9999*99
 578   3                                      else Two_Menu_F7_E4++;
 579   3                                      break;
 580   3                              case TWO_MENU_F8_E1_SET:
 581   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 582   3                                      else Two_Menu_F8_E1 = 1 ;
 583   3                                      break;
 584   3                              case TWO_MENU_F8_E2_SET:
 585   3                                      if (Two_Menu_F8_E2 == 43) Two_Menu_F8_E2 = 0;   //F8_E2键位设置
 586   3                                      else Two_Menu_F8_E2++;
 587   3                                      break;
 588   3                              case DECODER_MENU:
 589   3                                      CycleUp();
 590   3                                      break;
 591   3                              case TWO_MENU_FC_SET:
 592   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 593   3                                      else Two_Menu_FC_E1 = 1;
 594   3                              case TWO_MENU_Fb_SET:
 595   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 596   3                                      else Two_Menu_Fb_E1 = 1;
 597   3      
 598   3                                      default:break;
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 12  

 599   3                              }       
 600   2                              func_index = table[func_index].up; break;
 601   2                      case KEY_DOWN:
 602   2                              switch (func_index)
 603   2                              {
 604   3                              case TWO_MENU_F0_YEAR:
 605   3                                      if (time_buf1[1] == 0) time_buf1[1] = 99;       //设置万年历 年
 606   3                                      else time_buf1[1]--;
 607   3                                      break;
 608   3                              case TWO_MENU_F0_MOUTH:
 609   3                                      if (time_buf1[2] == 1) time_buf1[2] = 12;       //设置万年历 月
 610   3                                      else time_buf1[2]--;
 611   3                                      break;
 612   3                              case TWO_MENU_F0_DAY:
 613   3                                      if (time_buf1[3] == 1) time_buf1[3] = 31;       //设置万年历 日
 614   3                                      else time_buf1[3]--;
 615   3                                      break;
 616   3                              case TWO_MENU_F0_WEEK:
 617   3                                      if (time_buf1[7] == 1) time_buf1[7] = 7;        //设置万年历 星期
 618   3                                      else time_buf1[7]--;
 619   3                                      break;
 620   3                              case TWO_MENU_F0_HOUR:
 621   3                                      if (time_buf1[4] == 0) time_buf1[4] = 23;       //设置万年历 小时
 622   3                                      else time_buf1[4]--;
 623   3                                      break;
 624   3                              case TWO_MENU_F0_MINUTE:
 625   3                                      if (time_buf1[5] == 0) time_buf1[5] = 59;       //设置万年历 分钟
 626   3                                      else time_buf1[5]--;
 627   3                                      break;
 628   3                              case TWO_MENU_F1_E1_D1:
 629   3                                      if (Two_Menu_F1_E1[0] == 0) Two_Menu_F1_E1[0] = 20;     //设置F1_E1千位
 630   3                                      else Two_Menu_F1_E1[0]--;
 631   3                                      break;
 632   3                              case TWO_MENU_F1_E1_D2:
 633   3                                      if (Two_Menu_F1_E1[1] == 0) Two_Menu_F1_E1[1] = 9;      //设置F1_E1百位
 634   3                                      else Two_Menu_F1_E1[1]--;
 635   3                                      break;
 636   3                              case TWO_MENU_F1_E1_D3:
 637   3                                      if (Two_Menu_F1_E1[2] == 0) Two_Menu_F1_E1[2] = 9;      //设置F1_E1十位
 638   3                                      else Two_Menu_F1_E1[2]--;
 639   3                                      break;
 640   3                              case TWO_MENU_F1_E1_D4:
 641   3                                      if (Two_Menu_F1_E1[3] == 0) Two_Menu_F1_E1[3] = 9;      //设置F1_E1个位
 642   3                                      else Two_Menu_F1_E1[3]--;
 643   3                                      break;
 644   3                              case TWO_MENU_F1_E2_D1:
 645   3                                      if (Two_Menu_F1_E2[0] == 0) Two_Menu_F1_E2[0] = 20;     //设置F1_E2千位
 646   3                                      else Two_Menu_F1_E2[0]--;
 647   3                                      break;
 648   3                              case TWO_MENU_F1_E2_D2:
 649   3                                      if (Two_Menu_F1_E2[1] == 0) Two_Menu_F1_E2[1] = 9;      //设置F1_E2百位
 650   3                                      else Two_Menu_F1_E2[1]--;
 651   3                                      break;
 652   3                              case TWO_MENU_F1_E2_D3:
 653   3                                      if (Two_Menu_F1_E2[2] == 0) Two_Menu_F1_E2[2] = 9;      //设置F1_E2十位
 654   3                                      else Two_Menu_F1_E2[2]--;
 655   3                                      break;
 656   3                              case TWO_MENU_F1_E2_D4:
 657   3                                      if (Two_Menu_F1_E2[3] == 0) Two_Menu_F1_E2[3] = 9;      //设置F1_E2个位
 658   3                                      else Two_Menu_F1_E2[3]--;
 659   3                                      break;
 660   3                              case TWO_MENU_F1_E3_D1:
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 13  

 661   3                                      if (Two_Menu_F1_E3[0] == 0) Two_Menu_F1_E3[0] = 20;     //设置F1_E3千位
 662   3                                      else Two_Menu_F1_E3[0]--;
 663   3                                      break;
 664   3                              case TWO_MENU_F1_E3_D2:
 665   3                                      if (Two_Menu_F1_E3[1] == 0) Two_Menu_F1_E3[1] = 9;      //设置F1_E3百位
 666   3                                      else Two_Menu_F1_E3[1]--;
 667   3                                      break;
 668   3                              case TWO_MENU_F1_E3_D3:
 669   3                                      if (Two_Menu_F1_E3[2] == 0) Two_Menu_F1_E3[2] = 9;      //设置F1_E3十位
 670   3                                      else Two_Menu_F1_E3[2]--;
 671   3                                      break;
 672   3                              case TWO_MENU_F1_E3_D4:
 673   3                                      if (Two_Menu_F1_E3[3] == 0) Two_Menu_F1_E3[3] = 9;      //设置F1_E3个位
 674   3                                      else Two_Menu_F1_E3[3]--;
 675   3                                      break;
 676   3                              case TWO_MENU_F1_E4_D1:
 677   3                                      if (Two_Menu_F1_E4[0] == 0) Two_Menu_F1_E4[0] = 20;     //设置F1_E4千位
 678   3                                      else Two_Menu_F1_E4[0]--;
 679   3                                      break;
 680   3                              case TWO_MENU_F1_E4_D2:
 681   3                                      if (Two_Menu_F1_E4[1] == 0) Two_Menu_F1_E4[1] = 9;      //设置F1_E4百位
 682   3                                      else Two_Menu_F1_E4[1]--;
 683   3                                      break;
 684   3                              case TWO_MENU_F1_E4_D3:
 685   3                                      if (Two_Menu_F1_E4[2] == 0) Two_Menu_F1_E4[2] = 9;      //设置F1_E4十位
 686   3                                      else Two_Menu_F1_E4[2]--;
 687   3                                      break;
 688   3                              case TWO_MENU_F1_E4_D4:
 689   3                                      if (Two_Menu_F1_E4[3] == 0) Two_Menu_F1_E4[3] = 9;      //设置F1_E4个位
 690   3                                      else Two_Menu_F1_E4[3]--;
 691   3                                      break;
 692   3                              case TWO_MENU_F2_E1_D1:
 693   3                                      if (Two_Menu_F2_E1[0] == 0) Two_Menu_F2_E1[0] = 20;     //设置F2_E1千位
 694   3                                      else Two_Menu_F2_E1[0]--;
 695   3                                      break;
 696   3                              case TWO_MENU_F2_E1_D2:
 697   3                                      if (Two_Menu_F2_E1[1] == 0) Two_Menu_F2_E1[1] = 9;      //设置F2_E1百位
 698   3                                      else Two_Menu_F2_E1[1]--;
 699   3                                      break;
 700   3                              case TWO_MENU_F2_E1_D3:
 701   3                                      if (Two_Menu_F2_E1[2] == 0) Two_Menu_F2_E1[2] = 9;      //设置F2_E1十位
 702   3                                      else Two_Menu_F2_E1[2]--;
 703   3                                      break;
 704   3                              case TWO_MENU_F2_E1_D4:
 705   3                                      if (Two_Menu_F2_E1[3] == 0) Two_Menu_F2_E1[3] = 9;      //设置F2_E1个位
 706   3                                      else Two_Menu_F2_E1[3]--;
 707   3                                      break;
 708   3                              case TWO_MENU_F2_E2_D1:
 709   3                                      if (Two_Menu_F2_E2[0] == 0) Two_Menu_F2_E2[0] = 20;     //设置F2_E2千位
 710   3                                      else Two_Menu_F2_E2[0]--;
 711   3                                      break;
 712   3                              case TWO_MENU_F2_E2_D2:
 713   3                                      if (Two_Menu_F2_E2[1] == 0) Two_Menu_F2_E2[1] = 9;      //设置F2_E2百位
 714   3                                      else Two_Menu_F2_E2[1]--;
 715   3                                      break;
 716   3                              case TWO_MENU_F2_E2_D3:
 717   3                                      if (Two_Menu_F2_E2[2] == 0) Two_Menu_F2_E2[2] = 9;      //设置F2_E2十位
 718   3                                      else Two_Menu_F2_E2[2]--;
 719   3                                      break;
 720   3                              case TWO_MENU_F2_E2_D4:
 721   3                                      if (Two_Menu_F2_E2[3] == 0) Two_Menu_F2_E2[3] = 9;      //设置F2_E2个位
 722   3                                      else Two_Menu_F2_E2[3]--;
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 14  

 723   3                                      break;
 724   3                              case TWO_MENU_F2_E3_D1:
 725   3                                      if (Two_Menu_F2_E3[0] == 0) Two_Menu_F2_E3[0] = 20;     //设置F2_E3千位
 726   3                                      else Two_Menu_F2_E3[0]--;
 727   3                                      break;
 728   3                              case TWO_MENU_F2_E3_D2:
 729   3                                      if (Two_Menu_F2_E3[1] == 0) Two_Menu_F2_E3[1] = 9;      //设置F2_E3百位
 730   3                                      else Two_Menu_F2_E3[1]--;
 731   3                                      break;
 732   3                              case TWO_MENU_F2_E3_D3:
 733   3                                      if (Two_Menu_F2_E3[2] == 0) Two_Menu_F2_E3[2] = 9;      //设置F2_E3十位
 734   3                                      else Two_Menu_F2_E3[2]--;
 735   3                                      break;
 736   3                              case TWO_MENU_F2_E3_D4:
 737   3                                      if (Two_Menu_F2_E3[3] == 0) Two_Menu_F2_E3[3] = 9;      //设置F2_E3个位
 738   3                                      else Two_Menu_F2_E3[3]--;
 739   3                                      break;
 740   3                              case TWO_MENU_F2_E4_D1:
 741   3                                      if (Two_Menu_F2_E4[0] == 0) Two_Menu_F2_E4[0] = 20;     //设置F2_E4千位
 742   3                                      else Two_Menu_F2_E4[0]--;
 743   3                                      break;
 744   3                              case TWO_MENU_F2_E4_D2:
 745   3                                      if (Two_Menu_F2_E4[1] == 0) Two_Menu_F2_E4[1] = 9;      //设置F2_E4百位
 746   3                                      else Two_Menu_F2_E4[1]--;
 747   3                                      break;
 748   3                              case TWO_MENU_F2_E4_D3:
 749   3                                      if (Two_Menu_F2_E4[2] == 0) Two_Menu_F2_E4[2] = 9;      //设置F2_E4十位
 750   3                                      else Two_Menu_F2_E4[2]--;
 751   3                                      break;
 752   3                              case TWO_MENU_F2_E4_D4:
 753   3                                      if (Two_Menu_F2_E4[3] == 0) Two_Menu_F2_E4[3] = 9;      //设置F2_E4个位
 754   3                                      else Two_Menu_F2_E4[3]--;
 755   3                                      break;
 756   3                              case TWO_MENU_F3_E1_SET:
 757   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 758   3                                      else Two_Menu_F3_E1 = 1;
 759   3                                      break;
 760   3                              case TWO_MENU_F3_E2_SET:
 761   3                                      if (Two_Menu_F3_E2 == 1) Two_Menu_F3_E2 = 20;   //存储队列个数
 762   3                                      else Two_Menu_F3_E2--;
 763   3                                      break;
 764   3                              case TWO_MENU_F4_SET:
 765   3                                      if (Two_Menu_F4_E1 == 0) Two_Menu_F4_E1 = 99;   //销号时间设置
 766   3                                      else Two_Menu_F4_E1--;
 767   3                                      break;
 768   3                              case TWO_MENU_F5_SET:
 769   3                                      if (Two_Menu_F5_E1 == 0) Two_Menu_F5_E1 = 99;   //销号时间设置
 770   3                                      else Two_Menu_F5_E1--;
 771   3                                      break;
 772   3                              case TWO_MENU_F6_E1_SET:
 773   3                                      if (Two_Menu_F6_E1 == 0) Two_Menu_F6_E1 = 5;    //F6_E1额语音选择
 774   3                                      else Two_Menu_F6_E1--;
 775   3                                      break;
 776   3                              case TWO_MENU_F6_E2_SET:
 777   3                                      if (Two_Menu_F6_E2 == 1) Two_Menu_F6_E2 = 9;    //F6_E2语音报读次数调整
 778   3                                      else Two_Menu_F6_E2--;
 779   3                                      break;
 780   3                              case TWO_MENU_F6_E3_SET:
 781   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 782   3                                      else Two_Menu_F6_E3 = 0;
 783   3                                      break;
 784   3                              case TWO_MENU_F6_E4_SET:
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 15  

 785   3                                      if (Two_Menu_F6_E4 == 0) Two_Menu_F6_E4 = 9;    //F6_E4音量大小调整
 786   3                                      else Two_Menu_F6_E4--;
 787   3                                      break;
 788   3                              case TWO_MENU_F6_E5_SET:
 789   3                                      if (Two_Menu_F6_E5 == 0) Two_Menu_F6_E5 = 7;    //F6_E5屏幕亮度调整
 790   3                                      else Two_Menu_F6_E5--;
 791   3                                      break;
 792   3                              case TWO_MENU_F7_E1_SET:
 793   3                                      if (Two_Menu_F7_E1 == 0) Two_Menu_F7_E1 = 11;   //F7_E1原始规则 999*9
 794   3                                      else Two_Menu_F7_E1--;
 795   3                                      break;
 796   3                              case TWO_MENU_F7_E2_SET:
 797   3                                      if (Two_Menu_F7_E2 == 0) Two_Menu_F7_E2 = 11;   //F7_E2附加规则 9999*9
 798   3                                      else Two_Menu_F7_E2--;
 799   3                                      break;
 800   3                              case TWO_MENU_F7_E3_SET:
 801   3                                      if (Two_Menu_F7_E3 == 0) Two_Menu_F7_E3 = 11;   //F7_E3附加规则 999*99
 802   3                                      else Two_Menu_F7_E3--;
 803   3                                      break;
 804   3                              case TWO_MENU_F7_E4_SET:
 805   3                                      if (Two_Menu_F7_E4 == 0) Two_Menu_F7_E4 = 11;   //F7_E3附加规则 9999*99
 806   3                                      else Two_Menu_F7_E4--;
 807   3                                      break;
 808   3                              case TWO_MENU_F8_E1_SET:
 809   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 810   3                                      else Two_Menu_F8_E1 = 1;
 811   3                                      break;
 812   3                              case TWO_MENU_F8_E2_SET:
 813   3                                      if (Two_Menu_F8_E2 == 0) Two_Menu_F8_E2 = 43;   //F8_E2键位设置
 814   3                                      else Two_Menu_F8_E2--;
 815   3                                      break;
 816   3                              case DECODER_MENU:
 817   3                                      CycleDown();
 818   3                                      break;
 819   3                              case TWO_MENU_FC_SET:
 820   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 821   3                                      else Two_Menu_FC_E1 = 1;
 822   3                              case TWO_MENU_Fb_SET:
 823   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 824   3                                      else Two_Menu_Fb_E1 = 1;
 825   3      
 826   3                                      default:break;
 827   3                              }
 828   2                              func_index = table[func_index].down; break;
 829   2                      default:break;
 830   2              }
 831   1              current_operation_index = table[func_index].index_operation;
 832   1              (*current_operation_index)();//执行当前操作函数
 833   1      }
 834          
 835          void delay10ms(void)   //误差 -0.054253472222us
 836          {
 837   1              unsigned char a, b, c;
 838   1              for (c = 4; c>0; c--)
 839   1              for (b = 52; b>0; b--)
 840   1              for (a = 220; a>0; a--);
 841   1              _nop_();  //if Keil,require use intrins.h
 842   1      }
 843          
 844          unsigned char return_func_index(void)
 845          {
 846   1              unsigned char func_index_temp = 0;
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 16  

 847   1              func_index_temp = func_index;
 848   1              return func_index_temp;
 849   1      }
 850          
 851          void set_func_index(unsigned char temp)
 852          {
 853   1              func_index = temp;
 854   1      }
 855          
 856          unsigned char return_Two_Menu_F3_E1(void)
 857          {
 858   1              unsigned char temp = 0;
 859   1              temp = Two_Menu_F3_E1;
 860   1              return temp;
 861   1      }
 862          
 863          unsigned char return_Two_Menu_F3_E2(void)
 864          {
 865   1              unsigned char temp = 0;
 866   1              temp = Two_Menu_F3_E2;
 867   1              return temp;
 868   1      }
 869          
 870          unsigned char return_Two_Menu_F4_E1(void)
 871          {
 872   1              unsigned char temp = 0;
 873   1              temp = Two_Menu_F4_E1;
 874   1              return temp;
 875   1      }
 876          
 877          unsigned char return_Two_Menu_F5_E1(void)
 878          {
 879   1              unsigned char temp = 0;
 880   1              temp = Two_Menu_F5_E1;
 881   1              return temp;
 882   1      }
 883          
 884          unsigned char return_Two_Menu_F6_E1(void)
 885          {
 886   1              unsigned char temp = 0;
 887   1              temp = Two_Menu_F6_E1;
 888   1              return temp;
 889   1      }
 890          
 891          unsigned char return_Two_Menu_F6_E2(void)
 892          {
 893   1              unsigned char temp = 0;
 894   1              temp = Two_Menu_F6_E2;
 895   1              return temp;
 896   1      }
 897          
 898          unsigned char return_Two_Menu_F6_E3(void)
 899          {
 900   1              unsigned char temp = 0;
 901   1              temp = Two_Menu_F6_E3;
 902   1              return temp;
 903   1      }
 904          
 905          unsigned char return_Two_Menu_F6_E4(void)
 906          {
 907   1              unsigned char temp = 0;
 908   1              temp = Two_Menu_F6_E4;
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 17  

 909   1              return temp;
 910   1      }
 911          
 912          unsigned char return_Two_Menu_F6_E5(void)
 913          {
 914   1              unsigned char temp = 0;
 915   1              temp = Two_Menu_F6_E5;
 916   1              return temp;
 917   1      }
 918          
 919          unsigned char return_Two_Menu_F7_E1(void)
 920          {
 921   1              unsigned char temp = 0;
 922   1              temp = Two_Menu_F7_E1;
 923   1              return temp;
 924   1      }
 925          
 926          unsigned char return_Two_Menu_F7_E2(void)
 927          {
 928   1              unsigned char temp = 0;
 929   1              temp = Two_Menu_F7_E2;
 930   1              return temp;
 931   1      }
 932          
 933          unsigned char return_Two_Menu_F7_E3(void)
 934          {
 935   1              unsigned char temp = 0;
 936   1              temp = Two_Menu_F7_E3;
 937   1              return temp;
 938   1      }
 939          
 940          unsigned char return_Two_Menu_F7_E4(void)
 941          {
 942   1              unsigned char temp = 0;
 943   1              temp = Two_Menu_F7_E4;
 944   1              return temp;
 945   1      }
 946          
 947          unsigned char return_Two_Menu_F8_E1(void)
 948          {
 949   1              unsigned char temp = 0;
 950   1              temp = Two_Menu_F8_E1;
 951   1              return temp;
 952   1      }
 953          
 954          unsigned char return_Two_Menu_F8_E2(void)
 955          {
 956   1              unsigned char temp = 0;
 957   1              temp = Two_Menu_F8_E2;
 958   1              return temp;
 959   1      }
 960          
 961          unsigned char return_sound_table(void)
 962          {
 963   1              unsigned char temp = 0;
 964   1              temp = sound_table;
 965   1              return temp;
 966   1      }
 967          
 968          void set_sound_table(unsigned char temp)
 969          {
 970   1              sound_table = temp;
C51 COMPILER V9.00   KEY                                                                   10/15/2015 12:13:44 PAGE 18  

 971   1      }
 972          
 973          unsigned char return_Two_Menu_FC_E1(void)
 974          {
 975   1              unsigned char temp = 0;
 976   1              temp = Two_Menu_FC_E1;
 977   1              return temp;
 978   1      }
 979          
 980          unsigned char return_Two_Menu_Fb_E1(void)
 981          {
 982   1              unsigned char temp = 0;
 983   1              temp = Two_Menu_Fb_E1;
 984   1              return temp;
 985   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3167    ----
   CONSTANT SIZE    =    800    ----
   XDATA SIZE       =     56       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
