C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\key.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\k
                    -ey.lst) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "usart.h"
   3          #include "tm1629.h"
   4          #include "menu.h"
   5          #include "timer.h"
   6          #include "ds1302.h"
   7          #include "at24c256.h"
   8          #include "gd5800.h"
   9          #include "ev1527.h"
  10          
  11          unsigned char sound_table = 0;
  12          unsigned char accumulate_decoder = 0;
  13          
  14          unsigned char func_index = 0; //多级菜单索引变量
  15          void(*current_operation_index)();// 多级菜单函数指针
  16          
  17          unsigned char Two_Menu_F1_E1[5] = { 0, 0, 0, 1 }; //F1_E1
  18          unsigned char Two_Menu_F1_E2[5] = { 0, 0, 0, 1 }; //F1_E2
  19          unsigned char Two_Menu_F1_E3[5] = { 0, 0, 0, 1 }; //F1_E3
  20          unsigned char Two_Menu_F1_E4[5] = { 0, 0, 0, 1 }; //F1_E4
  21          unsigned char Two_Menu_F2_E1[5] = { 0, 0, 0, 1 }; //F2_E1
  22          unsigned char Two_Menu_F2_E2[5] = { 0, 0, 0, 1 }; //F2_E2
  23          unsigned char Two_Menu_F2_E3[5] = { 0, 0, 0, 1 }; //F2_E3
  24          unsigned char Two_Menu_F2_E4[5] = { 0, 0, 0, 1 }; //F2_E4
  25          
  26          unsigned char Two_Menu_F3_E1 = 1; //即时模式或者排队显示
  27          unsigned char Two_Menu_F3_E2 = 1; //呼叫时候存储数量
  28          
  29          unsigned char Two_Menu_F4_E1 = 0; //销号时间
  30          unsigned char Two_Menu_F5_E1 = 0; //循环间隔时间
  31          
  32          unsigned char Two_Menu_F6_E1 = 0; //简单报读
  33          unsigned char Two_Menu_F6_E2 = 1; //语音报读次数
  34          unsigned char Two_Menu_F6_E3 = 0; //循环时候是否报读
  35          unsigned char Two_Menu_F6_E4 = 6; //音量大小调整
  36          unsigned char Two_Menu_F6_E5 = 3; //显示屏LED亮度调整
  37          unsigned char Two_Menu_F6_E6 = 1; //语音导航调整
  38          unsigned char Two_Menu_F6_E7 = 0; //语音导航调整
  39          unsigned char Two_Menu_F6_E8 = 0; //闪烁与常亮
  40          
  41          unsigned char Two_Menu_F7_E1 = 11; // E1默认键盘规则 999*9
  42          unsigned char Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
  43          unsigned char Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
  44          unsigned char Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
  45          
  46          unsigned char Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
  47          
  48          unsigned char Two_Menu_F8_E2 = 0; // 键位设置
  49          
  50          unsigned char Two_Menu_Fb_E1 = 1; // 设置主机有没有销号功能
  51          unsigned char Two_Menu_FC_E1 = 1; // 设置万年历待机与----待机的切换
  52          unsigned char Two_Menu_Fd_E1 = 1; // E1 E2 E3 E4 E5 E6
  53          
  54          key_table code table[102] =
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 2   

  55          {       // 目标索引                 上                          下          确认                 退出         函数
  56                  { MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, (*fun0) }, //待机
  57          
  58                  { ONE_MENU_F0, ONE_MENU_F1, ONE_MENU_Fd, TWO_MENU_F0_MINUTE, MENU_STANDBY, (*fun1) }, //F0-F9
  59                  { ONE_MENU_F1, ONE_MENU_F2, ONE_MENU_F0, TWO_MENU_F1_E1   , MENU_STANDBY, (*fun2) },
  60                  { ONE_MENU_F2, ONE_MENU_F3, ONE_MENU_F1, TWO_MENU_F2_E1   , MENU_STANDBY, (*fun3) },
  61                  { ONE_MENU_F3, ONE_MENU_F4, ONE_MENU_F2, TWO_MENU_F3_E1   , MENU_STANDBY, (*fun4) },
  62                  { ONE_MENU_F4, ONE_MENU_F5, ONE_MENU_F3, TWO_MENU_F4_SET  , MENU_STANDBY, (*fun5) },
  63                  { ONE_MENU_F5, ONE_MENU_F6, ONE_MENU_F4, TWO_MENU_F5_SET  , MENU_STANDBY, (*fun6) },
  64                  { ONE_MENU_F6, ONE_MENU_F7, ONE_MENU_F5, TWO_MENU_F6_E1   , MENU_STANDBY, (*fun7) },
  65                  { ONE_MENU_F7, ONE_MENU_F8, ONE_MENU_F6, TWO_MENU_F7_E1   , MENU_STANDBY, (*fun8) },
  66                  { ONE_MENU_F8, ONE_MENU_F9, ONE_MENU_F7, TWO_MENU_F8_E1   , MENU_STANDBY, (*fun9) },
  67                  { ONE_MENU_F9, ONE_MENU_FA, ONE_MENU_F8, TWO_MENU_F9_E1   , MENU_STANDBY, (*fun10) },
  68                  { ONE_MENU_FA, ONE_MENU_Fb, ONE_MENU_F9, ONE_MENU_FA, MENU_STANDBY, (*fun11) }, //FA
  69                  { ONE_MENU_Fb, ONE_MENU_FC, ONE_MENU_FA, ONE_MENU_Fb, MENU_STANDBY, (*fun12) }, //Fb
  70                  { ONE_MENU_FC, ONE_MENU_Fd, ONE_MENU_Fb, ONE_MENU_FC, MENU_STANDBY, (*fun13) }, //FC
  71                  { ONE_MENU_Fd, ONE_MENU_F0, ONE_MENU_FC, ONE_MENU_Fd, MENU_STANDBY, (*fun14) }, //Fd
  72          
  73                  { TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_WEEK , ONE_MENU_F0, (*fun15) },
             - //万年历 年
  74                  { TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_YEAR   , ONE_MENU_F0, (*fun16) 
             -}, //万年历 月
  75                  { TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_MOUTH  , ONE_MENU_F0, (*fun17) 
             -}, //万年历 日
  76                  { TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_MINUTE  , ONE_MENU_F0, (*fun18)
             - }, //万年历 周
  77                  { TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_DAY, ONE_MENU_F0, (*fun19) }, /
             -/万年历 小时
  78                  { TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_HOUR  , ONE_MENU_F0, (*fun20) }
             -, //万年历 分钟
  79          
  80                  { TWO_MENU_F1_E1, TWO_MENU_F1_E2, TWO_MENU_F1_E4, TWO_MENU_F1_E1_D4, ONE_MENU_F1, (*fun21) }, //F1子菜单E
             -1
  81                  { TWO_MENU_F1_E2, TWO_MENU_F1_E3, TWO_MENU_F1_E1, TWO_MENU_F1_E2_D4, ONE_MENU_F1, (*fun22) }, //F1子菜单E
             -2
  82                  { TWO_MENU_F1_E3, TWO_MENU_F1_E4, TWO_MENU_F1_E2, TWO_MENU_F1_E3_D4, ONE_MENU_F1, (*fun23) }, //F1子菜单E
             -3
  83                  { TWO_MENU_F1_E4, TWO_MENU_F1_E1, TWO_MENU_F1_E3, TWO_MENU_F1_E4_D4, ONE_MENU_F1, (*fun24) }, //F1子菜单E
             -4
  84          
  85                  { TWO_MENU_F2_E1, TWO_MENU_F2_E2, TWO_MENU_F2_E4, TWO_MENU_F2_E1_D4, ONE_MENU_F2, (*fun25) }, //F2子菜单E
             -1
  86                  { TWO_MENU_F2_E2, TWO_MENU_F2_E3, TWO_MENU_F2_E1, TWO_MENU_F2_E2_D4, ONE_MENU_F2, (*fun26) }, //F2子菜单E
             -2
  87                  { TWO_MENU_F2_E3, TWO_MENU_F2_E4, TWO_MENU_F2_E2, TWO_MENU_F2_E3_D4, ONE_MENU_F2, (*fun27) }, //F2子菜单E
             -3
  88                  { TWO_MENU_F2_E4, TWO_MENU_F2_E1, TWO_MENU_F2_E3, TWO_MENU_F2_E4_D4, ONE_MENU_F2, (*fun28) }, //F2子菜单E
             -4
  89          
  90                  { TWO_MENU_F3_E1, TWO_MENU_F3_E2, TWO_MENU_F3_E2, TWO_MENU_F3_E1_SET, ONE_MENU_F3, (*fun29) }, //F3子菜单
             -E1
  91                  { TWO_MENU_F3_E2, TWO_MENU_F3_E1, TWO_MENU_F3_E1, TWO_MENU_F3_E2_SET, ONE_MENU_F3, (*fun30) }, //F3子菜单
             -E2
  92          
  93                  { TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, ONE_MENU_F4, (*fun31) }, //F4子菜单
  94                  { TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, ONE_MENU_F5, (*fun32) }, //F5子菜单
  95          
  96                  { TWO_MENU_F6_E1, TWO_MENU_F6_E2, TWO_MENU_F6_E8, TWO_MENU_F6_E1_SET, ONE_MENU_F6, (*fun33) }, //F6子菜单
             -E1
  97                  { TWO_MENU_F6_E2, TWO_MENU_F6_E3, TWO_MENU_F6_E1, TWO_MENU_F6_E2_SET, ONE_MENU_F6, (*fun34) }, //F6子菜单
             -E2
  98                  { TWO_MENU_F6_E3, TWO_MENU_F6_E4, TWO_MENU_F6_E2, TWO_MENU_F6_E3_SET, ONE_MENU_F6, (*fun35) }, //F6子菜单
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 3   

             -E3
  99                  { TWO_MENU_F6_E4, TWO_MENU_F6_E5, TWO_MENU_F6_E3, TWO_MENU_F6_E4_SET, ONE_MENU_F6, (*fun36) }, //F6子菜单
             -E4
 100                  { TWO_MENU_F6_E5, TWO_MENU_F6_E6, TWO_MENU_F6_E4, TWO_MENU_F6_E5_SET, ONE_MENU_F6, (*fun37) }, //F6子菜单
             -E5
 101          
 102                  { TWO_MENU_F7_E1, TWO_MENU_F7_E2, TWO_MENU_F7_E4, TWO_MENU_F7_E1_SET, ONE_MENU_F7, (*fun38) }, //F7子菜单
             -E1
 103                  { TWO_MENU_F7_E2, TWO_MENU_F7_E3, TWO_MENU_F7_E1, TWO_MENU_F7_E2_SET, ONE_MENU_F7, (*fun39) }, //F7子菜单
             -E2
 104                  { TWO_MENU_F7_E3, TWO_MENU_F7_E4, TWO_MENU_F7_E2, TWO_MENU_F7_E3_SET, ONE_MENU_F7, (*fun40) }, //F7子菜单
             -E3
 105                  { TWO_MENU_F7_E4, TWO_MENU_F7_E1, TWO_MENU_F7_E3, TWO_MENU_F7_E4_SET, ONE_MENU_F7, (*fun41) }, //F7子菜单
             -E4        
 106          
 107                  { TWO_MENU_F8_E1, TWO_MENU_F8_E2, TWO_MENU_F8_E2, TWO_MENU_F8_E1, ONE_MENU_F8, (*fun42) }, //F8子菜单E1
 108                  { TWO_MENU_F8_E2, TWO_MENU_F8_E1, TWO_MENU_F8_E1, TWO_MENU_F8_E2_SET, ONE_MENU_F8, (*fun43) }, //F8子菜单
             -E2
 109          
 110                  { TWO_MENU_F9_E1, TWO_MENU_F9_E2, TWO_MENU_F9_E2, 0, ONE_MENU_F9, (*fun44) }, //F9子菜单E1
 111                  { TWO_MENU_F9_E2, TWO_MENU_F9_E1, TWO_MENU_F9_E1, 0, ONE_MENU_F9, (*fun45) }, //F9子菜单E2
 112          
 113                  { TWO_MENU_FA_SET, TWO_MENU_FA_SET, TWO_MENU_FA_SET, 0, ONE_MENU_FA, (*fun46) }, //FA子菜单
 114                  { TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, 0, ONE_MENU_Fb, (*fun47) }, //Fb子菜单
 115                  { TWO_MENU_FC_SET, TWO_MENU_FC_SET, TWO_MENU_FC_SET, 0, ONE_MENU_FC, (*fun48) }, //FC子菜单
 116                  { TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, 0, ONE_MENU_Fd, (*fun49) }, //Fd子菜单
 117          
 118                  { TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1, (*fun50) },
             - //F1_E1注册呼叫器
 119                  { TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1, (*fun51) },
             - //F1_E1注册呼叫器
 120                  { TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1, (*fun52) },
             - //F1_E1注册呼叫器
 121                  { TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1, (*fun53) },
             - //F1_E1注册呼叫器
 122          
 123                  { TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2, (*fun54) },
             - //F1_E2注册管理器
 124                  { TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2, (*fun55) },
             - //F1_E2注册管理器
 125                  { TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2, (*fun56) },
             - //F1_E2注册管理器
 126                  { TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2, (*fun57) },
             - //F1_E2注册管理器
 127          
 128                  { TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3, (*fun58) },
             - //F1_E3注册报警器
 129                  { TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3, (*fun59) },
             - //F1_E3注册报警器
 130                  { TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3, (*fun60) },
             - //F1_E3注册报警器
 131                  { TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3, (*fun61) },
             - //F1_E3注册报警器
 132          
 133                  { TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4, (*fun62) },
             - //F1_E3注册取消器
 134                  { TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4, (*fun63) },
             - //F1_E3注册取消器
 135                  { TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4, (*fun64) },
             - //F1_E3注册取消器
 136                  { TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4, (*fun65) },
             - //F1_E3注册取消器
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 4   

 137          
 138                  { TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1, (*fun66) },
             - //F2_E1删除呼叫器
 139                  { TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1, (*fun67) },
             - //F2_E1删除呼叫器
 140                  { TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1, (*fun68) },
             - //F2_E1删除呼叫器
 141                  { TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1, (*fun69) },
             - //F2_E1删除呼叫器
 142          
 143                  { TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2, (*fun70) },
             - //F2_E2删除管理器
 144                  { TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2, (*fun71) },
             - //F2_E2删除管理器
 145                  { TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2, (*fun72) },
             - //F2_E2删除管理器
 146                  { TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2, (*fun73) },
             - //F2_E2删除管理器
 147          
 148                  { TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3, (*fun74) },
             - //F2_E3删除报警器
 149                  { TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3, (*fun75) },
             - //F2_E3删除报警器
 150                  { TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3, (*fun76) },
             - //F2_E3删除报警器
 151                  { TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3, (*fun77) },
             - //F2_E3删除报警器
 152          
 153                  { TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4, (*fun78) },
             - //F2_E4删除取消器
 154                  { TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4, (*fun79) },
             - //F2_E4删除取消器
 155                  { TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4, (*fun80) },
             - //F2_E4删除取消器
 156                  { TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4, (*fun81) },
             - //F2_E4删除取消器
 157          
 158                  { TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1, (*fun82
             -) }, //F3_E1设置排队显示或者循环显示
 159                  { TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2, (*fun83
             -) }, //F3_E2设置队列个数
 160          
 161                  { TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1, (*fun84
             -) }, //F6_E1语音选择
 162                  { TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2, (*fun85
             -) }, //F6_E2语音报读次数
 163                  { TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3, (*fun86
             -) }, //F6_E3循环时候是否报读
 164                  { TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4, (*fun87
             -) }, //F6_E4音量大小调整
 165                  { TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5, (*fun88
             -) }, //F6_E5屏幕亮度调整
 166          
 167                  { TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1, (*fun89
             -) }, //F7_E1 999*9
 168                  { TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2, (*fun90
             -) }, //F7_E2 9999*9
 169                  { TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3, (*fun91
             -) }, //F7_E3 999*99
 170                  { TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4, (*fun92
             -) }, //F7_E4 9999*99
 171          
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 5   

 172                  { TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1, (*fun93
             -) }, //F8_E1 单键位跟多键位切换
 173                  { TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2, (*fun94
             -) }, //F8_E2 键位设置
 174          
 175                  { DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, DECODER_MENU, (*fun95)},
 176          
 177                  { TWO_MENU_F6_E6, TWO_MENU_F6_E7, TWO_MENU_F6_E5, TWO_MENU_F6_E6_SET, ONE_MENU_F6, (*fun96) },
 178                  { TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6_SET, TWO_MENU_F6_E6, (*fun97
             -) },
 179                  { TWO_MENU_F6_E7, TWO_MENU_F6_E8, TWO_MENU_F6_E6, TWO_MENU_F6_E7_SET, ONE_MENU_F6, (*fun98) },
 180                  { TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7_SET, TWO_MENU_F6_E7, (*fun99
             -) },
 181                  { TWO_MENU_F6_E8, TWO_MENU_F6_E1, TWO_MENU_F6_E7, TWO_MENU_F6_E8_SET, ONE_MENU_F6, (*fun100) },
 182                  { TWO_MENU_F6_E8_SET, TWO_MENU_F6_E8_SET, TWO_MENU_F6_E8_SET, TWO_MENU_F6_E8_SET, TWO_MENU_F6_E8, (*fun10
             -1) },
 183          };
 184          
 185          unsigned int KeyScan(void)  //Keyboard scan function
 186          {
 187   1              unsigned int Val = 0;
 188   1              if (!(P33&&P36&&P37&&P25))//Press button
 189   1              {
 190   2                      delay10ms();  //Remove jitter
 191   2                      if (!(P33&&P36&&P37&&P25))   //Press button
 192   2                      {
 193   3                              clear_return_standby_time();
 194   3                              if (!P33)  Val = 0x0038;
 195   3                              if (!P36)  Val = 0x0034;
 196   3                              if (!P37)  Val = 0x002c;
 197   3                              if (!P25)  Val = 0x001c;
 198   3                                      if (Val == 0x0038)
 199   3                                      {
 200   4                                              clear_main_press_time();        //清除菜单键按下的时间计算变量
 201   4                                              set_main_press_time_table(1); //设置相应的标志位，开始计算时间
 202   4                                      }
 203   3                                      while (!(P33&&P36&&P37&&P25));
 204   3                                      delay10ms();
 205   3                                      while (!(P33&&P36&&P37&&P25));
 206   3                                      set_main_press_time_table(0);//按键释放，清除相应的标志位
 207   3                                      set_logout_cycle_table(0);//循环跟销号重新计数
 208   3                                      if (func_index != TWO_MENU_F8_E2_SET && ((return_Two_Menu_F6_E6()) ? func_index > ONE_MENU_Fd : 1))
 209   3                                      {
 210   4                                              GD5800_select_chapter_new(DI);
 211   4                                      }
 212   3                                      sound_table = 1;
 213   3                                      return Val;
 214   3                      }
 215   2              }
 216   1              
 217   1              return 0x0fff;
 218   1      }
 219          
 220          unsigned char KeyDecoder(void)
 221          {
 222   1              unsigned int key_val = 0;
 223   1              unsigned char register_manager_temp = 0;
 224   1              key_val = KeyScan();
 225   1              register_manager_temp = return_register_manager();
 226   1              if (key_val == 0x0fff) /*do not key press*/
 227   1              {
 228   2                      /*sjz 有注册管理器标志*/
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 6   

 229   2                      if (register_manager_temp == 1)
 230   2                      {
 231   3                              
 232   3                              if (func_index == MENU_STANDBY || func_index == ONE_MENU_FA || func_index == ONE_MENU_Fb || func_index 
             -== ONE_MENU_FC || func_index == ONE_MENU_Fd || func_index == TWO_MENU_F9_E2 || func_index == TWO_MENU_F9_E1)
 233   3                              {
 234   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)accumulate_decoder);
 235   4      //                              uart_printf("accumulate_decoder %d .\r\n", (unsigned int)old2_RF_RECE_REG[2] & 0x0f);
 236   4                                      if ((old2_RF_RECE_REG[2] & 0x0f) == 0x08)
 237   4                                      {
 238   5                                              accumulate_decoder++;
 239   5                                      }
 240   4                                      else
 241   4                                      {
 242   5                                              accumulate_decoder = 0;
 243   5                                      }
 244   4                                      if (accumulate_decoder>3)
 245   4                                      {
 246   5                                              set_main_press_time(20);
 247   5                                              accumulate_decoder = 0;
 248   5                                      }
 249   4                              }
 250   3                              clear_register_manager();
 251   3      
 252   3                              switch (old2_RF_RECE_REG[2] & 0x0f)
 253   3                              {
 254   4                              case 0x01:
 255   4                                      if (return_filter_other() == 0)
 256   4                                      {
 257   5                                              key_val = 0x001c;
 258   5                                              set_filter_other(5);
 259   5                                      }
 260   4                                       break;
 261   4                              case 0x02:
 262   4                                      if (return_filter_other() == 0)
 263   4                                      {
 264   5                                              key_val = 0x0034;
 265   5                                              set_filter_other(5);
 266   5                                      }
 267   4                                       break;
 268   4                              case 0x04:
 269   4                                      if (return_filter_other() == 0)
 270   4                                      {
 271   5                                              key_val = 0x002c;
 272   5                                              set_filter_other(5);
 273   5                                      }
 274   4                                       break;
 275   4                              case 0x08:
 276   4                                      if (return_filter_main() == 0 && return_filter_other() == 0)
 277   4                                      {
 278   5                                              key_val = 0x0038;
 279   5                                              set_filter_other(5);
 280   5                                      }
 281   4                                      break;
 282   4                              default:break;
 283   4                              }
 284   3                      }
 285   2              }
 286   1       
 287   1      
 288   1      #ifdef DEBUG
                      if (key_val != 0x0fff)
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 7   

                      uart_printf("key_val is %x .\r\n", key_val); //测试按键键值
              #endif
 292   1              switch (key_val)
 293   1              {
 294   2              case 0x001c:return KEY_RETURN; break;//1 按下相应的键显示相对应的码值
 295   2              case 0x0034:return KEY_DOWN; break;//2  
 296   2              case 0x002c:return KEY_UP; break;//4
 297   2              case 0x0038:return KEY_FUNC; break;//5 按下相应的键显示相对应的码值
 298   2              default:return 0xff; break;
 299   2              }
 300   1      }
 301          
 302          void KeyProcess(void)
 303          {
 304   1              unsigned char key_value = 0, main_press_time_temp = 0;
 305   1              key_value = KeyDecoder();
 306   1              switch (key_value)
 307   1              {
 308   2                      case KEY_FUNC:
 309   2                              if ((return_Two_Menu_Fb_E1() == 0 && func_index == MENU_STANDBY) || (return_Two_Menu_Fb_E1() == 1&&( fu
             -nc_index == MENU_STANDBY || func_index == DECODER_MENU) ) )  //如果索引==0  则要1秒以上进入菜单
 310   2                              {
 311   3                                      main_press_time_temp = return_main_press_time();
 312   3                                      if (main_press_time_temp >= 20)
 313   3                                      {
 314   4                                              func_index = ONE_MENU_F1;
 315   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 316   4                                              clear_main_press_time();
 317   4                                      }
 318   3                              }
 319   2                              else if (func_index == TWO_MENU_F2_E1_D1 || func_index == TWO_MENU_F2_E1_D2 || func_index == TWO_MENU_F
             -2_E1_D3 || func_index == TWO_MENU_F2_E1_D4 )
 320   2                              {
 321   3                                      main_press_time_temp = return_main_press_time();
 322   3                                      if (main_press_time_temp >= 10)
 323   3                                      {
 324   4                                              if (!delete_call_function(Two_Menu_F2_E1))
 325   4                                              {
 326   5                                                      if (return_sound_table() == 1)
 327   5                                                      {
 328   6                                                              GD5800_select_chapter(CHENGGONG);
 329   6      
 330   6                                                              set_sound_table(0);
 331   6                                                      }
 332   5                                              }
 333   4                                              delay10ms();
 334   4                                              clear_main_press_time();
 335   4                                      }
 336   3                                      else
 337   3                                              func_index = table[func_index].enter;
 338   3                              }
 339   2                              else if (func_index == TWO_MENU_F2_E2_D1 || func_index == TWO_MENU_F2_E2_D2 || func_index == TWO_MENU_F
             -2_E2_D3 || func_index == TWO_MENU_F2_E2_D4)
 340   2                              {
 341   3                                      main_press_time_temp = return_main_press_time();
 342   3                                      if ( main_press_time_temp >= 10)
 343   3                                      {
 344   4                                              if (!delete_host_function(Two_Menu_F2_E2))
 345   4                                              {
 346   5                                                      if (return_sound_table() == 1)
 347   5                                                      {
 348   6                                                              GD5800_select_chapter(CHENGGONG);
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 8   

 349   6      
 350   6                                                              set_sound_table(0);
 351   6                                                      }
 352   5                                              }
 353   4                                              delay10ms();
 354   4                                              clear_main_press_time();
 355   4                                      }
 356   3                                      else
 357   3                                              func_index = table[func_index].enter;
 358   3                              }
 359   2                              else if (func_index == TWO_MENU_F2_E3_D1 || func_index == TWO_MENU_F2_E3_D2 || func_index == TWO_MENU_F
             -2_E3_D3 || func_index == TWO_MENU_F2_E3_D4)
 360   2                              {
 361   3                                      main_press_time_temp = return_main_press_time();
 362   3                                      if (main_press_time_temp >= 10)
 363   3                                      {
 364   4                                              if (!delete_alarm_function(Two_Menu_F2_E3))
 365   4                                              {
 366   5                                                      if (return_sound_table() == 1)
 367   5                                                      {
 368   6                                                              GD5800_select_chapter(CHENGGONG);
 369   6      
 370   6                                                              set_sound_table(0);
 371   6                                                      }
 372   5                                              }
 373   4                                              delay10ms();
 374   4                                              clear_main_press_time();
 375   4                                      }
 376   3                                      else
 377   3                                              func_index = table[func_index].enter;
 378   3                              }
 379   2                              else if (func_index == TWO_MENU_F2_E4_D1 || func_index == TWO_MENU_F2_E4_D2 || func_index == TWO_MENU_F
             -2_E4_D3 || func_index == TWO_MENU_F2_E4_D4)
 380   2                              {
 381   3                                      main_press_time_temp = return_main_press_time();
 382   3                                      if (main_press_time_temp >= 10)
 383   3                                      {
 384   4                                              if (!delete_cancel_function(Two_Menu_F2_E4))
 385   4                                              {
 386   5                                                      if (return_sound_table() == 1)
 387   5                                                      {
 388   6                                                              GD5800_select_chapter(CHENGGONG);
 389   6      
 390   6                                                              set_sound_table(0);
 391   6                                                      }
 392   5                                              }
 393   4                                              delay10ms();
 394   4                                              clear_main_press_time();                        
 395   4                                      }
 396   3                                      else
 397   3                                              func_index = table[func_index].enter;
 398   3                              }
 399   2                              else if (func_index == ONE_MENU_FA)  //如果索引==FA  则要1秒以上进入菜单
 400   2                              {
 401   3                                      main_press_time_temp = return_main_press_time();
 402   3                                      if (main_press_time_temp >= 20)
 403   3                                      {
 404   4                                              func_index = TWO_MENU_FA_SET;
 405   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 406   4                                              clear_main_press_time();
 407   4                                      }
 408   3                              }
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 9   

 409   2                              else if (func_index == ONE_MENU_Fb)  //如果索引==FA  则要1秒以上进入菜单
 410   2                              {
 411   3                                      main_press_time_temp = return_main_press_time();
 412   3                                      if (main_press_time_temp >= 20)
 413   3                                      {
 414   4                                              func_index = TWO_MENU_Fb_SET;
 415   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 416   4                                              clear_main_press_time();
 417   4                                      }
 418   3                              }
 419   2                              else if (func_index == ONE_MENU_FC)  //如果索引==FA  则要1秒以上进入菜单
 420   2                              {
 421   3                                      main_press_time_temp = return_main_press_time();
 422   3                                      if (main_press_time_temp >= 20)
 423   3                                      {
 424   4                                              func_index = TWO_MENU_FC_SET;
 425   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 426   4                                              clear_main_press_time();
 427   4                                      }
 428   3                              }
 429   2                              else if (func_index == ONE_MENU_Fd)  //如果索引==FA  则要1秒以上进入菜单
 430   2                              {
 431   3                                      main_press_time_temp = return_main_press_time();
 432   3                                      if (main_press_time_temp >= 20)
 433   3                                      {
 434   4                                              func_index = TWO_MENU_Fd_SET;
 435   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 436   4                                              clear_main_press_time();
 437   4                                      }
 438   3                              }
 439   2                              else if (func_index == TWO_MENU_F8_E1)  //如果索引==FA  则要1秒以上进入菜单
 440   2                              {
 441   3                                      main_press_time_temp = return_main_press_time();
 442   3                                      if (main_press_time_temp >= 20)
 443   3                                      {
 444   4                                              func_index = TWO_MENU_F8_E1_SET;
 445   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 446   4                                              clear_main_press_time();
 447   4                                      }
 448   3                              }
 449   2                              else if (func_index == TWO_MENU_F9_E2)  //如果索引==FA  则要1秒以上进入菜单
 450   2                              {
 451   3                                      main_press_time_temp = return_main_press_time();
 452   3                                      if (main_press_time_temp >= 20)
 453   3                                      {
 454   4                                              GD5800_select_chapter(CHENGGONG);
 455   4                                              var_init();
 456   4                                              env_load();
 457   4                                              IAP_CONTR = 0X20;
 458   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 459   4                                              clear_main_press_time();
 460   4                                      }
 461   3                              }
 462   2                              else if (func_index == TWO_MENU_F9_E1)  //如果索引==FA  则要1秒以上进入菜单
 463   2                              {
 464   3                                      main_press_time_temp = return_main_press_time();
 465   3                                      if (main_press_time_temp >= 20)
 466   3                                      {
 467   4                                              GD5800_select_chapter(CHENGGONG);
 468   4                                              var_init();
 469   4                                              key_init();
 470   4                                              env_load();
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 10  

 471   4                                              ISendStr(I2C_ADDRESS, SIN_KEY, single_key, 16);
 472   4                                              delay10ms();
 473   4                                              ISendStr(I2C_ADDRESS, MUL_KEY, multiple_key, 16);
 474   4                                              delay10ms();
 475   4                                              Delete_all_data();
 476   4                                              delay10ms();
 477   4                                              IAP_CONTR = 0X20;
 478   4                                              set_filter_main(6);//进入菜单后 3S内 呼叫器的菜单键无效
 479   4                                              clear_main_press_time();
 480   4                                      }
 481   3                              }
 482   2                              else
 483   2                              {
 484   3                                      func_index = table[func_index].enter;
 485   3                                      clear_main_press_time();
 486   3                              }
 487   2                               break;
 488   2                      case KEY_RETURN:        
 489   2                              if (func_index == DECODER_MENU  && return_Two_Menu_Fb_E1() )
 490   2                              {
 491   3                                      Logout();
 492   3                              }
 493   2                              else
 494   2                              func_index = table[func_index].esc; 
 495   2                              break;
 496   2                      case KEY_UP:
 497   2                              switch (func_index)
 498   2                              {
 499   3                              case TWO_MENU_F0_YEAR: 
 500   3                                      if (time_buf1[1] == 99) time_buf1[1] = 0;       //设置万年历 年
 501   3                                                                         else time_buf1[1]++;
 502   3                                      break;
 503   3                              case TWO_MENU_F0_MOUTH:
 504   3                                      if (time_buf1[2] == 12) time_buf1[2] = 1;       //设置万年历 月
 505   3                                      else time_buf1[2]++;
 506   3                                      break;
 507   3                              case TWO_MENU_F0_DAY:
 508   3                                      if (time_buf1[3] == 31) time_buf1[3] = 1;       //设置万年历 日
 509   3                                      else time_buf1[3]++;
 510   3                                      break;
 511   3                              case TWO_MENU_F0_WEEK:
 512   3                                      if (time_buf1[7] == 7) time_buf1[7] = 1;        //设置万年历 星期
 513   3                                      else time_buf1[7]++;
 514   3                                      break;
 515   3                              case TWO_MENU_F0_HOUR:
 516   3                                      if (time_buf1[4] == 23) time_buf1[4] = 0;       //设置万年历 小时
 517   3                                      else time_buf1[4]++;
 518   3                                      break;
 519   3                              case TWO_MENU_F0_MINUTE:
 520   3                                      if (time_buf1[5] == 59) time_buf1[5] = 0;       //设置万年历 分钟
 521   3                                      else time_buf1[5]++;
 522   3                                      break;
 523   3                              case TWO_MENU_F1_E1_D1:
 524   3                                      if (Two_Menu_F1_E1[0] == 20 ) Two_Menu_F1_E1[0] = 0;    //设置F1_E1千位
 525   3                                      else Two_Menu_F1_E1[0]++;
 526   3                                      break;
 527   3                              case TWO_MENU_F1_E1_D2:
 528   3                                      if (Two_Menu_F1_E1[1] == 9) Two_Menu_F1_E1[1] = 0;      //设置F1_E1百位
 529   3                                      else Two_Menu_F1_E1[1]++;
 530   3                                      break;
 531   3                              case TWO_MENU_F1_E1_D3:
 532   3                                      if (Two_Menu_F1_E1[2] == 9) Two_Menu_F1_E1[2] = 0;      //设置F1_E1十位
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 11  

 533   3                                      else Two_Menu_F1_E1[2]++;
 534   3                                      break;
 535   3                              case TWO_MENU_F1_E1_D4:
 536   3                                      if (Two_Menu_F1_E1[3] == 9) Two_Menu_F1_E1[3] = 0;      //设置F1_E1个位
 537   3                                      else Two_Menu_F1_E1[3]++;
 538   3                                      break;
 539   3                              case TWO_MENU_F1_E2_D1:
 540   3                                      if (Two_Menu_F1_E2[0] == 20) Two_Menu_F1_E2[0] = 0;     //设置F1_E2千位
 541   3                                      else Two_Menu_F1_E2[0]++;
 542   3                                      break;
 543   3                              case TWO_MENU_F1_E2_D2:
 544   3                                      if (Two_Menu_F1_E2[1] == 9) Two_Menu_F1_E2[1] = 0;      //设置F1_E2百位
 545   3                                      else Two_Menu_F1_E2[1]++;
 546   3                                      break;
 547   3                              case TWO_MENU_F1_E2_D3:
 548   3                                      if (Two_Menu_F1_E2[2] == 9) Two_Menu_F1_E2[2] = 0;      //设置F1_E2十位
 549   3                                      else Two_Menu_F1_E2[2]++;
 550   3                                      break;
 551   3                              case TWO_MENU_F1_E2_D4:
 552   3                                      if (Two_Menu_F1_E2[3] == 9) Two_Menu_F1_E2[3] = 0;      //设置F1_E2个位
 553   3                                      else Two_Menu_F1_E2[3]++;
 554   3                                      break;
 555   3                              case TWO_MENU_F1_E3_D1:
 556   3                                      if (Two_Menu_F1_E3[0] == 20) Two_Menu_F1_E3[0] = 0;     //设置F1_E3千位
 557   3                                      else Two_Menu_F1_E3[0]++;
 558   3                                      break;
 559   3                              case TWO_MENU_F1_E3_D2:
 560   3                                      if (Two_Menu_F1_E3[1] == 9) Two_Menu_F1_E3[1] = 0;      //设置F1_E3百位
 561   3                                      else Two_Menu_F1_E3[1]++;
 562   3                                      break;
 563   3                              case TWO_MENU_F1_E3_D3:
 564   3                                      if (Two_Menu_F1_E3[2] == 9) Two_Menu_F1_E3[2] = 0;      //设置F1_E3十位
 565   3                                      else Two_Menu_F1_E3[2]++;
 566   3                                      break;
 567   3                              case TWO_MENU_F1_E3_D4:
 568   3                                      if (Two_Menu_F1_E3[3] == 9) Two_Menu_F1_E3[3] = 0;      //设置F1_E3个位
 569   3                                      else Two_Menu_F1_E3[3]++;
 570   3                                      break;
 571   3                              case TWO_MENU_F1_E4_D1:
 572   3                                      if (Two_Menu_F1_E4[0] == 20) Two_Menu_F1_E4[0] = 0;     //设置F1_E4千位
 573   3                                      else Two_Menu_F1_E4[0]++;
 574   3                                      break;
 575   3                              case TWO_MENU_F1_E4_D2:
 576   3                                      if (Two_Menu_F1_E4[1] == 9) Two_Menu_F1_E4[1] = 0;      //设置F1_E4百位
 577   3                                      else Two_Menu_F1_E4[1]++;
 578   3                                      break;
 579   3                              case TWO_MENU_F1_E4_D3:
 580   3                                      if (Two_Menu_F1_E4[2] == 9) Two_Menu_F1_E4[2] = 0;      //设置F1_E4十位
 581   3                                      else Two_Menu_F1_E4[2]++;
 582   3                                      break;
 583   3                              case TWO_MENU_F1_E4_D4:
 584   3                                      if (Two_Menu_F1_E4[3] == 9) Two_Menu_F1_E4[3] = 0;      //设置F1_E4个位
 585   3                                      else Two_Menu_F1_E4[3]++;
 586   3                                      break;
 587   3                              case TWO_MENU_F2_E1_D1:
 588   3                                      if (Two_Menu_F2_E1[0] == 20) Two_Menu_F2_E1[0] = 0;     //设置F2_E1千位
 589   3                                      else Two_Menu_F2_E1[0]++;
 590   3                                      break;
 591   3                              case TWO_MENU_F2_E1_D2:
 592   3                                      if (Two_Menu_F2_E1[1] == 9) Two_Menu_F2_E1[1] = 0;      //设置F2_E1百位
 593   3                                      else Two_Menu_F2_E1[1]++;
 594   3                                      break;
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 12  

 595   3                              case TWO_MENU_F2_E1_D3:
 596   3                                      if (Two_Menu_F2_E1[2] == 9) Two_Menu_F2_E1[2] = 0;      //设置F2_E1十位
 597   3                                      else Two_Menu_F2_E1[2]++;
 598   3                                      break;
 599   3                              case TWO_MENU_F2_E1_D4:
 600   3                                      if (Two_Menu_F2_E1[3] == 9) Two_Menu_F2_E1[3] = 0;      //设置F2_E1个位
 601   3                                      else Two_Menu_F2_E1[3]++;
 602   3                                      break;
 603   3                              case TWO_MENU_F2_E2_D1:
 604   3                                      if (Two_Menu_F2_E2[0] == 20) Two_Menu_F2_E2[0] = 0;     //设置F2_E2千位
 605   3                                      else Two_Menu_F2_E2[0]++;
 606   3                                      break;
 607   3                              case TWO_MENU_F2_E2_D2:
 608   3                                      if (Two_Menu_F2_E2[1] == 9) Two_Menu_F2_E2[1] = 0;      //设置F2_E2百位
 609   3                                      else Two_Menu_F2_E2[1]++;
 610   3                                      break;
 611   3                              case TWO_MENU_F2_E2_D3:
 612   3                                      if (Two_Menu_F2_E2[2] == 9) Two_Menu_F2_E2[2] = 0;      //设置F2_E2十位
 613   3                                      else Two_Menu_F2_E2[2]++;
 614   3                                      break;
 615   3                              case TWO_MENU_F2_E2_D4:
 616   3                                      if (Two_Menu_F2_E2[3] == 9) Two_Menu_F2_E2[3] = 0;      //设置F2_E2个位
 617   3                                      else Two_Menu_F2_E2[3]++;
 618   3                                      break;
 619   3                              case TWO_MENU_F2_E3_D1:
 620   3                                      if (Two_Menu_F2_E3[0] == 20) Two_Menu_F2_E3[0] = 0;     //设置F2_E3千位
 621   3                                      else Two_Menu_F2_E3[0]++;
 622   3                                      break;
 623   3                              case TWO_MENU_F2_E3_D2:
 624   3                                      if (Two_Menu_F2_E3[1] == 9) Two_Menu_F2_E3[1] = 0;      //设置F2_E3百位
 625   3                                      else Two_Menu_F2_E3[1]++;
 626   3                                      break;
 627   3                              case TWO_MENU_F2_E3_D3:
 628   3                                      if (Two_Menu_F2_E3[2] == 9) Two_Menu_F2_E3[2] = 0;      //设置F2_E3十位
 629   3                                      else Two_Menu_F2_E3[2]++;
 630   3                                      break;
 631   3                              case TWO_MENU_F2_E3_D4:
 632   3                                      if (Two_Menu_F2_E3[3] == 9) Two_Menu_F2_E3[3] = 0;      //设置F2_E3个位
 633   3                                      else Two_Menu_F2_E3[3]++;
 634   3                                      break;
 635   3                              case TWO_MENU_F2_E4_D1:
 636   3                                      if (Two_Menu_F2_E4[0] == 20) Two_Menu_F2_E4[0] = 0;     //设置F2_E4千位
 637   3                                      else Two_Menu_F2_E4[0]++;
 638   3                                      break;
 639   3                              case TWO_MENU_F2_E4_D2:
 640   3                                      if (Two_Menu_F2_E4[1] == 9) Two_Menu_F2_E4[1] = 0;      //设置F2_E4百位
 641   3                                      else Two_Menu_F2_E4[1]++;
 642   3                                      break;
 643   3                              case TWO_MENU_F2_E4_D3:
 644   3                                      if (Two_Menu_F2_E4[2] == 9) Two_Menu_F2_E4[2] = 0;      //设置F2_E4十位
 645   3                                      else Two_Menu_F2_E4[2]++;
 646   3                                      break;
 647   3                              case TWO_MENU_F2_E4_D4:
 648   3                                      if (Two_Menu_F2_E4[3] == 9) Two_Menu_F2_E4[3] = 0;      //设置F2_E4个位
 649   3                                      else Two_Menu_F2_E4[3]++;
 650   3                              case TWO_MENU_F3_E1_SET:
 651   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 652   3                                      else Two_Menu_F3_E1 = 1;
 653   3                                      break;
 654   3                              case TWO_MENU_F3_E2_SET:
 655   3                                      if (Two_Menu_F3_E2 == 99) Two_Menu_F3_E2 = 1;   //存储队列个数
 656   3                                      else Two_Menu_F3_E2 ++;
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 13  

 657   3                                      break;
 658   3                              case TWO_MENU_F4_SET:
 659   3                                      if (Two_Menu_F4_E1 == 99) Two_Menu_F4_E1 = 0;   //销号时间设置
 660   3                                      else Two_Menu_F4_E1++;
 661   3                                      break;
 662   3                              case TWO_MENU_F5_SET:
 663   3                                      if (Two_Menu_F5_E1 == 99) Two_Menu_F5_E1 = 0;   //循环时间设置
 664   3                                      else Two_Menu_F5_E1++;
 665   3                                      break;
 666   3                              case TWO_MENU_F6_E1_SET:
 667   3                                      if (Two_Menu_F6_E1 == 7) Two_Menu_F6_E1 = 0;    //F6_E1语音选择
 668   3                                      else Two_Menu_F6_E1++;
 669   3                                      break;
 670   3                              case TWO_MENU_F6_E2_SET:
 671   3                                      if (Two_Menu_F6_E2 == 2) Two_Menu_F6_E2 = 1;    //F6_E2语音报读次数
 672   3                                      else Two_Menu_F6_E2++;
 673   3                                      break;
 674   3                              case TWO_MENU_F6_E3_SET:
 675   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 676   3                                      else Two_Menu_F6_E3 = 0;
 677   3                                      break;
 678   3                              case TWO_MENU_F6_E4_SET:
 679   3                                      if (Two_Menu_F6_E4 == 9) Two_Menu_F6_E4 = 0;    //F6_E4音量大小调整
 680   3                                      else Two_Menu_F6_E4++;
 681   3                                      break;
 682   3                              case TWO_MENU_F6_E5_SET:
 683   3                                      if (Two_Menu_F6_E5 == 7) Two_Menu_F6_E5 = 0;    //F6_E5屏幕亮度调整
 684   3                                      else Two_Menu_F6_E5++;
 685   3                                      break;
 686   3                              case TWO_MENU_F7_E1_SET:
 687   3                                      if (Two_Menu_F7_E1 == 10) Two_Menu_F7_E1 = 0;   //F7_E1原始规则 999*9
 688   3                                      else Two_Menu_F7_E1++;
 689   3                                      break;
 690   3                              case TWO_MENU_F7_E2_SET:
 691   3                                      if (Two_Menu_F7_E2 == 11) Two_Menu_F7_E2 = 0;   //F7_E2附加规则 9999*9
 692   3                                      else Two_Menu_F7_E2++;
 693   3                                      break;
 694   3                              case TWO_MENU_F7_E3_SET:
 695   3                                      if (Two_Menu_F7_E3 == 11) Two_Menu_F7_E3 = 0;   //F7_E3附加规则 999*99
 696   3                                      else Two_Menu_F7_E3++;
 697   3                                      break;
 698   3                              case TWO_MENU_F7_E4_SET:
 699   3                                      if (Two_Menu_F7_E4 == 11) Two_Menu_F7_E4 = 0;   //F7_E3附加规则 9999*99
 700   3                                      else Two_Menu_F7_E4++;
 701   3                                      break;
 702   3                              case TWO_MENU_F8_E1_SET:
 703   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 704   3                                      else Two_Menu_F8_E1 = 1 ;
 705   3                                      break;
 706   3                              case TWO_MENU_F8_E2_SET:
 707   3                                      if (Two_Menu_F8_E2 == 38) Two_Menu_F8_E2 = 0;   //F8_E2键位设置
 708   3                                      else Two_Menu_F8_E2++;
 709   3                                      break;
 710   3                              case DECODER_MENU:
 711   3                                      CycleUp();
 712   3                                      break;
 713   3                              case TWO_MENU_FC_SET:
 714   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 715   3                                      else Two_Menu_FC_E1 = 1;
 716   3                                      break;
 717   3                              case TWO_MENU_Fb_SET:
 718   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 14  

 719   3                                      else Two_Menu_Fb_E1 = 1;
 720   3                                      break;
 721   3                              case TWO_MENU_F6_E6_SET:
 722   3                                      if (Two_Menu_F6_E6 == 1) Two_Menu_F6_E6 = 0;    
 723   3                                      else Two_Menu_F6_E6 = 1;
 724   3                                      break;
 725   3                              case TWO_MENU_F6_E7_SET:
 726   3                                      if (Two_Menu_F6_E7 == 1) Two_Menu_F6_E7 = 0;
 727   3                                      else Two_Menu_F6_E7 = 1;
 728   3                                      break;
 729   3                              case TWO_MENU_F6_E8_SET:
 730   3                                      if (Two_Menu_F6_E8 == 1) Two_Menu_F6_E8 = 0;
 731   3                                      else Two_Menu_F6_E8 = 1;
 732   3                                      break;
 733   3      
 734   3                                      default:break;
 735   3                              }       
 736   2                              func_index = table[func_index].up; break;
 737   2                      case KEY_DOWN:
 738   2                              switch (func_index)
 739   2                              {
 740   3                              case TWO_MENU_F0_YEAR:
 741   3                                      if (time_buf1[1] == 0) time_buf1[1] = 99;       //设置万年历 年
 742   3                                      else time_buf1[1]--;
 743   3                                      break;
 744   3                              case TWO_MENU_F0_MOUTH:
 745   3                                      if (time_buf1[2] == 1) time_buf1[2] = 12;       //设置万年历 月
 746   3                                      else time_buf1[2]--;
 747   3                                      break;
 748   3                              case TWO_MENU_F0_DAY:
 749   3                                      if (time_buf1[3] == 1) time_buf1[3] = 31;       //设置万年历 日
 750   3                                      else time_buf1[3]--;
 751   3                                      break;
 752   3                              case TWO_MENU_F0_WEEK:
 753   3                                      if (time_buf1[7] == 1) time_buf1[7] = 7;        //设置万年历 星期
 754   3                                      else time_buf1[7]--;
 755   3                                      break;
 756   3                              case TWO_MENU_F0_HOUR:
 757   3                                      if (time_buf1[4] == 0) time_buf1[4] = 23;       //设置万年历 小时
 758   3                                      else time_buf1[4]--;
 759   3                                      break;
 760   3                              case TWO_MENU_F0_MINUTE:
 761   3                                      if (time_buf1[5] == 0) time_buf1[5] = 59;       //设置万年历 分钟
 762   3                                      else time_buf1[5]--;
 763   3                                      break;
 764   3                              case TWO_MENU_F1_E1_D1:
 765   3                                      if (Two_Menu_F1_E1[0] == 0) Two_Menu_F1_E1[0] = 20;     //设置F1_E1千位
 766   3                                      else Two_Menu_F1_E1[0]--;
 767   3                                      break;
 768   3                              case TWO_MENU_F1_E1_D2:
 769   3                                      if (Two_Menu_F1_E1[1] == 0) Two_Menu_F1_E1[1] = 9;      //设置F1_E1百位
 770   3                                      else Two_Menu_F1_E1[1]--;
 771   3                                      break;
 772   3                              case TWO_MENU_F1_E1_D3:
 773   3                                      if (Two_Menu_F1_E1[2] == 0) Two_Menu_F1_E1[2] = 9;      //设置F1_E1十位
 774   3                                      else Two_Menu_F1_E1[2]--;
 775   3                                      break;
 776   3                              case TWO_MENU_F1_E1_D4:
 777   3                                      if (Two_Menu_F1_E1[3] == 0) Two_Menu_F1_E1[3] = 9;      //设置F1_E1个位
 778   3                                      else Two_Menu_F1_E1[3]--;
 779   3                                      break;
 780   3                              case TWO_MENU_F1_E2_D1:
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 15  

 781   3                                      if (Two_Menu_F1_E2[0] == 0) Two_Menu_F1_E2[0] = 20;     //设置F1_E2千位
 782   3                                      else Two_Menu_F1_E2[0]--;
 783   3                                      break;
 784   3                              case TWO_MENU_F1_E2_D2:
 785   3                                      if (Two_Menu_F1_E2[1] == 0) Two_Menu_F1_E2[1] = 9;      //设置F1_E2百位
 786   3                                      else Two_Menu_F1_E2[1]--;
 787   3                                      break;
 788   3                              case TWO_MENU_F1_E2_D3:
 789   3                                      if (Two_Menu_F1_E2[2] == 0) Two_Menu_F1_E2[2] = 9;      //设置F1_E2十位
 790   3                                      else Two_Menu_F1_E2[2]--;
 791   3                                      break;
 792   3                              case TWO_MENU_F1_E2_D4:
 793   3                                      if (Two_Menu_F1_E2[3] == 0) Two_Menu_F1_E2[3] = 9;      //设置F1_E2个位
 794   3                                      else Two_Menu_F1_E2[3]--;
 795   3                                      break;
 796   3                              case TWO_MENU_F1_E3_D1:
 797   3                                      if (Two_Menu_F1_E3[0] == 0) Two_Menu_F1_E3[0] = 20;     //设置F1_E3千位
 798   3                                      else Two_Menu_F1_E3[0]--;
 799   3                                      break;
 800   3                              case TWO_MENU_F1_E3_D2:
 801   3                                      if (Two_Menu_F1_E3[1] == 0) Two_Menu_F1_E3[1] = 9;      //设置F1_E3百位
 802   3                                      else Two_Menu_F1_E3[1]--;
 803   3                                      break;
 804   3                              case TWO_MENU_F1_E3_D3:
 805   3                                      if (Two_Menu_F1_E3[2] == 0) Two_Menu_F1_E3[2] = 9;      //设置F1_E3十位
 806   3                                      else Two_Menu_F1_E3[2]--;
 807   3                                      break;
 808   3                              case TWO_MENU_F1_E3_D4:
 809   3                                      if (Two_Menu_F1_E3[3] == 0) Two_Menu_F1_E3[3] = 9;      //设置F1_E3个位
 810   3                                      else Two_Menu_F1_E3[3]--;
 811   3                                      break;
 812   3                              case TWO_MENU_F1_E4_D1:
 813   3                                      if (Two_Menu_F1_E4[0] == 0) Two_Menu_F1_E4[0] = 20;     //设置F1_E4千位
 814   3                                      else Two_Menu_F1_E4[0]--;
 815   3                                      break;
 816   3                              case TWO_MENU_F1_E4_D2:
 817   3                                      if (Two_Menu_F1_E4[1] == 0) Two_Menu_F1_E4[1] = 9;      //设置F1_E4百位
 818   3                                      else Two_Menu_F1_E4[1]--;
 819   3                                      break;
 820   3                              case TWO_MENU_F1_E4_D3:
 821   3                                      if (Two_Menu_F1_E4[2] == 0) Two_Menu_F1_E4[2] = 9;      //设置F1_E4十位
 822   3                                      else Two_Menu_F1_E4[2]--;
 823   3                                      break;
 824   3                              case TWO_MENU_F1_E4_D4:
 825   3                                      if (Two_Menu_F1_E4[3] == 0) Two_Menu_F1_E4[3] = 9;      //设置F1_E4个位
 826   3                                      else Two_Menu_F1_E4[3]--;
 827   3                                      break;
 828   3                              case TWO_MENU_F2_E1_D1:
 829   3                                      if (Two_Menu_F2_E1[0] == 0) Two_Menu_F2_E1[0] = 20;     //设置F2_E1千位
 830   3                                      else Two_Menu_F2_E1[0]--;
 831   3                                      break;
 832   3                              case TWO_MENU_F2_E1_D2:
 833   3                                      if (Two_Menu_F2_E1[1] == 0) Two_Menu_F2_E1[1] = 9;      //设置F2_E1百位
 834   3                                      else Two_Menu_F2_E1[1]--;
 835   3                                      break;
 836   3                              case TWO_MENU_F2_E1_D3:
 837   3                                      if (Two_Menu_F2_E1[2] == 0) Two_Menu_F2_E1[2] = 9;      //设置F2_E1十位
 838   3                                      else Two_Menu_F2_E1[2]--;
 839   3                                      break;
 840   3                              case TWO_MENU_F2_E1_D4:
 841   3                                      if (Two_Menu_F2_E1[3] == 0) Two_Menu_F2_E1[3] = 9;      //设置F2_E1个位
 842   3                                      else Two_Menu_F2_E1[3]--;
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 16  

 843   3                                      break;
 844   3                              case TWO_MENU_F2_E2_D1:
 845   3                                      if (Two_Menu_F2_E2[0] == 0) Two_Menu_F2_E2[0] = 20;     //设置F2_E2千位
 846   3                                      else Two_Menu_F2_E2[0]--;
 847   3                                      break;
 848   3                              case TWO_MENU_F2_E2_D2:
 849   3                                      if (Two_Menu_F2_E2[1] == 0) Two_Menu_F2_E2[1] = 9;      //设置F2_E2百位
 850   3                                      else Two_Menu_F2_E2[1]--;
 851   3                                      break;
 852   3                              case TWO_MENU_F2_E2_D3:
 853   3                                      if (Two_Menu_F2_E2[2] == 0) Two_Menu_F2_E2[2] = 9;      //设置F2_E2十位
 854   3                                      else Two_Menu_F2_E2[2]--;
 855   3                                      break;
 856   3                              case TWO_MENU_F2_E2_D4:
 857   3                                      if (Two_Menu_F2_E2[3] == 0) Two_Menu_F2_E2[3] = 9;      //设置F2_E2个位
 858   3                                      else Two_Menu_F2_E2[3]--;
 859   3                                      break;
 860   3                              case TWO_MENU_F2_E3_D1:
 861   3                                      if (Two_Menu_F2_E3[0] == 0) Two_Menu_F2_E3[0] = 20;     //设置F2_E3千位
 862   3                                      else Two_Menu_F2_E3[0]--;
 863   3                                      break;
 864   3                              case TWO_MENU_F2_E3_D2:
 865   3                                      if (Two_Menu_F2_E3[1] == 0) Two_Menu_F2_E3[1] = 9;      //设置F2_E3百位
 866   3                                      else Two_Menu_F2_E3[1]--;
 867   3                                      break;
 868   3                              case TWO_MENU_F2_E3_D3:
 869   3                                      if (Two_Menu_F2_E3[2] == 0) Two_Menu_F2_E3[2] = 9;      //设置F2_E3十位
 870   3                                      else Two_Menu_F2_E3[2]--;
 871   3                                      break;
 872   3                              case TWO_MENU_F2_E3_D4:
 873   3                                      if (Two_Menu_F2_E3[3] == 0) Two_Menu_F2_E3[3] = 9;      //设置F2_E3个位
 874   3                                      else Two_Menu_F2_E3[3]--;
 875   3                                      break;
 876   3                              case TWO_MENU_F2_E4_D1:
 877   3                                      if (Two_Menu_F2_E4[0] == 0) Two_Menu_F2_E4[0] = 20;     //设置F2_E4千位
 878   3                                      else Two_Menu_F2_E4[0]--;
 879   3                                      break;
 880   3                              case TWO_MENU_F2_E4_D2:
 881   3                                      if (Two_Menu_F2_E4[1] == 0) Two_Menu_F2_E4[1] = 9;      //设置F2_E4百位
 882   3                                      else Two_Menu_F2_E4[1]--;
 883   3                                      break;
 884   3                              case TWO_MENU_F2_E4_D3:
 885   3                                      if (Two_Menu_F2_E4[2] == 0) Two_Menu_F2_E4[2] = 9;      //设置F2_E4十位
 886   3                                      else Two_Menu_F2_E4[2]--;
 887   3                                      break;
 888   3                              case TWO_MENU_F2_E4_D4:
 889   3                                      if (Two_Menu_F2_E4[3] == 0) Two_Menu_F2_E4[3] = 9;      //设置F2_E4个位
 890   3                                      else Two_Menu_F2_E4[3]--;
 891   3                                      break;
 892   3                              case TWO_MENU_F3_E1_SET:
 893   3                                      if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;    //排队显示 或者 循环显示
 894   3                                      else Two_Menu_F3_E1 = 1;
 895   3                                      break;
 896   3                              case TWO_MENU_F3_E2_SET:
 897   3                                      if (Two_Menu_F3_E2 == 1) Two_Menu_F3_E2 = 99;   //存储队列个数
 898   3                                      else Two_Menu_F3_E2--;
 899   3                                      break;
 900   3                              case TWO_MENU_F4_SET:
 901   3                                      if (Two_Menu_F4_E1 == 0) Two_Menu_F4_E1 = 99;   //销号时间设置
 902   3                                      else Two_Menu_F4_E1--;
 903   3                                      break;
 904   3                              case TWO_MENU_F5_SET:
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 17  

 905   3                                      if (Two_Menu_F5_E1 == 0) Two_Menu_F5_E1 = 99;   //销号时间设置
 906   3                                      else Two_Menu_F5_E1--;
 907   3                                      break;
 908   3                              case TWO_MENU_F6_E1_SET:
 909   3                                      if (Two_Menu_F6_E1 == 0) Two_Menu_F6_E1 = 7;    //F6_E1额语音选择
 910   3                                      else Two_Menu_F6_E1--;
 911   3                                      break;
 912   3                              case TWO_MENU_F6_E2_SET:
 913   3                                      if (Two_Menu_F6_E2 == 1) Two_Menu_F6_E2 = 2;    //F6_E2语音报读次数调整
 914   3                                      else Two_Menu_F6_E2--;
 915   3                                      break;
 916   3                              case TWO_MENU_F6_E3_SET:
 917   3                                      if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;    //F6_E3循环时候是否报读
 918   3                                      else Two_Menu_F6_E3 = 0;
 919   3                                      break;
 920   3                              case TWO_MENU_F6_E4_SET:
 921   3                                      if (Two_Menu_F6_E4 == 0) Two_Menu_F6_E4 = 9;    //F6_E4音量大小调整
 922   3                                      else Two_Menu_F6_E4--;
 923   3                                      break;
 924   3                              case TWO_MENU_F6_E5_SET:
 925   3                                      if (Two_Menu_F6_E5 == 0) Two_Menu_F6_E5 = 7;    //F6_E5屏幕亮度调整
 926   3                                      else Two_Menu_F6_E5--;
 927   3                                      break;
 928   3                              case TWO_MENU_F7_E1_SET:
 929   3                                      if (Two_Menu_F7_E1 == 0) Two_Menu_F7_E1 = 10;   //F7_E1原始规则 999*9
 930   3                                      else Two_Menu_F7_E1--;
 931   3                                      break;
 932   3                              case TWO_MENU_F7_E2_SET:
 933   3                                      if (Two_Menu_F7_E2 == 0) Two_Menu_F7_E2 = 11;   //F7_E2附加规则 9999*9
 934   3                                      else Two_Menu_F7_E2--;
 935   3                                      break;
 936   3                              case TWO_MENU_F7_E3_SET:
 937   3                                      if (Two_Menu_F7_E3 == 0) Two_Menu_F7_E3 = 11;   //F7_E3附加规则 999*99
 938   3                                      else Two_Menu_F7_E3--;
 939   3                                      break;
 940   3                              case TWO_MENU_F7_E4_SET:
 941   3                                      if (Two_Menu_F7_E4 == 0) Two_Menu_F7_E4 = 11;   //F7_E3附加规则 9999*99
 942   3                                      else Two_Menu_F7_E4--;
 943   3                                      break;
 944   3                              case TWO_MENU_F8_E1_SET:
 945   3                                      if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 2;    //F8_E1单键位跟多键位切换
 946   3                                      else Two_Menu_F8_E1 = 1;
 947   3                                      break;
 948   3                              case TWO_MENU_F8_E2_SET:
 949   3                                      if (Two_Menu_F8_E2 == 0) Two_Menu_F8_E2 = 38;   //F8_E2键位设置
 950   3                                      else Two_Menu_F8_E2--;
 951   3                                      break;
 952   3                              case DECODER_MENU:
 953   3                                      CycleDown();
 954   3                                      break;
 955   3                              case TWO_MENU_FC_SET:
 956   3                                      if (Two_Menu_FC_E1 == 1) Two_Menu_FC_E1 = 2;
 957   3                                      else Two_Menu_FC_E1 = 1;
 958   3                                      break;
 959   3                              case TWO_MENU_Fb_SET:
 960   3                                      if (Two_Menu_Fb_E1 == 1) Two_Menu_Fb_E1 = 0;
 961   3                                      else Two_Menu_Fb_E1 = 1;
 962   3                                      break;
 963   3                              case TWO_MENU_F6_E6_SET:
 964   3                                      if (Two_Menu_F6_E6 == 1) Two_Menu_F6_E6 = 0;
 965   3                                      else Two_Menu_F6_E6 = 1;
 966   3                                      break;
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 18  

 967   3                              case TWO_MENU_F6_E7_SET:
 968   3                                      if (Two_Menu_F6_E7 == 1) Two_Menu_F6_E7 = 0;
 969   3                                      else Two_Menu_F6_E7 = 1;
 970   3                                      break;
 971   3                              case TWO_MENU_F6_E8_SET:
 972   3                                      if (Two_Menu_F6_E8 == 1) Two_Menu_F6_E8 = 0;
 973   3                                      else Two_Menu_F6_E8 = 1;
 974   3                                      break;
 975   3      
 976   3                                      default:break;
 977   3                              }
 978   2                              func_index = table[func_index].down; break;
 979   2                      default:break;
 980   2              }
 981   1              env_load();
 982   1              current_operation_index = table[func_index].index_operation;
 983   1              (*current_operation_index)();//执行当前操作函数
 984   1      }
 985          
 986          void delay10ms(void)   //误差 -0.054253472222us
 987          {
 988   1              unsigned char a, b, c;
 989   1              for (c = 4; c>0; c--)
 990   1              for (b = 52; b>0; b--)
 991   1              for (a = 220; a>0; a--);
 992   1              _nop_();  //if Keil,require use intrins.h
 993   1      }
 994          
 995          unsigned char return_func_index(void)
 996          {
 997   1              unsigned char func_index_temp = 0;
 998   1              func_index_temp = func_index;
 999   1              return func_index_temp;
1000   1      }
1001          
1002          void set_func_index(unsigned char temp)
1003          {
1004   1              func_index = temp;
1005   1      }
1006          
1007          unsigned char return_Two_Menu_F3_E1(void)
1008          {
1009   1              unsigned char temp = 0;
1010   1              temp = Two_Menu_F3_E1;
1011   1              return temp;
1012   1      }
1013          
1014          unsigned char return_Two_Menu_F3_E2(void)
1015          {
1016   1              unsigned char temp = 0;
1017   1              temp = Two_Menu_F3_E2;
1018   1              return temp;
1019   1      }
1020          
1021          unsigned char return_Two_Menu_F4_E1(void)
1022          {
1023   1              unsigned char temp = 0;
1024   1              temp = Two_Menu_F4_E1;
1025   1              return temp;
1026   1      }
1027          
1028          unsigned char return_Two_Menu_F5_E1(void)
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 19  

1029          {
1030   1              unsigned char temp = 0;
1031   1              temp = Two_Menu_F5_E1;
1032   1              return temp;
1033   1      }
1034          
1035          unsigned char return_Two_Menu_F6_E1(void)
1036          {
1037   1              unsigned char temp = 0;
1038   1              temp = Two_Menu_F6_E1;
1039   1              return temp;
1040   1      }
1041          
1042          unsigned char return_Two_Menu_F6_E2(void)
1043          {
1044   1              unsigned char temp = 0;
1045   1              temp = Two_Menu_F6_E2;
1046   1              return temp;
1047   1      }
1048          
1049          unsigned char return_Two_Menu_F6_E3(void)
1050          {
1051   1              unsigned char temp = 0;
1052   1              temp = Two_Menu_F6_E3;
1053   1              return temp;
1054   1      }
1055          
1056          unsigned char return_Two_Menu_F6_E4(void)
1057          {
1058   1              unsigned char temp = 0;
1059   1              temp = Two_Menu_F6_E4;
1060   1              return temp;
1061   1      }
1062          
1063          unsigned char return_Two_Menu_F6_E5(void)
1064          {
1065   1              unsigned char temp = 0;
1066   1              temp = Two_Menu_F6_E5;
1067   1              return temp;
1068   1      }
1069          unsigned char return_Two_Menu_F6_E6(void)
1070          {
1071   1              unsigned char temp = 0;
1072   1              temp = Two_Menu_F6_E6;
1073   1              return temp;
1074   1      }
1075          
1076          unsigned char return_Two_Menu_F6_E7(void)
1077          {
1078   1              unsigned char temp = 0;
1079   1              temp = Two_Menu_F6_E7;
1080   1              return temp;
1081   1      }
1082          
1083          unsigned char return_Two_Menu_F6_E8(void)
1084          {
1085   1              unsigned char temp = 0;
1086   1              temp = Two_Menu_F6_E8;
1087   1              return temp;
1088   1      }
1089          
1090          unsigned char return_Two_Menu_F7_E1(void)
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 20  

1091          {
1092   1              unsigned char temp = 0;
1093   1              temp = Two_Menu_F7_E1;
1094   1              return temp;
1095   1      }
1096          
1097          unsigned char return_Two_Menu_F7_E2(void)
1098          {
1099   1              unsigned char temp = 0;
1100   1              temp = Two_Menu_F7_E2;
1101   1              return temp;
1102   1      }
1103          
1104          unsigned char return_Two_Menu_F7_E3(void)
1105          {
1106   1              unsigned char temp = 0;
1107   1              temp = Two_Menu_F7_E3;
1108   1              return temp;
1109   1      }
1110          
1111          unsigned char return_Two_Menu_F7_E4(void)
1112          {
1113   1              unsigned char temp = 0;
1114   1              temp = Two_Menu_F7_E4;
1115   1              return temp;
1116   1      }
1117          
1118          unsigned char return_Two_Menu_F8_E1(void)
1119          {
1120   1              unsigned char temp = 0;
1121   1              temp = Two_Menu_F8_E1;
1122   1              return temp;
1123   1      }
1124          
1125          unsigned char return_Two_Menu_F8_E2(void)
1126          {
1127   1              unsigned char temp = 0;
1128   1              temp = Two_Menu_F8_E2;
1129   1              return temp;
1130   1      }
1131          
1132          unsigned char return_sound_table(void)
1133          {
1134   1              unsigned char temp = 0;
1135   1              temp = sound_table;
1136   1              return temp;
1137   1      }
1138          
1139          void set_sound_table(unsigned char temp)
1140          {
1141   1              sound_table = temp;
1142   1      }
1143          
1144          unsigned char return_Two_Menu_FC_E1(void)
1145          {
1146   1              unsigned char temp = 0;
1147   1              temp = Two_Menu_FC_E1;
1148   1              return temp;
1149   1      }
1150          
1151          unsigned char return_Two_Menu_Fb_E1(void)
1152          {
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 21  

1153   1              unsigned char temp = 0;
1154   1              temp = Two_Menu_Fb_E1;
1155   1              return temp;
1156   1      }
1157          
1158          void env_load(void)
1159          {
1160   1              
1161   1              EEPROM.Two_Menu_F3_E1 = Two_Menu_F3_E1;
1162   1              EEPROM.Two_Menu_F3_E2 = Two_Menu_F3_E2;
1163   1              EEPROM.Two_Menu_F4_E1 = Two_Menu_F4_E1;
1164   1              EEPROM.Two_Menu_F5_E1 = Two_Menu_F5_E1;
1165   1              EEPROM.Two_Menu_F6_E1 = Two_Menu_F6_E1;
1166   1              EEPROM.Two_Menu_F6_E2 = Two_Menu_F6_E2;
1167   1              EEPROM.Two_Menu_F6_E3 = Two_Menu_F6_E3;
1168   1              EEPROM.Two_Menu_F6_E4 = Two_Menu_F6_E4;
1169   1              EEPROM.Two_Menu_F6_E5 = Two_Menu_F6_E5;
1170   1              EEPROM.Two_Menu_F6_E6 = Two_Menu_F6_E6;
1171   1              EEPROM.Two_Menu_F6_E7 = Two_Menu_F6_E7;
1172   1              EEPROM.Two_Menu_F6_E8 = Two_Menu_F6_E8;
1173   1              EEPROM.Two_Menu_F7_E1 = Two_Menu_F7_E1;
1174   1              EEPROM.Two_Menu_F8_E1 = Two_Menu_F8_E1;
1175   1              EEPROM.Two_Menu_Fb_E1 = Two_Menu_Fb_E1;
1176   1              EEPROM.Two_Menu_FC_E1 = Two_Menu_FC_E1;
1177   1      
1178   1              ISendStr(I2C_ADDRESS, BACK, (uint8_t *)&EEPROM, 15);
1179   1              delay10ms();
1180   1      }
1181          
1182          void env_init(void)
1183          {
1184   1              IRcvStr(I2C_ADDRESS, SIN_KEY, single_key, 16);
1185   1              delay10ms();
1186   1              IRcvStr(I2C_ADDRESS, MUL_KEY, multiple_key, 16);
1187   1              delay10ms();
1188   1              IRcvStr(I2C_ADDRESS, BACK, (uint8_t *)&EEPROM, 15);
1189   1              delay10ms();
1190   1      
1191   1              Two_Menu_F3_E1 =  EEPROM.Two_Menu_F3_E1 ;
1192   1              Two_Menu_F3_E2 =  EEPROM.Two_Menu_F3_E2 ;
1193   1              Two_Menu_F4_E1 =  EEPROM.Two_Menu_F4_E1 ;
1194   1              Two_Menu_F5_E1 =  EEPROM.Two_Menu_F5_E1 ;
1195   1              Two_Menu_F6_E1 =  EEPROM.Two_Menu_F6_E1 ;
1196   1              Two_Menu_F6_E2 =  EEPROM.Two_Menu_F6_E2 ;
1197   1              Two_Menu_F6_E3 =  EEPROM.Two_Menu_F6_E3 ;
1198   1              Two_Menu_F6_E4 =  EEPROM.Two_Menu_F6_E4 ;
1199   1              Two_Menu_F6_E5 =  EEPROM.Two_Menu_F6_E5 ;
1200   1              Two_Menu_F6_E6 =  EEPROM.Two_Menu_F6_E6 ;
1201   1              Two_Menu_F6_E7 =  EEPROM.Two_Menu_F6_E7 ;
1202   1              Two_Menu_F6_E8 =  EEPROM.Two_Menu_F6_E8 ;
1203   1              Two_Menu_F7_E1 =  EEPROM.Two_Menu_F7_E1 ;
1204   1              Two_Menu_F8_E1 =  EEPROM.Two_Menu_F8_E1 ;
1205   1              Two_Menu_Fb_E1 =  EEPROM.Two_Menu_Fb_E1 ;
1206   1              Two_Menu_FC_E1 =  EEPROM.Two_Menu_FC_E1 ;
1207   1      
1208   1              if (EEPROM.Two_Menu_F3_E1 > 2)
1209   1              {
1210   2                      Two_Menu_F3_E1 = 1;
1211   2              }
1212   1              if (EEPROM.Two_Menu_F3_E2 > 99)
1213   1              {
1214   2                      Two_Menu_F3_E2 = 1;
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 22  

1215   2              }
1216   1              if (EEPROM.Two_Menu_F4_E1 > 99)
1217   1              {
1218   2                      Two_Menu_F4_E1 = 1;
1219   2              }
1220   1              if (EEPROM.Two_Menu_F5_E1 > 99)
1221   1              {
1222   2                      Two_Menu_F5_E1 = 1;
1223   2              }
1224   1              if (EEPROM.Two_Menu_F6_E1 > 7)
1225   1              {
1226   2                      Two_Menu_F6_E1 = 0;
1227   2              }
1228   1              if (EEPROM.Two_Menu_F6_E2 > 2)
1229   1              {
1230   2                      Two_Menu_F6_E2 = 1;
1231   2              }
1232   1              if (EEPROM.Two_Menu_F6_E3 > 1)
1233   1              {
1234   2                      Two_Menu_F6_E3 = 0;
1235   2              }
1236   1              if (EEPROM.Two_Menu_F6_E4 > 9)
1237   1              {
1238   2                      Two_Menu_F6_E4 = 6;
1239   2              }
1240   1              if (EEPROM.Two_Menu_F6_E5 > 7)
1241   1              {
1242   2                      Two_Menu_F6_E5 = 3;
1243   2              }
1244   1              if (EEPROM.Two_Menu_F6_E6 > 1)
1245   1              {
1246   2                      Two_Menu_F6_E6 = 0;
1247   2              }
1248   1              if (EEPROM.Two_Menu_F6_E7 > 1)
1249   1              {
1250   2                      Two_Menu_F6_E7 = 0;
1251   2              }
1252   1              if (EEPROM.Two_Menu_F6_E8 > 1)
1253   1              {
1254   2                      Two_Menu_F6_E8 = 0;
1255   2              }
1256   1              if (EEPROM.Two_Menu_F7_E1 > 10)
1257   1              {
1258   2                      Two_Menu_F7_E1 = 10;
1259   2              }
1260   1              if (EEPROM.Two_Menu_F8_E1 > 2)
1261   1              {
1262   2                      Two_Menu_F8_E1 = 2;
1263   2              }
1264   1              if (EEPROM.Two_Menu_Fb_E1 > 1)
1265   1              {
1266   2                      Two_Menu_Fb_E1 = 1;
1267   2              }
1268   1              if (EEPROM.Two_Menu_FC_E1 > 2)
1269   1              {
1270   2                      Two_Menu_FC_E1 = 1;
1271   2              }
1272   1      }
1273          
1274          void var_init(void)
1275          {
1276   1              Two_Menu_F3_E1 = 1; //即时模式或者排队显示
C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 23  

1277   1              Two_Menu_F3_E2 = 1; //呼叫时候存储数量
1278   1      
1279   1              Two_Menu_F4_E1 = 0; //销号时间
1280   1              Two_Menu_F5_E1 = 0; //循环间隔时间
1281   1      
1282   1              Two_Menu_F6_E1 = 0; //简单报读
1283   1              Two_Menu_F6_E2 = 1; //语音报读次数
1284   1              Two_Menu_F6_E3 = 0; //循环时候是否报读
1285   1              Two_Menu_F6_E4 = 6; //音量大小调整
1286   1              Two_Menu_F6_E5 = 3; //显示屏LED亮度调整
1287   1              Two_Menu_F6_E6 = 1; //语音导航调整
1288   1              Two_Menu_F6_E7 = 0; //语音导航调整
1289   1              Two_Menu_F6_E8 = 0; //语音导航调整
1290   1      
1291   1              Two_Menu_F7_E1 = 10; // E1默认键盘规则 999*9
1292   1              Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
1293   1              Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
1294   1              Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
1295   1      
1296   1              Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
1297   1      
1298   1              Two_Menu_F8_E2 = 0; // 键位设置
1299   1      
1300   1      
1301   1      }
1302          
1303          void key_init(void)
1304          {
1305   1              unsigned char i;
1306   1              for (i = 0; i < 16; i++)
1307   1              {
1308   2                      single_key[i] = 0x01;
1309   2              }
1310   1      
1311   1              multiple_key[0] = 0X01;
1312   1              multiple_key[1] = QUXIAO - QUXIAO;
1313   1              multiple_key[2] = JIEZHANG - QUXIAO;
1314   1              multiple_key[3] = DIANDANG - QUXIAO;
1315   1              multiple_key[4] = JIUSHUI - QUXIAO;
1316   1              multiple_key[5] = 0X01;
1317   1              multiple_key[6] = 0x01;
1318   1              multiple_key[7] = JIASHUI - QUXIAO;
1319   1              multiple_key[8] = HUJIAO - QUXIAO;
1320   1              multiple_key[9] =  0x01;
1321   1              multiple_key[10] = 0x01;
1322   1              multiple_key[11] = 0x01;
1323   1              multiple_key[12] = 0x01;
1324   1              multiple_key[13] = 0x01;
1325   1              multiple_key[14] = 0x01;
1326   1              multiple_key[15] = 0x01;
1327   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4550    ----
   CONSTANT SIZE    =    816    ----
   XDATA SIZE       =     67       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.00   KEY                                                                   11/14/2015 15:32:21 PAGE 24  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
