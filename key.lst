C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\key.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\k
                    -ey.lst) TABS(2) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "usart.h"
   3          #include "tm1629.h"
   4          #include "menu.h"
   5          #include "timer.h"
   6          #include "ds1302.h"
   7          #include "at24c256.h"
   8          
   9          unsigned char func_index = 0; //多级菜单索引变量
  10          void(*current_operation_index)();// 多级菜单函数指针
  11          
  12          unsigned char Two_Menu_F1_E1[4] = { 0, 0, 0, 1 }; //F1_E1
  13          unsigned char Two_Menu_F1_E2[4] = { 0, 0, 0, 1 }; //F1_E2
  14          unsigned char Two_Menu_F1_E3[4] = { 0, 0, 0, 1 }; //F1_E3
  15          unsigned char Two_Menu_F1_E4[4] = { 0, 0, 0, 1 }; //F1_E4
  16          unsigned char Two_Menu_F2_E1[4] = { 0, 0, 0, 1 }; //F2_E1
  17          unsigned char Two_Menu_F2_E2[4] = { 0, 0, 0, 1 }; //F2_E2
  18          unsigned char Two_Menu_F2_E3[4] = { 0, 0, 0, 1 }; //F2_E3
  19          unsigned char Two_Menu_F2_E4[4] = { 0, 0, 0, 1 }; //F2_E4
  20          
  21          unsigned char Two_Menu_F3_E1 = 1; //即时模式或者排队显示
  22          unsigned char Two_Menu_F3_E2 = 1; //呼叫时候存储数量
  23          
  24          unsigned char Two_Menu_F4_E1 = 0; //销号时间
  25          unsigned char Two_Menu_F5_E1 = 0; //循环间隔时间
  26          
  27          unsigned char Two_Menu_F6_E1 = 0; //简单报读
  28          unsigned char Two_Menu_F6_E2 = 1; //语音报读次数
  29          unsigned char Two_Menu_F6_E3 = 0; //循环时候是否报读
  30          unsigned char Two_Menu_F6_E4 = 0; //音量大小调整
  31          unsigned char Two_Menu_F6_E5 = 0; //显示屏LED亮度调整
  32          
  33          unsigned char Two_Menu_F7_E1 = 0; // E1默认键盘规则 999*9
  34          unsigned char Two_Menu_F7_E2 = 0; // E2其他键盘规则 9999*9
  35          unsigned char Two_Menu_F7_E3 = 0; // E3其他键盘规则 999*99
  36          unsigned char Two_Menu_F7_E4 = 0; // E4其他键盘规则 9999*99
  37          
  38          unsigned char Two_Menu_F8_E1 = 2; // 单按键与 多按键切换
  39          unsigned char Two_Menu_F8_E2 = 0; // 键位设置
  40          
  41          unsigned char Two_Menu_Fb_E1 = 0; // 设置主机有没有销号功能
  42          unsigned char Two_Menu_FC_E1 = 0; // 设置万年历待机与----待机的切换
  43          unsigned char Two_Menu_Fd_E1 = 0; // E1 E2 E3 E4 E5 E6
  44          
  45          key_table code table[100] =
  46          { // 目标索引       上        下          确认     退出         函数
  47            { MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, MENU_STANDBY, (*fun0) }, //待机
  48          
  49            { ONE_MENU_F0, ONE_MENU_F1, ONE_MENU_Fd, TWO_MENU_F0_YEAR , MENU_STANDBY, (*fun1) }, //F0-F9
  50            { ONE_MENU_F1, ONE_MENU_F2, ONE_MENU_F0, TWO_MENU_F1_E1   , MENU_STANDBY, (*fun2) },
  51            { ONE_MENU_F2, ONE_MENU_F3, ONE_MENU_F1, TWO_MENU_F2_E1   , MENU_STANDBY, (*fun3) },
  52            { ONE_MENU_F3, ONE_MENU_F4, ONE_MENU_F2, TWO_MENU_F3_E1   , MENU_STANDBY, (*fun4) },
  53            { ONE_MENU_F4, ONE_MENU_F5, ONE_MENU_F3, TWO_MENU_F4_SET  , MENU_STANDBY, (*fun5) },
  54            { ONE_MENU_F5, ONE_MENU_F6, ONE_MENU_F4, TWO_MENU_F5_SET  , MENU_STANDBY, (*fun6) },
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 2   

  55            { ONE_MENU_F6, ONE_MENU_F7, ONE_MENU_F5, TWO_MENU_F6_E1   , MENU_STANDBY, (*fun7) },
  56            { ONE_MENU_F7, ONE_MENU_F8, ONE_MENU_F6, TWO_MENU_F7_E1   , MENU_STANDBY, (*fun8) },
  57            { ONE_MENU_F8, ONE_MENU_F9, ONE_MENU_F7, TWO_MENU_F8_E1   , MENU_STANDBY, (*fun9) },
  58            { ONE_MENU_F9, ONE_MENU_FA, ONE_MENU_F8, TWO_MENU_F9_E1   , MENU_STANDBY, (*fun10) },
  59            { ONE_MENU_FA, ONE_MENU_Fb, ONE_MENU_F9, TWO_MENU_FA_SET  , MENU_STANDBY, (*fun11) }, //FA
  60            { ONE_MENU_Fb, ONE_MENU_FC, ONE_MENU_FA, TWO_MENU_Fb_SET  , MENU_STANDBY, (*fun12) }, //Fb
  61            { ONE_MENU_FC, ONE_MENU_Fd, ONE_MENU_Fb, TWO_MENU_FC_SET  , MENU_STANDBY, (*fun13) }, //FC
  62            { ONE_MENU_Fd, ONE_MENU_F0, ONE_MENU_FC, TWO_MENU_Fd_SET  , MENU_STANDBY, (*fun14) }, //Fd
  63          
  64            { TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_YEAR  , TWO_MENU_F0_MOUTH , ONE_MENU_F0, (*fun15) }
             -, //万年历 年
  65            { TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_MOUTH , TWO_MENU_F0_DAY   , ONE_MENU_F0, (*fun16) }
             -, //万年历 月
  66            { TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_DAY   , TWO_MENU_F0_WEEK  , ONE_MENU_F0, (*fun17) }
             -, //万年历 日
  67            { TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_WEEK  , TWO_MENU_F0_HOUR  , ONE_MENU_F0, (*fun18) }
             -, //万年历 周
  68            { TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_HOUR  , TWO_MENU_F0_MINUTE, ONE_MENU_F0, (*fun19) }
             -, //万年历 小时
  69            { TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_MINUTE, TWO_MENU_F0_YEAR  , ONE_MENU_F0, (*fun20) }
             -, //万年历 分钟
  70          
  71            { TWO_MENU_F1_E1, TWO_MENU_F1_E2, TWO_MENU_F1_E4, TWO_MENU_F1_E1_D4, ONE_MENU_F1, (*fun21) }, //F1子菜单E
             -1
  72            { TWO_MENU_F1_E2, TWO_MENU_F1_E3, TWO_MENU_F1_E1, TWO_MENU_F1_E2_D4, ONE_MENU_F1, (*fun22) }, //F1子菜单E
             -2
  73            { TWO_MENU_F1_E3, TWO_MENU_F1_E4, TWO_MENU_F1_E2, TWO_MENU_F1_E3_D4, ONE_MENU_F1, (*fun23) }, //F1子菜单E
             -3
  74            { TWO_MENU_F1_E4, TWO_MENU_F1_E1, TWO_MENU_F1_E3, TWO_MENU_F1_E4_D4, ONE_MENU_F1, (*fun24) }, //F1子菜单E
             -4
  75          
  76            { TWO_MENU_F2_E1, TWO_MENU_F2_E2, TWO_MENU_F2_E4, TWO_MENU_F2_E1_D4, ONE_MENU_F2, (*fun25) }, //F2子菜单E
             -1
  77            { TWO_MENU_F2_E2, TWO_MENU_F2_E3, TWO_MENU_F2_E1, TWO_MENU_F2_E2_D4, ONE_MENU_F2, (*fun26) }, //F2子菜单E
             -2
  78            { TWO_MENU_F2_E3, TWO_MENU_F2_E4, TWO_MENU_F2_E2, TWO_MENU_F2_E3_D4, ONE_MENU_F2, (*fun27) }, //F2子菜单E
             -3
  79            { TWO_MENU_F2_E4, TWO_MENU_F2_E1, TWO_MENU_F2_E3, TWO_MENU_F2_E4_D4, ONE_MENU_F2, (*fun28) }, //F2子菜单E
             -4
  80          
  81            { TWO_MENU_F3_E1, TWO_MENU_F3_E2, TWO_MENU_F3_E2, TWO_MENU_F3_E1_SET, ONE_MENU_F3, (*fun29) }, //F3子菜单
             -E1
  82            { TWO_MENU_F3_E2, TWO_MENU_F3_E1, TWO_MENU_F3_E1, TWO_MENU_F3_E2_SET, ONE_MENU_F3, (*fun30) }, //F3子菜单
             -E2
  83          
  84            { TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, TWO_MENU_F4_SET, ONE_MENU_F4, (*fun31) }, //F4子菜单
  85            { TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, TWO_MENU_F5_SET, ONE_MENU_F5, (*fun32) }, //F5子菜单
  86          
  87            { TWO_MENU_F6_E1, TWO_MENU_F6_E2, TWO_MENU_F6_E5, TWO_MENU_F6_E1_SET, ONE_MENU_F6, (*fun33) }, //F6子菜单
             -E1
  88            { TWO_MENU_F6_E2, TWO_MENU_F6_E3, TWO_MENU_F6_E1, TWO_MENU_F6_E2_SET, ONE_MENU_F6, (*fun34) }, //F6子菜单
             -E2
  89            { TWO_MENU_F6_E3, TWO_MENU_F6_E4, TWO_MENU_F6_E2, TWO_MENU_F6_E3_SET, ONE_MENU_F6, (*fun35) }, //F6子菜单
             -E3
  90            { TWO_MENU_F6_E4, TWO_MENU_F6_E5, TWO_MENU_F6_E3, TWO_MENU_F6_E4_SET, ONE_MENU_F6, (*fun36) }, //F6子菜单
             -E4
  91            { TWO_MENU_F6_E5, TWO_MENU_F6_E1, TWO_MENU_F6_E4, TWO_MENU_F6_E5_SET, ONE_MENU_F6, (*fun37) }, //F6子菜单
             -E5
  92          
  93            { TWO_MENU_F7_E1, TWO_MENU_F7_E2, TWO_MENU_F7_E4, TWO_MENU_F7_E1_SET, ONE_MENU_F7, (*fun38) }, //F7子菜单
             -E1
  94            { TWO_MENU_F7_E2, TWO_MENU_F7_E3, TWO_MENU_F7_E1, TWO_MENU_F7_E2_SET, ONE_MENU_F7, (*fun39) }, //F7子菜单
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 3   

             -E2
  95            { TWO_MENU_F7_E3, TWO_MENU_F7_E4, TWO_MENU_F7_E2, TWO_MENU_F7_E3_SET, ONE_MENU_F7, (*fun40) }, //F7子菜单
             -E3
  96            { TWO_MENU_F7_E4, TWO_MENU_F7_E1, TWO_MENU_F7_E3, TWO_MENU_F7_E4_SET, ONE_MENU_F7, (*fun41) }, //F7子菜单
             -E4  
  97          
  98            { TWO_MENU_F8_E1, TWO_MENU_F8_E2, TWO_MENU_F8_E2, TWO_MENU_F8_E1_SET, ONE_MENU_F8, (*fun42) }, //F8子菜单
             -E1
  99            { TWO_MENU_F8_E2, TWO_MENU_F8_E1, TWO_MENU_F8_E1, TWO_MENU_F8_E2_SET, ONE_MENU_F8, (*fun43) }, //F8子菜单
             -E2
 100          
 101            { TWO_MENU_F9_E1, TWO_MENU_F9_E2, TWO_MENU_F9_E2, 0, ONE_MENU_F9, (*fun44) }, //F9子菜单E1
 102            { TWO_MENU_F9_E2, TWO_MENU_F9_E1, TWO_MENU_F9_E1, 0, ONE_MENU_F9, (*fun45) }, //F9子菜单E2
 103          
 104            { TWO_MENU_FA_SET, TWO_MENU_FA_SET, TWO_MENU_FA_SET, 0, ONE_MENU_FA, (*fun46) }, //FA子菜单
 105            { TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, TWO_MENU_Fb_SET, 0, ONE_MENU_Fb, (*fun47) }, //Fb子菜单
 106            { TWO_MENU_FC_SET, TWO_MENU_FC_SET, TWO_MENU_FC_SET, 0, ONE_MENU_FC, (*fun48) }, //FC子菜单
 107            { TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, TWO_MENU_Fd_SET, 0, ONE_MENU_Fd, (*fun49) }, //Fd子菜单
 108          
 109            { TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1, (*fun50) },
             - //F1_E1注册呼叫器
 110            { TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1_D1, TWO_MENU_F1_E1, (*fun51) },
             - //F1_E1注册呼叫器
 111            { TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1_D2, TWO_MENU_F1_E1, (*fun52) },
             - //F1_E1注册呼叫器
 112            { TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D4, TWO_MENU_F1_E1_D3, TWO_MENU_F1_E1, (*fun53) },
             - //F1_E1注册呼叫器
 113          
 114            { TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2, (*fun54) },
             - //F1_E2注册管理器
 115            { TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2_D1, TWO_MENU_F1_E2, (*fun55) },
             - //F1_E2注册管理器
 116            { TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2_D2, TWO_MENU_F1_E2, (*fun56) },
             - //F1_E2注册管理器
 117            { TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D4, TWO_MENU_F1_E2_D3, TWO_MENU_F1_E2, (*fun57) },
             - //F1_E2注册管理器
 118          
 119            { TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3, (*fun58) },
             - //F1_E3注册报警器
 120            { TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3_D1, TWO_MENU_F1_E3, (*fun59) },
             - //F1_E3注册报警器
 121            { TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3_D2, TWO_MENU_F1_E3, (*fun60) },
             - //F1_E3注册报警器
 122            { TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D4, TWO_MENU_F1_E3_D3, TWO_MENU_F1_E3, (*fun61) },
             - //F1_E3注册报警器
 123          
 124            { TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4, (*fun62) },
             - //F1_E3注册取消器
 125            { TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4_D1, TWO_MENU_F1_E4, (*fun63) },
             - //F1_E3注册取消器
 126            { TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4_D2, TWO_MENU_F1_E4, (*fun64) },
             - //F1_E3注册取消器
 127            { TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D4, TWO_MENU_F1_E4_D3, TWO_MENU_F1_E4, (*fun65) },
             - //F1_E3注册取消器
 128          
 129            { TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1, (*fun66) },
             - //F2_E1删除呼叫器
 130            { TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1_D1, TWO_MENU_F2_E1, (*fun67) },
             - //F2_E1删除呼叫器
 131            { TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1_D2, TWO_MENU_F2_E1, (*fun68) },
             - //F2_E1删除呼叫器
 132            { TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D4, TWO_MENU_F2_E1_D3, TWO_MENU_F2_E1, (*fun69) },
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 4   

             - //F2_E1删除呼叫器
 133          
 134            { TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2, (*fun70) },
             - //F2_E2删除管理器
 135            { TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2_D1, TWO_MENU_F2_E2, (*fun71) },
             - //F2_E2删除管理器
 136            { TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2_D2, TWO_MENU_F2_E2, (*fun72) },
             - //F2_E2删除管理器
 137            { TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D4, TWO_MENU_F2_E2_D3, TWO_MENU_F2_E2, (*fun73) },
             - //F2_E2删除管理器
 138          
 139            { TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3, (*fun74) },
             - //F2_E3删除报警器
 140            { TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3_D1, TWO_MENU_F2_E3, (*fun75) },
             - //F2_E3删除报警器
 141            { TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3_D2, TWO_MENU_F2_E3, (*fun76) },
             - //F2_E3删除报警器
 142            { TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D4, TWO_MENU_F2_E3_D3, TWO_MENU_F2_E3, (*fun77) },
             - //F2_E3删除报警器
 143          
 144            { TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4, (*fun78) },
             - //F2_E4删除取消器
 145            { TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4_D1, TWO_MENU_F2_E4, (*fun79) },
             - //F2_E4删除取消器
 146            { TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4_D2, TWO_MENU_F2_E4, (*fun80) },
             - //F2_E4删除取消器
 147            { TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D4, TWO_MENU_F2_E4_D3, TWO_MENU_F2_E4, (*fun81) },
             - //F2_E4删除取消器
 148          
 149            { TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1_SET, TWO_MENU_F3_E1, (*fun82
             -) }, //F3_E1设置排队显示或者循环显示
 150            { TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2_SET, TWO_MENU_F3_E2, (*fun83
             -) }, //F3_E2设置队列个数
 151          
 152            { TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1_SET, TWO_MENU_F6_E1, (*fun84
             -) }, //F6_E1语音选择
 153            { TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2_SET, TWO_MENU_F6_E2, (*fun85
             -) }, //F6_E2语音报读次数
 154            { TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3_SET, TWO_MENU_F6_E3, (*fun86
             -) }, //F6_E3循环时候是否报读
 155            { TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4_SET, TWO_MENU_F6_E4, (*fun87
             -) }, //F6_E4音量大小调整
 156            { TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5_SET, TWO_MENU_F6_E5, (*fun88
             -) }, //F6_E5屏幕亮度调整
 157          
 158            { TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1_SET, TWO_MENU_F7_E1, (*fun89
             -) }, //F7_E1 999*9
 159            { TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2_SET, TWO_MENU_F7_E2, (*fun90
             -) }, //F7_E2 9999*9
 160            { TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3_SET, TWO_MENU_F7_E3, (*fun91
             -) }, //F7_E3 999*99
 161            { TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4_SET, TWO_MENU_F7_E4, (*fun92
             -) }, //F7_E4 9999*99
 162          
 163            { TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1_SET, TWO_MENU_F8_E1, (*fun93
             -) }, //F8_E1 单键位跟多键位切换
 164            { TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2_SET, TWO_MENU_F8_E2, (*fun94
             -) }, //F8_E2 键位设置
 165          };
 166          
 167          unsigned int KeyScan(void)  //Keyboard scan function
 168          {
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 5   

 169   1        unsigned int Val = 0;
 170   1        HKeyPort |= 0x1f;//Row height
 171   1        LKeyPort &= 0x07;
 172   1        if ((HKeyPort & 0x1f) != 0x1f)//Press button
 173   1        {
 174   2          delay10ms();  //Remove jitter
 175   2          if ((HKeyPort & 0x1f) != 0x1f)   //Press button
 176   2          {
 177   3            HKeyPort |= 0x1f; //检测第一列
 178   3            LKeyPort |= 0xf8;
 179   3            LKeyPort &= 0x7f;
 180   3            if ((HKeyPort & 0x1f) != 0x1f)
 181   3            {
 182   4              //  return_standby_time=0;
 183   4              //  sound_table=1;
 184   4              Val = HKeyPort & 0x1f;
 185   4              Val <<= 8;
 186   4              Val += (LKeyPort & 0xf8);
 187   4              if (Val == 0x1e78)
 188   4              {
 189   5                clear_main_press_time();  //清除菜单键按下的时间计算变量
 190   5                set_main_press_time_table(1); //设置相应的标志位，开始计算时间
 191   5              }
 192   4              while ((HKeyPort & 0x1f) != 0x1f);
 193   4              delay10ms();
 194   4              while ((HKeyPort & 0x1f) != 0x1f);
 195   4              set_main_press_time_table(0);//按键释放，清除相应的标志位
 196   4              return Val;
 197   4            }
 198   3          }
 199   2        }
 200   1        return 0x0fff;
 201   1      }
 202          
 203          unsigned char KeyDecoder(void)
 204          {
 205   1        unsigned int key_val = 0;
 206   1      
 207   1        key_val = KeyScan();
 208   1      #if 0   
                if (key_val == 0x0fff) /*do not key press*/
                {
                  /*sjz 有注册管理器标志*/
                  if (register_manager == 1)
                  {
              
                    if (func_index == FUNC_STANDBY)
                    {
                      if ((old2_RF_RECE_REG[2] & 0x0f) == 0x01)
                      {
                        accumulate_decoder++;
                      }
                      else
                      {
                        accumulate_decoder = 0;
                      }
                      if (accumulate_decoder>10)
                      {
                        accumulate_50ms = 20;
                        accumulate_decoder = 0;
                      }
                    }
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 6   

                    register_manager = 0;
                    switch (old2_RF_RECE_REG[2] & 0x0f)
                    {
                    case 0x01:key_val = 0x1778; break;
                    case 0x02:key_val = 0x1b78; break;
                    case 0x04:key_val = 0x1d78; break;
                    case 0x08:key_val = 0x1e78; break;
                    default:break;
                    }
                  }
                }
              #endif   
 243   1      
 244   1      #ifdef DEBUG
 245   1        if (key_val != 0x0fff)
 246   1        uart_printf("key_val is %x .\r\n", key_val); //测试按键键值
 247   1      #endif
 248   1        switch (key_val)
 249   1        {
 250   2        case 0x1778:return KEY_RETURN; break;//1 按下相应的键显示相对应的码值
 251   2        case 0x1d78:return KEY_DOWN; break;//2  
 252   2        case 0x1b78:return KEY_UP; break;//4
 253   2        case 0x1e78:return KEY_FUNC; break;//5 按下相应的键显示相对应的码值
 254   2        default:return 0xff; break;
 255   2        }
 256   1      }
 257          
 258          void KeyProcess(void)
 259          {
 260   1        unsigned char key_value = 0, main_press_time_temp = 0;
 261   1        key_value = KeyDecoder();
 262   1        switch (key_value)
 263   1        {
 264   2          case KEY_FUNC:
 265   2            if (func_index == MENU_STANDBY )  //如果索引==0  则要1秒以上进入菜单
 266   2            {
 267   3              main_press_time_temp = return_main_press_time();
 268   3              if (main_press_time_temp >= 20)
 269   3              {
 270   4                func_index = ONE_MENU_F0;
 271   4                clear_main_press_time();
 272   4              }
 273   3            }
 274   2            else if (func_index == TWO_MENU_F2_E1_D1 || func_index == TWO_MENU_F2_E1_D2 || func_index == TWO_MENU_F
             -2_E1_D3 || func_index == TWO_MENU_F2_E1_D4 )
 275   2            {
 276   3              main_press_time_temp = return_main_press_time();
 277   3              if (main_press_time_temp >= 10)
 278   3              {
 279   4                delete_call_function(Two_Menu_F2_E1);
 280   4                delay10ms();
 281   4                clear_main_press_time();
 282   4      //          if (sound_table == 1)
 283   4      //          {
 284   4      //#if SOUND
 285   4      //            GD5800_select_chapter(SETSUCCESS_POSITION);
 286   4      //#endif
 287   4      //            sound_table = 0;
 288   4      //          }
 289   4              }
 290   3              else
 291   3                func_index = table[func_index].enter;
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 7   

 292   3            }
 293   2            else if (func_index == TWO_MENU_F2_E2_D1 || func_index == TWO_MENU_F2_E2_D2 || func_index == TWO_MENU_F
             -2_E2_D3 || func_index == TWO_MENU_F2_E2_D4)
 294   2            {
 295   3              main_press_time_temp = return_main_press_time();
 296   3              if (main_press_time_temp >= 10)
 297   3              {
 298   4                delete_host_function(Two_Menu_F2_E2);
 299   4                delay10ms();
 300   4                clear_main_press_time();
 301   4                //          if (sound_table == 1)
 302   4                //          {
 303   4                //#if SOUND
 304   4                //            GD5800_select_chapter(SETSUCCESS_POSITION);
 305   4                //#endif
 306   4                //            sound_table = 0;
 307   4                //          }
 308   4              }
 309   3              else
 310   3                func_index = table[func_index].enter;
 311   3            }
 312   2            else if (func_index == TWO_MENU_F2_E3_D1 || func_index == TWO_MENU_F2_E3_D2 || func_index == TWO_MENU_F
             -2_E3_D3 || func_index == TWO_MENU_F2_E3_D4)
 313   2            {
 314   3              main_press_time_temp = return_main_press_time();
 315   3              if (main_press_time_temp >= 10)
 316   3              {
 317   4                delete_alarm_function(Two_Menu_F2_E3);
 318   4                delay10ms();
 319   4                clear_main_press_time();
 320   4                //          if (sound_table == 1)
 321   4                //          {
 322   4                //#if SOUND
 323   4                //            GD5800_select_chapter(SETSUCCESS_POSITION);
 324   4                //#endif
 325   4                //            sound_table = 0;
 326   4                //          }
 327   4              }
 328   3              else
 329   3                func_index = table[func_index].enter;
 330   3            }
 331   2            else if (func_index == TWO_MENU_F2_E4_D1 || func_index == TWO_MENU_F2_E4_D2 || func_index == TWO_MENU_F
             -2_E4_D3 || func_index == TWO_MENU_F2_E4_D4)
 332   2            {
 333   3              main_press_time_temp = return_main_press_time();
 334   3              if (main_press_time_temp >= 10)
 335   3              {
 336   4                delete_cancel_function(Two_Menu_F2_E4);
 337   4                delay10ms();
 338   4                clear_main_press_time();
 339   4                //          if (sound_table == 1)
 340   4                //          {
 341   4                //#if SOUND
 342   4                //            GD5800_select_chapter(SETSUCCESS_POSITION);
 343   4                //#endif
 344   4                //            sound_table = 0;
 345   4                //          }
 346   4              }
 347   3              else
 348   3                func_index = table[func_index].enter;
 349   3            }
 350   2            else
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 8   

 351   2            {
 352   3              func_index = table[func_index].enter;
 353   3              clear_main_press_time();
 354   3            }
 355   2             break;
 356   2          case KEY_RETURN:  func_index = table[func_index].esc; break;
 357   2          case KEY_UP:
 358   2            switch (func_index)
 359   2            {
 360   3            case TWO_MENU_F0_YEAR: 
 361   3              if (time_buf1[1] == 99) time_buf1[1] = 0; //设置万年历 年
 362   3                         else time_buf1[1]++;
 363   3              break;
 364   3            case TWO_MENU_F0_MOUTH:
 365   3              if (time_buf1[2] == 12) time_buf1[2] = 1; //设置万年历 月
 366   3              else time_buf1[2]++;
 367   3              break;
 368   3            case TWO_MENU_F0_DAY:
 369   3              if (time_buf1[3] == 31) time_buf1[3] = 1; //设置万年历 日
 370   3              else time_buf1[3]++;
 371   3              break;
 372   3            case TWO_MENU_F0_WEEK:
 373   3              if (time_buf1[7] == 7) time_buf1[7] = 1;  //设置万年历 星期
 374   3              else time_buf1[7]++;
 375   3              break;
 376   3            case TWO_MENU_F0_HOUR:
 377   3              if (time_buf1[4] == 23) time_buf1[4] = 0; //设置万年历 小时
 378   3              else time_buf1[4]++;
 379   3              break;
 380   3            case TWO_MENU_F0_MINUTE:
 381   3              if (time_buf1[5] == 59) time_buf1[5] = 0; //设置万年历 分钟
 382   3              else time_buf1[5]++;
 383   3              break;
 384   3            case TWO_MENU_F1_E1_D1:
 385   3              if (Two_Menu_F1_E1[0] == 20 ) Two_Menu_F1_E1[0] = 0;  //设置F1_E1千位
 386   3              else Two_Menu_F1_E1[0]++;
 387   3              break;
 388   3            case TWO_MENU_F1_E1_D2:
 389   3              if (Two_Menu_F1_E1[1] == 9) Two_Menu_F1_E1[1] = 0;  //设置F1_E1百位
 390   3              else Two_Menu_F1_E1[1]++;
 391   3              break;
 392   3            case TWO_MENU_F1_E1_D3:
 393   3              if (Two_Menu_F1_E1[2] == 9) Two_Menu_F1_E1[2] = 0;  //设置F1_E1十位
 394   3              else Two_Menu_F1_E1[2]++;
 395   3              break;
 396   3            case TWO_MENU_F1_E1_D4:
 397   3              if (Two_Menu_F1_E1[3] == 9) Two_Menu_F1_E1[3] = 0;  //设置F1_E1个位
 398   3              else Two_Menu_F1_E1[3]++;
 399   3              break;
 400   3            case TWO_MENU_F1_E2_D1:
 401   3              if (Two_Menu_F1_E2[0] == 20) Two_Menu_F1_E2[0] = 0; //设置F1_E2千位
 402   3              else Two_Menu_F1_E2[0]++;
 403   3              break;
 404   3            case TWO_MENU_F1_E2_D2:
 405   3              if (Two_Menu_F1_E2[1] == 9) Two_Menu_F1_E2[1] = 0;  //设置F1_E2百位
 406   3              else Two_Menu_F1_E2[1]++;
 407   3              break;
 408   3            case TWO_MENU_F1_E2_D3:
 409   3              if (Two_Menu_F1_E2[2] == 9) Two_Menu_F1_E2[2] = 0;  //设置F1_E2十位
 410   3              else Two_Menu_F1_E2[2]++;
 411   3              break;
 412   3            case TWO_MENU_F1_E2_D4:
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 9   

 413   3              if (Two_Menu_F1_E2[3] == 9) Two_Menu_F1_E2[3] = 0;  //设置F1_E2个位
 414   3              else Two_Menu_F1_E2[3]++;
 415   3              break;
 416   3            case TWO_MENU_F1_E3_D1:
 417   3              if (Two_Menu_F1_E3[0] == 20) Two_Menu_F1_E3[0] = 0; //设置F1_E3千位
 418   3              else Two_Menu_F1_E3[0]++;
 419   3              break;
 420   3            case TWO_MENU_F1_E3_D2:
 421   3              if (Two_Menu_F1_E3[1] == 9) Two_Menu_F1_E3[1] = 0;  //设置F1_E3百位
 422   3              else Two_Menu_F1_E3[1]++;
 423   3              break;
 424   3            case TWO_MENU_F1_E3_D3:
 425   3              if (Two_Menu_F1_E3[2] == 9) Two_Menu_F1_E3[2] = 0;  //设置F1_E3十位
 426   3              else Two_Menu_F1_E3[2]++;
 427   3              break;
 428   3            case TWO_MENU_F1_E3_D4:
 429   3              if (Two_Menu_F1_E3[3] == 9) Two_Menu_F1_E3[3] = 0;  //设置F1_E3个位
 430   3              else Two_Menu_F1_E3[3]++;
 431   3              break;
 432   3            case TWO_MENU_F1_E4_D1:
 433   3              if (Two_Menu_F1_E4[0] == 20) Two_Menu_F1_E4[0] = 0; //设置F1_E4千位
 434   3              else Two_Menu_F1_E4[0]++;
 435   3              break;
 436   3            case TWO_MENU_F1_E4_D2:
 437   3              if (Two_Menu_F1_E4[1] == 9) Two_Menu_F1_E4[1] = 0;  //设置F1_E4百位
 438   3              else Two_Menu_F1_E4[1]++;
 439   3              break;
 440   3            case TWO_MENU_F1_E4_D3:
 441   3              if (Two_Menu_F1_E4[2] == 9) Two_Menu_F1_E4[2] = 0;  //设置F1_E4十位
 442   3              else Two_Menu_F1_E4[2]++;
 443   3              break;
 444   3            case TWO_MENU_F1_E4_D4:
 445   3              if (Two_Menu_F1_E4[3] == 9) Two_Menu_F1_E4[3] = 0;  //设置F1_E4个位
 446   3              else Two_Menu_F1_E4[3]++;
 447   3              break;
 448   3            case TWO_MENU_F2_E1_D1:
 449   3              if (Two_Menu_F2_E1[0] == 20) Two_Menu_F2_E1[0] = 0; //设置F2_E1千位
 450   3              else Two_Menu_F2_E1[0]++;
 451   3              break;
 452   3            case TWO_MENU_F2_E1_D2:
 453   3              if (Two_Menu_F2_E1[1] == 9) Two_Menu_F2_E1[1] = 0;  //设置F2_E1百位
 454   3              else Two_Menu_F2_E1[1]++;
 455   3              break;
 456   3            case TWO_MENU_F2_E1_D3:
 457   3              if (Two_Menu_F2_E1[2] == 9) Two_Menu_F2_E1[2] = 0;  //设置F2_E1十位
 458   3              else Two_Menu_F2_E1[2]++;
 459   3              break;
 460   3            case TWO_MENU_F2_E1_D4:
 461   3              if (Two_Menu_F2_E1[3] == 9) Two_Menu_F2_E1[3] = 0;  //设置F2_E1个位
 462   3              else Two_Menu_F2_E1[3]++;
 463   3              break;
 464   3            case TWO_MENU_F2_E2_D1:
 465   3              if (Two_Menu_F2_E2[0] == 20) Two_Menu_F2_E2[0] = 0; //设置F2_E2千位
 466   3              else Two_Menu_F2_E2[0]++;
 467   3              break;
 468   3            case TWO_MENU_F2_E2_D2:
 469   3              if (Two_Menu_F2_E2[1] == 9) Two_Menu_F2_E2[1] = 0;  //设置F2_E2百位
 470   3              else Two_Menu_F2_E2[1]++;
 471   3              break;
 472   3            case TWO_MENU_F2_E2_D3:
 473   3              if (Two_Menu_F2_E2[2] == 9) Two_Menu_F2_E2[2] = 0;  //设置F2_E2十位
 474   3              else Two_Menu_F2_E2[2]++;
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 10  

 475   3              break;
 476   3            case TWO_MENU_F2_E2_D4:
 477   3              if (Two_Menu_F2_E2[3] == 9) Two_Menu_F2_E2[3] = 0;  //设置F2_E2个位
 478   3              else Two_Menu_F2_E2[3]++;
 479   3              break;
 480   3            case TWO_MENU_F2_E3_D1:
 481   3              if (Two_Menu_F2_E3[0] == 20) Two_Menu_F2_E3[0] = 0; //设置F2_E3千位
 482   3              else Two_Menu_F2_E3[0]++;
 483   3              break;
 484   3            case TWO_MENU_F2_E3_D2:
 485   3              if (Two_Menu_F2_E3[1] == 9) Two_Menu_F2_E3[1] = 0;  //设置F2_E3百位
 486   3              else Two_Menu_F2_E3[1]++;
 487   3              break;
 488   3            case TWO_MENU_F2_E3_D3:
 489   3              if (Two_Menu_F2_E3[2] == 9) Two_Menu_F2_E3[2] = 0;  //设置F2_E3十位
 490   3              else Two_Menu_F2_E3[2]++;
 491   3              break;
 492   3            case TWO_MENU_F2_E3_D4:
 493   3              if (Two_Menu_F2_E3[3] == 9) Two_Menu_F2_E3[3] = 0;  //设置F2_E3个位
 494   3              else Two_Menu_F2_E3[3]++;
 495   3              break;
 496   3            case TWO_MENU_F2_E4_D1:
 497   3              if (Two_Menu_F2_E4[0] == 20) Two_Menu_F2_E4[0] = 0; //设置F2_E4千位
 498   3              else Two_Menu_F2_E4[0]++;
 499   3              break;
 500   3            case TWO_MENU_F2_E4_D2:
 501   3              if (Two_Menu_F2_E4[1] == 9) Two_Menu_F2_E4[1] = 0;  //设置F2_E4百位
 502   3              else Two_Menu_F2_E4[1]++;
 503   3              break;
 504   3            case TWO_MENU_F2_E4_D3:
 505   3              if (Two_Menu_F2_E4[2] == 9) Two_Menu_F2_E4[2] = 0;  //设置F2_E4十位
 506   3              else Two_Menu_F2_E4[2]++;
 507   3              break;
 508   3            case TWO_MENU_F2_E4_D4:
 509   3              if (Two_Menu_F2_E4[3] == 9) Two_Menu_F2_E4[3] = 0;  //设置F2_E4个位
 510   3              else Two_Menu_F2_E4[3]++;
 511   3            case TWO_MENU_F3_E1_SET:
 512   3              if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;  //排队显示 或者 循环显示
 513   3              else Two_Menu_F3_E1 = 1;
 514   3              break;
 515   3            case TWO_MENU_F3_E2_SET:
 516   3              if (Two_Menu_F3_E2 == 20) Two_Menu_F3_E2 = 1; //存储队列个数
 517   3              else Two_Menu_F3_E2 ++;
 518   3              break;
 519   3            case TWO_MENU_F4_SET:
 520   3              if (Two_Menu_F4_E1 == 99) Two_Menu_F4_E1 = 0; //销号时间设置
 521   3              else Two_Menu_F4_E1++;
 522   3              break;
 523   3            case TWO_MENU_F5_SET:
 524   3              if (Two_Menu_F5_E1 == 99) Two_Menu_F5_E1 = 0; //循环时间设置
 525   3              else Two_Menu_F5_E1++;
 526   3              break;
 527   3            case TWO_MENU_F6_E1_SET:
 528   3              if (Two_Menu_F6_E1 == 5) Two_Menu_F6_E1 = 0;  //F6_E1语音选择
 529   3              else Two_Menu_F6_E1++;
 530   3              break;
 531   3            case TWO_MENU_F6_E2_SET:
 532   3              if (Two_Menu_F6_E2 == 9) Two_Menu_F6_E2 = 1;  //F6_E2语音报读次数
 533   3              else Two_Menu_F6_E2++;
 534   3              break;
 535   3            case TWO_MENU_F6_E3_SET:
 536   3              if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;  //F6_E3循环时候是否报读
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 11  

 537   3              else Two_Menu_F6_E3 = 0;
 538   3              break;
 539   3            case TWO_MENU_F6_E4_SET:
 540   3              if (Two_Menu_F6_E4 == 9) Two_Menu_F6_E4 = 0;  //F6_E4音量大小调整
 541   3              else Two_Menu_F6_E4++;
 542   3              break;
 543   3            case TWO_MENU_F6_E5_SET:
 544   3              if (Two_Menu_F6_E5 == 9) Two_Menu_F6_E5 = 0;  //F6_E5屏幕亮度调整
 545   3              else Two_Menu_F6_E5++;
 546   3              break;
 547   3            case TWO_MENU_F7_E1_SET:
 548   3              if (Two_Menu_F7_E1 == 11) Two_Menu_F7_E1 = 0; //F7_E1原始规则 999*9
 549   3              else Two_Menu_F7_E1++;
 550   3              break;
 551   3            case TWO_MENU_F7_E2_SET:
 552   3              if (Two_Menu_F7_E2 == 11) Two_Menu_F7_E2 = 0; //F7_E2附加规则 9999*9
 553   3              else Two_Menu_F7_E2++;
 554   3              break;
 555   3            case TWO_MENU_F7_E3_SET:
 556   3              if (Two_Menu_F7_E3 == 11) Two_Menu_F7_E3 = 0; //F7_E3附加规则 999*99
 557   3              else Two_Menu_F7_E3++;
 558   3              break;
 559   3            case TWO_MENU_F7_E4_SET:
 560   3              if (Two_Menu_F7_E4 == 11) Two_Menu_F7_E4 = 0; //F7_E3附加规则 9999*99
 561   3              else Two_Menu_F7_E4++;
 562   3              break;
 563   3            case TWO_MENU_F8_E1_SET:
 564   3              if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 0;  //F8_E1单键位跟多键位切换
 565   3              else Two_Menu_F8_E1 = 1 ;
 566   3              break;
 567   3            case TWO_MENU_F8_E2_SET:
 568   3              if (Two_Menu_F8_E2 == 50) Two_Menu_F8_E2 = 0; //F8_E2键位设置
 569   3              else Two_Menu_F8_E2++;
 570   3              break;
 571   3      
 572   3              default:break;
 573   3            } 
 574   2            func_index = table[func_index].up; break;
 575   2          case KEY_DOWN:
 576   2            switch (func_index)
 577   2            {
 578   3            case TWO_MENU_F0_YEAR:
 579   3              if (time_buf1[1] == 0) time_buf1[1] = 99; //设置万年历 年
 580   3              else time_buf1[1]--;
 581   3              break;
 582   3            case TWO_MENU_F0_MOUTH:
 583   3              if (time_buf1[2] == 1) time_buf1[2] = 12; //设置万年历 月
 584   3              else time_buf1[2]--;
 585   3              break;
 586   3            case TWO_MENU_F0_DAY:
 587   3              if (time_buf1[3] == 1) time_buf1[3] = 31; //设置万年历 日
 588   3              else time_buf1[3]--;
 589   3              break;
 590   3            case TWO_MENU_F0_WEEK:
 591   3              if (time_buf1[7] == 1) time_buf1[7] = 7;  //设置万年历 星期
 592   3              else time_buf1[7]--;
 593   3              break;
 594   3            case TWO_MENU_F0_HOUR:
 595   3              if (time_buf1[4] == 0) time_buf1[4] = 23; //设置万年历 小时
 596   3              else time_buf1[4]--;
 597   3              break;
 598   3            case TWO_MENU_F0_MINUTE:
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 12  

 599   3              if (time_buf1[5] == 0) time_buf1[5] = 59; //设置万年历 分钟
 600   3              else time_buf1[5]--;
 601   3              break;
 602   3            case TWO_MENU_F1_E1_D1:
 603   3              if (Two_Menu_F1_E1[0] == 0) Two_Menu_F1_E1[0] = 20; //设置F1_E1千位
 604   3              else Two_Menu_F1_E1[0]--;
 605   3              break;
 606   3            case TWO_MENU_F1_E1_D2:
 607   3              if (Two_Menu_F1_E1[1] == 0) Two_Menu_F1_E1[1] = 9;  //设置F1_E1百位
 608   3              else Two_Menu_F1_E1[1]--;
 609   3              break;
 610   3            case TWO_MENU_F1_E1_D3:
 611   3              if (Two_Menu_F1_E1[2] == 0) Two_Menu_F1_E1[2] = 9;  //设置F1_E1十位
 612   3              else Two_Menu_F1_E1[2]--;
 613   3              break;
 614   3            case TWO_MENU_F1_E1_D4:
 615   3              if (Two_Menu_F1_E1[3] == 0) Two_Menu_F1_E1[3] = 9;  //设置F1_E1个位
 616   3              else Two_Menu_F1_E1[3]--;
 617   3              break;
 618   3            case TWO_MENU_F1_E2_D1:
 619   3              if (Two_Menu_F1_E2[0] == 0) Two_Menu_F1_E2[0] = 20; //设置F1_E2千位
 620   3              else Two_Menu_F1_E2[0]--;
 621   3              break;
 622   3            case TWO_MENU_F1_E2_D2:
 623   3              if (Two_Menu_F1_E2[1] == 0) Two_Menu_F1_E2[1] = 9;  //设置F1_E2百位
 624   3              else Two_Menu_F1_E2[1]--;
 625   3              break;
 626   3            case TWO_MENU_F1_E2_D3:
 627   3              if (Two_Menu_F1_E2[2] == 0) Two_Menu_F1_E2[2] = 9;  //设置F1_E2十位
 628   3              else Two_Menu_F1_E2[2]--;
 629   3              break;
 630   3            case TWO_MENU_F1_E2_D4:
 631   3              if (Two_Menu_F1_E2[3] == 0) Two_Menu_F1_E2[3] = 9;  //设置F1_E2个位
 632   3              else Two_Menu_F1_E2[3]--;
 633   3              break;
 634   3            case TWO_MENU_F1_E3_D1:
 635   3              if (Two_Menu_F1_E3[0] == 0) Two_Menu_F1_E3[0] = 20; //设置F1_E3千位
 636   3              else Two_Menu_F1_E3[0]--;
 637   3              break;
 638   3            case TWO_MENU_F1_E3_D2:
 639   3              if (Two_Menu_F1_E3[1] == 0) Two_Menu_F1_E3[1] = 9;  //设置F1_E3百位
 640   3              else Two_Menu_F1_E3[1]--;
 641   3              break;
 642   3            case TWO_MENU_F1_E3_D3:
 643   3              if (Two_Menu_F1_E3[2] == 0) Two_Menu_F1_E3[2] = 9;  //设置F1_E3十位
 644   3              else Two_Menu_F1_E3[2]--;
 645   3              break;
 646   3            case TWO_MENU_F1_E3_D4:
 647   3              if (Two_Menu_F1_E3[3] == 0) Two_Menu_F1_E3[3] = 9;  //设置F1_E3个位
 648   3              else Two_Menu_F1_E3[3]--;
 649   3              break;
 650   3            case TWO_MENU_F1_E4_D1:
 651   3              if (Two_Menu_F1_E4[0] == 0) Two_Menu_F1_E4[0] = 20; //设置F1_E4千位
 652   3              else Two_Menu_F1_E4[0]--;
 653   3              break;
 654   3            case TWO_MENU_F1_E4_D2:
 655   3              if (Two_Menu_F1_E4[1] == 0) Two_Menu_F1_E4[1] = 9;  //设置F1_E4百位
 656   3              else Two_Menu_F1_E4[1]--;
 657   3              break;
 658   3            case TWO_MENU_F1_E4_D3:
 659   3              if (Two_Menu_F1_E4[2] == 0) Two_Menu_F1_E4[2] = 9;  //设置F1_E4十位
 660   3              else Two_Menu_F1_E4[2]--;
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 13  

 661   3              break;
 662   3            case TWO_MENU_F1_E4_D4:
 663   3              if (Two_Menu_F1_E4[3] == 0) Two_Menu_F1_E4[3] = 9;  //设置F1_E4个位
 664   3              else Two_Menu_F1_E4[3]--;
 665   3              break;
 666   3            case TWO_MENU_F2_E1_D1:
 667   3              if (Two_Menu_F2_E1[0] == 0) Two_Menu_F2_E1[0] = 20; //设置F2_E1千位
 668   3              else Two_Menu_F2_E1[0]--;
 669   3              break;
 670   3            case TWO_MENU_F2_E1_D2:
 671   3              if (Two_Menu_F2_E1[1] == 0) Two_Menu_F2_E1[1] = 9;  //设置F2_E1百位
 672   3              else Two_Menu_F2_E1[1]--;
 673   3              break;
 674   3            case TWO_MENU_F2_E1_D3:
 675   3              if (Two_Menu_F2_E1[2] == 0) Two_Menu_F2_E1[2] = 9;  //设置F2_E1十位
 676   3              else Two_Menu_F2_E1[2]--;
 677   3              break;
 678   3            case TWO_MENU_F2_E1_D4:
 679   3              if (Two_Menu_F2_E1[3] == 0) Two_Menu_F2_E1[3] = 9;  //设置F2_E1个位
 680   3              else Two_Menu_F2_E1[3]--;
 681   3              break;
 682   3            case TWO_MENU_F2_E2_D1:
 683   3              if (Two_Menu_F2_E2[0] == 0) Two_Menu_F2_E2[0] = 20; //设置F2_E2千位
 684   3              else Two_Menu_F2_E2[0]--;
 685   3              break;
 686   3            case TWO_MENU_F2_E2_D2:
 687   3              if (Two_Menu_F2_E2[1] == 0) Two_Menu_F2_E2[1] = 9;  //设置F2_E2百位
 688   3              else Two_Menu_F2_E2[1]--;
 689   3              break;
 690   3            case TWO_MENU_F2_E2_D3:
 691   3              if (Two_Menu_F2_E2[2] == 0) Two_Menu_F2_E2[2] = 9;  //设置F2_E2十位
 692   3              else Two_Menu_F2_E2[2]--;
 693   3              break;
 694   3            case TWO_MENU_F2_E2_D4:
 695   3              if (Two_Menu_F2_E2[3] == 0) Two_Menu_F2_E2[3] = 9;  //设置F2_E2个位
 696   3              else Two_Menu_F2_E2[3]--;
 697   3              break;
 698   3            case TWO_MENU_F2_E3_D1:
 699   3              if (Two_Menu_F2_E3[0] == 0) Two_Menu_F2_E3[0] = 20; //设置F2_E3千位
 700   3              else Two_Menu_F2_E3[0]--;
 701   3              break;
 702   3            case TWO_MENU_F2_E3_D2:
 703   3              if (Two_Menu_F2_E3[1] == 0) Two_Menu_F2_E3[1] = 9;  //设置F2_E3百位
 704   3              else Two_Menu_F2_E3[1]--;
 705   3              break;
 706   3            case TWO_MENU_F2_E3_D3:
 707   3              if (Two_Menu_F2_E3[2] == 0) Two_Menu_F2_E3[2] = 9;  //设置F2_E3十位
 708   3              else Two_Menu_F2_E3[2]--;
 709   3              break;
 710   3            case TWO_MENU_F2_E3_D4:
 711   3              if (Two_Menu_F2_E3[3] == 0) Two_Menu_F2_E3[3] = 9;  //设置F2_E3个位
 712   3              else Two_Menu_F2_E3[3]--;
 713   3              break;
 714   3            case TWO_MENU_F2_E4_D1:
 715   3              if (Two_Menu_F2_E4[0] == 0) Two_Menu_F2_E4[0] = 20; //设置F2_E4千位
 716   3              else Two_Menu_F2_E4[0]--;
 717   3              break;
 718   3            case TWO_MENU_F2_E4_D2:
 719   3              if (Two_Menu_F2_E4[1] == 0) Two_Menu_F2_E4[1] = 9;  //设置F2_E4百位
 720   3              else Two_Menu_F2_E4[1]--;
 721   3              break;
 722   3            case TWO_MENU_F2_E4_D3:
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 14  

 723   3              if (Two_Menu_F2_E4[2] == 0) Two_Menu_F2_E4[2] = 9;  //设置F2_E4十位
 724   3              else Two_Menu_F2_E4[2]--;
 725   3              break;
 726   3            case TWO_MENU_F2_E4_D4:
 727   3              if (Two_Menu_F2_E4[3] == 0) Two_Menu_F2_E4[3] = 9;  //设置F2_E4个位
 728   3              else Two_Menu_F2_E4[3]--;
 729   3              break;
 730   3            case TWO_MENU_F3_E1_SET:
 731   3              if (Two_Menu_F3_E1 == 1) Two_Menu_F3_E1 = 2;  //排队显示 或者 循环显示
 732   3              else Two_Menu_F3_E1 = 1;
 733   3              break;
 734   3            case TWO_MENU_F3_E2_SET:
 735   3              if (Two_Menu_F3_E2 == 1) Two_Menu_F3_E2 = 20; //存储队列个数
 736   3              else Two_Menu_F3_E2--;
 737   3              break;
 738   3            case TWO_MENU_F4_SET:
 739   3              if (Two_Menu_F4_E1 == 0) Two_Menu_F4_E1 = 99; //销号时间设置
 740   3              else Two_Menu_F4_E1--;
 741   3              break;
 742   3            case TWO_MENU_F5_SET:
 743   3              if (Two_Menu_F5_E1 == 0) Two_Menu_F5_E1 = 99; //销号时间设置
 744   3              else Two_Menu_F5_E1--;
 745   3              break;
 746   3            case TWO_MENU_F6_E1_SET:
 747   3              if (Two_Menu_F6_E1 == 0) Two_Menu_F6_E1 = 5;  //F6_E1额语音选择
 748   3              else Two_Menu_F6_E1--;
 749   3              break;
 750   3            case TWO_MENU_F6_E2_SET:
 751   3              if (Two_Menu_F6_E2 == 1) Two_Menu_F6_E2 = 9;  //F6_E2语音报读次数调整
 752   3              else Two_Menu_F6_E2--;
 753   3              break;
 754   3            case TWO_MENU_F6_E3_SET:
 755   3              if (Two_Menu_F6_E3 == 0) Two_Menu_F6_E3 = 1;  //F6_E3循环时候是否报读
 756   3              else Two_Menu_F6_E3 = 0;
 757   3              break;
 758   3            case TWO_MENU_F6_E4_SET:
 759   3              if (Two_Menu_F6_E4 == 0) Two_Menu_F6_E4 = 9;  //F6_E4音量大小调整
 760   3              else Two_Menu_F6_E4--;
 761   3              break;
 762   3            case TWO_MENU_F6_E5_SET:
 763   3              if (Two_Menu_F6_E5 == 0) Two_Menu_F6_E5 = 9;  //F6_E5屏幕亮度调整
 764   3              else Two_Menu_F6_E5--;
 765   3              break;
 766   3            case TWO_MENU_F7_E1_SET:
 767   3              if (Two_Menu_F7_E1 == 0) Two_Menu_F7_E1 = 11; //F7_E1原始规则 999*9
 768   3              else Two_Menu_F7_E1--;
 769   3              break;
 770   3            case TWO_MENU_F7_E2_SET:
 771   3              if (Two_Menu_F7_E2 == 0) Two_Menu_F7_E2 = 11; //F7_E2附加规则 9999*9
 772   3              else Two_Menu_F7_E2--;
 773   3              break;
 774   3            case TWO_MENU_F7_E3_SET:
 775   3              if (Two_Menu_F7_E3 == 0) Two_Menu_F7_E3 = 11; //F7_E3附加规则 999*99
 776   3              else Two_Menu_F7_E3--;
 777   3              break;
 778   3            case TWO_MENU_F7_E4_SET:
 779   3              if (Two_Menu_F7_E4 == 0) Two_Menu_F7_E4 = 11; //F7_E3附加规则 9999*99
 780   3              else Two_Menu_F7_E4--;
 781   3              break;
 782   3            case TWO_MENU_F8_E1_SET:
 783   3              if (Two_Menu_F8_E1 == 1) Two_Menu_F8_E1 = 0;  //F8_E1单键位跟多键位切换
 784   3              else Two_Menu_F8_E1 = 1;
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 15  

 785   3              break;
 786   3            case TWO_MENU_F8_E2_SET:
 787   3              if (Two_Menu_F8_E2 == 0) Two_Menu_F8_E2 = 50; //F8_E2键位设置
 788   3              else Two_Menu_F8_E2--;
 789   3              break;
 790   3      
 791   3              default:break;
 792   3            }
 793   2            func_index = table[func_index].down; break;
 794   2          default:break;
 795   2        }
 796   1        current_operation_index = table[func_index].index_operation;
 797   1        (*current_operation_index)();//执行当前操作函数
 798   1      }
 799          
 800          void delay10ms(void)   //误差 -0.054253472222us
 801          {
 802   1        unsigned char a, b, c;
 803   1        for (c = 4; c>0; c--)
 804   1        for (b = 52; b>0; b--)
 805   1        for (a = 220; a>0; a--);
 806   1        _nop_();  //if Keil,require use intrins.h
 807   1      }
 808          
 809          unsigned char return_func_index(void)
 810          {
 811   1        unsigned char func_index_temp = 0;
 812   1        func_index_temp = func_index;
 813   1        return func_index_temp;
 814   1      }
 815          
 816          void set_func_index(unsigned char temp)
 817          {
 818   1        func_index = temp;
 819   1      }
 820          
 821          unsigned char return_Two_Menu_F3_E1(void)
 822          {
 823   1        unsigned char temp = 0;
 824   1        temp = Two_Menu_F3_E1;
 825   1        return temp;
 826   1      }
 827          
 828          unsigned char return_Two_Menu_F3_E2(void)
 829          {
 830   1        unsigned char temp = 0;
 831   1        temp = Two_Menu_F3_E2;
 832   1        return temp;
 833   1      }
 834          
 835          unsigned char return_Two_Menu_F4_E1(void)
 836          {
 837   1        unsigned char temp = 0;
 838   1        temp = Two_Menu_F4_E1;
 839   1        return temp;
 840   1      }
 841          
 842          unsigned char return_Two_Menu_F5_E1(void)
 843          {
 844   1        unsigned char temp = 0;
 845   1        temp = Two_Menu_F5_E1;
 846   1        return temp;
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 16  

 847   1      }
 848          
 849          unsigned char return_Two_Menu_F6_E1(void)
 850          {
 851   1        unsigned char temp = 0;
 852   1        temp = Two_Menu_F6_E1;
 853   1        return temp;
 854   1      }
 855          
 856          unsigned char return_Two_Menu_F6_E2(void)
 857          {
 858   1        unsigned char temp = 0;
 859   1        temp = Two_Menu_F6_E2;
 860   1        return temp;
 861   1      }
 862          
 863          unsigned char return_Two_Menu_F6_E3(void)
 864          {
 865   1        unsigned char temp = 0;
 866   1        temp = Two_Menu_F6_E3;
 867   1        return temp;
 868   1      }
 869          
 870          unsigned char return_Two_Menu_F6_E4(void)
 871          {
 872   1        unsigned char temp = 0;
 873   1        temp = Two_Menu_F6_E4;
 874   1        return temp;
 875   1      }
 876          
 877          unsigned char return_Two_Menu_F6_E5(void)
 878          {
 879   1        unsigned char temp = 0;
 880   1        temp = Two_Menu_F6_E5;
 881   1        return temp;
 882   1      }
 883          
 884          unsigned char return_Two_Menu_F7_E1(void)
 885          {
 886   1        unsigned char temp = 0;
 887   1        temp = Two_Menu_F7_E1;
 888   1        return temp;
 889   1      }
 890          
 891          unsigned char return_Two_Menu_F7_E2(void)
 892          {
 893   1        unsigned char temp = 0;
 894   1        temp = Two_Menu_F7_E2;
 895   1        return temp;
 896   1      }
 897          
 898          unsigned char return_Two_Menu_F7_E3(void)
 899          {
 900   1        unsigned char temp = 0;
 901   1        temp = Two_Menu_F7_E3;
 902   1        return temp;
 903   1      }
 904          
 905          unsigned char return_Two_Menu_F7_E4(void)
 906          {
 907   1        unsigned char temp = 0;
 908   1        temp = Two_Menu_F7_E4;
C51 COMPILER V9.00   KEY                                                                   09/12/2015 17:33:13 PAGE 17  

 909   1        return temp;
 910   1      }
 911          
 912          unsigned char return_Two_Menu_F8_E1(void)
 913          {
 914   1        unsigned char temp = 0;
 915   1        temp = Two_Menu_F8_E1;
 916   1        return temp;
 917   1      }
 918          
 919          unsigned char return_Two_Menu_F8_E2(void)
 920          {
 921   1        unsigned char temp = 0;
 922   1        temp = Two_Menu_F8_E2;
 923   1        return temp;
 924   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2875    ----
   CONSTANT SIZE    =    818    ----
   XDATA SIZE       =     54       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
