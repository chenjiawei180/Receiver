C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TM1629
OBJECT MODULE PLACED IN tm1629.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\tm1629.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(
                    -.\tm1629.lst) TABS(2) OBJECT(tm1629.obj)

line level    source

   1          #include "tm1629.h"
   2          #include "timer.h"
   3          #include "usart.h"
   4          #include "ds1302.h"
   5          #include "key.h"
   6          #include "menu.h"
   7          
   8          unsigned char const CODE[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x3
             -9, 0x5E, 0x79, 0x71, 0x76, 0x38, 0x5c, 0x73, 0x3e };//0-9 abcdef 显示器码数组
   9          unsigned char const INIT_CODE[] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };//逐段点亮数码管数组
  10          unsigned char const SHANGSHUO[] = { 0x40, 0x00 }; // 点亮数码管中间段以及灭
  11          unsigned char buf_display[6][8] = { 0 }; //3个TM1629显存数组
  12          unsigned char display_ram[240] = { 0 }; //程序运行时记录显示数据的内存 
  13          unsigned char await_time_table= 0 ;//用于记录待机显示横杠数码管次数 
  14          
  15          void writeDataTo1629(unsigned char p) //写数据给第一个TM1629
  16          {
  17   1        unsigned int i;
  18   1        TM1629_STB = 0;
  19   1        for (i = 0; i<8; i++)
  20   1        {
  21   2          TM1629_CLK = 0;
  22   2          if (p & 0x01)
  23   2            TM1629_DIO = 1;
  24   2          else
  25   2            TM1629_DIO = 0;
  26   2          _nop_();
  27   2          _nop_();
  28   2          _nop_();
  29   2          _nop_();
  30   2          TM1629_CLK = 1;
  31   2          p = p >> 1;
  32   2        }
  33   1        TM1629_CLK = 0;
  34   1        TM1629_DIO = 0;
  35   1      }
  36          
  37          void writeDataTo1629_2(unsigned char p) //写数据给第二个TM1629
  38          {
  39   1        unsigned int i;
  40   1        TM1629_STB2 = 0;
  41   1        for (i = 0; i<8; i++)
  42   1        {
  43   2          TM1629_CLK = 0;
  44   2          if (p & 0x01)
  45   2            TM1629_DIO = 1;
  46   2          else
  47   2            TM1629_DIO = 0;
  48   2          _nop_();
  49   2          _nop_();
  50   2          _nop_();
  51   2          _nop_();
  52   2          TM1629_CLK = 1;
  53   2          p = p >> 1;
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 2   

  54   2        }
  55   1        TM1629_CLK = 0;
  56   1        TM1629_DIO = 0;
  57   1      }
  58          
  59          void writeDataTo1629_3(unsigned char p) //写数据给第三个TM1629
  60          {
  61   1        unsigned int i;
  62   1        TM1629_STB3 = 0;
  63   1        for (i = 0; i<8; i++)
  64   1        {
  65   2          TM1629_CLK = 0;
  66   2          if (p & 0x01)
  67   2            TM1629_DIO = 1;
  68   2          else
  69   2            TM1629_DIO = 0;
  70   2          _nop_();
  71   2          _nop_();
  72   2          _nop_();
  73   2          _nop_();
  74   2          TM1629_CLK = 1;
  75   2          p = p >> 1;
  76   2        }
  77   1        TM1629_CLK = 0;
  78   1        TM1629_DIO = 0;
  79   1      }
  80          
  81          void send_command(unsigned char word) //写命令给第一个TM1629
  82          {
  83   1        TM1629_STB = 1;
  84   1        nop;
  85   1        TM1629_STB = 0;
  86   1        writeDataTo1629(word);
  87   1      }
  88          
  89          void send_command_2(unsigned char word) //写命令给第二个TM1629
  90          {
  91   1        TM1629_STB2 = 1;
  92   1        nop;
  93   1        TM1629_STB2 = 0;
  94   1        writeDataTo1629_2(word);
  95   1      }
  96          
  97          void send_command_3(unsigned char word) //写命令给第三个TM1629
  98          {
  99   1        TM1629_STB3 = 1;
 100   1        nop;
 101   1        TM1629_STB3 = 0;
 102   1        writeDataTo1629_3(word);
 103   1      }
 104          
 105          void display(void) //3个TM1629显示函数
 106          {
 107   1        unsigned char i;
 108   1        send_command(0x40); //设置数据命令:普通模式、地址自增1，写数据到显存
 109   1        send_command(0xc0); //设置显示地址命令：从00H开始
 110   1        for (i = 0; i<8; i++) //发送16字节的显存数据
 111   1        {
 112   2          writeDataTo1629(buf_display[0][i]);
 113   2          writeDataTo1629(buf_display[1][i]);
 114   2        }
 115   1        send_command(0x8C); //设置显示控制命令：打开显示，并设置为11/16.
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 3   

 116   1        TM1629_STB = 1;
 117   1      
 118   1        send_command_2(0x40); //设置数据命令:普通模式、地址自增1，写数据到显存
 119   1        send_command_2(0xc0); //设置显示地址命令：从00H开始
 120   1        for (i = 0; i<8; i++) //发送16字节的显存数据
 121   1        {
 122   2          writeDataTo1629_2(buf_display[2][i]);
 123   2          writeDataTo1629_2(buf_display[3][i]);
 124   2        }
 125   1        send_command_2(0x8C); //设置显示控制命令：打开显示，并设置为11/16.
 126   1        TM1629_STB2 = 1;
 127   1      
 128   1        send_command_3(0x40); //设置数据命令:普通模式、地址自增1，写数据到显存
 129   1        send_command_3(0xc0); //设置显示地址命令：从00H开始
 130   1        for (i = 0; i<8; i++) //发送16字节的显存数据
 131   1        {
 132   2          writeDataTo1629_3(buf_display[4][i]);
 133   2          writeDataTo1629_3(buf_display[5][i]);
 134   2        }
 135   1        send_command_3(0x8C); //设置显示控制命令：打开显示，并设置为11/16.
 136   1        TM1629_STB3 = 1;
 137   1      }
 138          
 139          void tm1629_init(void) //TM1629开机初始化函数
 140          {
 141   1        unsigned char i, j, k;    //k控制显示的具体数字，i和j控制buf_display的刷新
 142   1        for (k = 0; k<8; k++)
 143   1        {
 144   2          for (i = 0; i<6; i++)
 145   2          {
 146   3            for (j = 0; j<8; j++)
 147   3            {
 148   4              buf_display[i][j] = INIT_CODE[k];
 149   4            }
 150   3          }
 151   2          display();
 152   2          Tm1629_delay(30);
 153   2        }
 154   1      }
 155          
 156          
 157          void Tm1629_delay(unsigned char k) //延时函数
 158          {
 159   1        unsigned char i, j;
 160   1        for (; k>0; k--)
 161   1        {
 162   2          for (i = 255; i>0; i--)
 163   2          {
 164   3            for (j = 255; j>0; j--)
 165   3            {
 166   4              ;
 167   4      
 168   4            }
 169   3          }
 170   2        }
 171   1      }
 172          
 173          void tm1629_clear(void)//全部归零
 174          {
 175   1        unsigned char i, j;
 176   1        for (i = 0; i<6; i++)
 177   1        {
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 4   

 178   2          for (j = 0; j<8; j++)
 179   2          {
 180   3            buf_display[i][j] = 0x00;
 181   3          }
 182   2        }
 183   1      }
 184          
 185          void tm1629_await(void)
 186          {
 187   1        unsigned char i;  //k控制显示的具体数字，i和j控制buf_display的刷新
 188   1        unsigned char await_number_table_temp = 0;
 189   1        await_number_table_temp = return_await_number_table();
 190   1        if (await_number_table_temp == 1)
 191   1        {
 192   2          //GD5800_select_chapter(0x0008) ;
 193   2          tm1629_clear();
 194   2          i = await_time_table & 0x03;
 195   2          buf_display[0][i] = 0x40;
 196   2          display();
 197   2          set_await_number_table(0);
 198   2          await_time_table++;
 199   2          if (await_time_table == 4)
 200   2            await_time_table = 0;
 201   2        }
 202   1      }
 203          
 204          void Display_time(void)
 205          {
 206   1        tm1629_clear();
 207   1        Ds1302_Read_Time(); 
 208   1        buf_display[1][7] = CODE[2];        //年
 209   1        buf_display[1][6] = CODE[0];
 210   1        buf_display[1][5] = CODE[time_buf1[1] / 10];
 211   1        buf_display[1][4] = CODE[time_buf1[1] % 10];
 212   1      
 213   1        buf_display[1][3] = 0x40;          // -
 214   1        
 215   1        buf_display[1][2] = CODE[time_buf1[2] / 10]; //月
 216   1        buf_display[1][1] = CODE[time_buf1[2] % 10];
 217   1      
 218   1        buf_display[1][0] = 0x40;          // -
 219   1      
 220   1        buf_display[0][7] = CODE[time_buf1[3] / 10];
 221   1        buf_display[0][6] = CODE[time_buf1[3] % 10];//日
 222   1      
 223   1        buf_display[0][5] = CODE[time_buf1[7]];   //星期
 224   1      
 225   1        buf_display[0][3] = CODE[time_buf1[4] / 10]; //小时
 226   1        buf_display[0][2] = CODE[time_buf1[4] % 10];
 227   1        buf_display[0][1] = CODE[time_buf1[5] / 10]; //小时
 228   1        buf_display[0][0] = CODE[time_buf1[5] % 10];
 229   1      
 230   1        display();
 231   1      
 232   1      }
 233          
 234          void tm1629_f(unsigned char f_number) //第一行倒数二个显示F,倒数第一个显示f_number
 235          {
 236   1        tm1629_clear();
 237   1        buf_display[0][1] = CODE[0x0f];
 238   1        buf_display[0][0] = CODE[f_number];
 239   1        display();
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 5   

 240   1      }
 241          
 242          void tm1629_E(unsigned char f_number) //第一行倒数二个显示F,倒数第一个显示f_number
 243          {
 244   1        tm1629_clear();
 245   1        buf_display[0][1] = CODE[0x0E];
 246   1        buf_display[0][0] = CODE[f_number];
 247   1        display();
 248   1      }
 249          
 250          void Show_one_number(unsigned char f_number) //显示一个数字
 251          {
 252   1        tm1629_clear();
 253   1        //buf_display[0][1] = CODE[0x0E];
 254   1        buf_display[0][0] = CODE[f_number];
 255   1        display();
 256   1      }
 257          
 258          void Show_two_number(unsigned char f_number) //显示两个数字
 259          {
 260   1        tm1629_clear();
 261   1        buf_display[0][1] = CODE[f_number / 10];
 262   1        buf_display[0][0] = CODE[f_number % 10];
 263   1        display();
 264   1      }
 265          
 266          void Show_four_number(unsigned char* temp)
 267          {
 268   1        tm1629_clear();
 269   1        buf_display[0][3] = CODE[*(temp)];
 270   1        buf_display[0][2] = CODE[*(temp+1)];
 271   1        buf_display[0][1] = CODE[*(temp+2)];
 272   1        buf_display[0][0] = CODE[*(temp+3)];
 273   1        display();
 274   1      }
 275          
 276          void tm1629_load(void)
 277          {
 278   1        tm1629_clear();
 279   1        if (*(display_ram + 66) != 0)
 280   1          mcuram_to_displayram(buf_display[5] + 7, display_ram + 66);
 281   1        if (*(display_ram + 60) != 0)
 282   1          mcuram_to_displayram(buf_display[5] + 3, display_ram + 60);
 283   1        if (*(display_ram + 54) != 0)
 284   1          mcuram_to_displayram(buf_display[4] + 7, display_ram + 54);
 285   1        if (*(display_ram + 48) != 0)
 286   1          mcuram_to_displayram(buf_display[4] + 3, display_ram + 48);
 287   1        if (*(display_ram + 42) != 0)
 288   1          mcuram_to_displayram(buf_display[3] + 7, display_ram + 42);
 289   1        if (*(display_ram + 36) != 0)
 290   1          mcuram_to_displayram(buf_display[3] + 3, display_ram + 36);
 291   1        if (*(display_ram + 30) != 0)
 292   1          mcuram_to_displayram(buf_display[2] + 7, display_ram + 30);
 293   1        if (*(display_ram + 24) != 0)
 294   1          mcuram_to_displayram(buf_display[2] + 3, display_ram + 24);
 295   1        if (*(display_ram + 18) != 0)
 296   1          mcuram_to_displayram(buf_display[1] + 7, display_ram + 18);
 297   1        if (*(display_ram + 12) != 0)
 298   1          mcuram_to_displayram(buf_display[1] + 3, display_ram + 12);
 299   1        if (*(display_ram + 6) != 0)
 300   1          mcuram_to_displayram(buf_display[0] + 7, display_ram + 6);
 301   1        if (*(display_ram + 0) != 0)
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 6   

 302   1          mcuram_to_displayram(buf_display[0] + 3, display_ram);
 303   1      }
 304          
 305          void mcuram_to_displayram(unsigned char a[48], unsigned char* b)  //从RAM区域移到显存区域,顺带翻译成数码管
             -显示的码
 306          {
 307   1        /*
 308   1        A// 类别、区号、接收号
 309   1        B// 类别、区号、接收号
 310   1        */
 311   1        *(a) = CODE[*(b + 1)];
 312   1        *(a - 1) = CODE[*(b + 2)];
 313   1        *(a - 2) = CODE[*(b + 3)];
 314   1        *(a - 3) = CODE[*(b + 4)];
 315   1      }
 316          
 317          void decoder_temp_to_mcuram(unsigned char* a, unsigned char* index)//a为MCU缓存区   index为解码后取出的8字
             -节临时数组
 318          {
 319   1        *(a + 0) = *(index);
 320   1        *(a + 1) = *(index + 1);
 321   1        *(a + 2) = *(index + 2);
 322   1        *(a + 3) = *(index + 3);
 323   1        *(a + 4) = *(index + 4);
 324   1        *(a + 5) = *(index + 5);
 325   1      }
 326          
 327          void mcuram_to_mcuram_down(unsigned char* a) //a为MCURAM缓存区区   向下压一组数据
 328          {
 329   1        *(a + 6) = *(a);    //ram区元素下移6个
 330   1        *(a + 7) = *(a + 1);
 331   1        *(a + 8) = *(a + 2);
 332   1        *(a + 9) = *(a + 3);
 333   1        *(a + 10) = *(a + 4);
 334   1        *(a + 11) = *(a + 5);
 335   1      
 336   1      }
 337          
 338          void mcuram_to_mcuram_up(unsigned char* a) //a为MCURAM缓存区区   向上压一组数据
 339          {
 340   1        *(a) = *(a + 6);   //ram区元素上移6个
 341   1        *(a + 1) = *(a + 7);
 342   1        *(a + 2) = *(a + 8);
 343   1        *(a + 3) = *(a + 9);
 344   1        *(a + 4) = *(a + 10);
 345   1        *(a + 5) = *(a + 11);
 346   1      }
 347          
 348          void Logout(void)
 349          {
 350   1        unsigned char i;
 351   1        unsigned char Two_Menu_F3_E2_temp= 0;
 352   1        Two_Menu_F3_E2_temp = return_Two_Menu_F3_E2();
 353   1        /*销号处理函数*/
 354   1        for (i = 0; i<(Two_Menu_F3_E2_temp - 1); i++)
 355   1        {
 356   2          mcuram_to_mcuram_up(display_ram + i * 6);
 357   2        }
 358   1        for (i = (Two_Menu_F3_E2_temp - 1) * 6; i<Two_Menu_F3_E2_temp * 6; i++)
 359   1        {
 360   2          display_ram[i] = 0;
 361   2        }
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 7   

 362   1        tm1629_load();
 363   1        display();
 364   1        if (display_ram[0] == 0)
 365   1        {
 366   2          set_func_index(MENU_STANDBY);
 367   2        }
 368   1      }
 369          
 370          
 371          
 372          void fun0(void) //待机显示函数
 373          {
 374   1        //tm1629_await();
 375   1        Display_time();
 376   1      }
 377          
 378          void fun1(void) //一级菜单F0
 379          {
 380   1        tm1629_f(0x00);
 381   1      }
 382          
 383          void fun2(void) //一级菜单F1
 384          {
 385   1        tm1629_f(0x01);
 386   1      }
 387          
 388          void fun3(void) //一级菜单F2
 389          {
 390   1        tm1629_f(0x02);
 391   1      }
 392          
 393          void fun4(void) //一级菜单F3
 394          {
 395   1        tm1629_f(0x03);
 396   1      }
 397          
 398          void fun5(void) //一级菜单F4
 399          {
 400   1        tm1629_f(0x04);
 401   1      }
 402          
 403          void fun6(void) //一级菜单F5
 404          {
 405   1        tm1629_f(0x05);
 406   1      }
 407          
 408          void fun7(void) //一级菜单F6
 409          {
 410   1        tm1629_f(0x06);
 411   1      }
 412          
 413          void fun8(void) //一级菜单F7
 414          {
 415   1        tm1629_f(0x07);
 416   1      }
 417          
 418          void fun9(void) //一级菜单F8
 419          {
 420   1        tm1629_f(0x08);
 421   1      }
 422          
 423          void fun10(void) //一级菜单F9
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 8   

 424          {
 425   1        tm1629_f(0x09);
 426   1      }
 427          
 428          void fun11(void) //一级菜单FA
 429          {
 430   1        tm1629_f(0x0a);
 431   1      }
 432          
 433          void fun12(void) //一级菜单Fb
 434          {
 435   1        tm1629_f(0x0b);
 436   1      }
 437          
 438          void fun13(void) //一级菜单FC
 439          {
 440   1        tm1629_f(0x0c);
 441   1      }
 442          
 443          void fun14(void) //一级菜单Fd
 444          {
 445   1        tm1629_f(0x0d);
 446   1      }
 447          
 448          void fun15(void) //设置年份
 449          {
 450   1        if (return_await_number_table() == 1)
 451   1        {
 452   2          Display_time();
 453   2          set_await_number_table(2);
 454   2        }
 455   1        if (return_await_number_table() == 3)
 456   1        {
 457   2          buf_display[1][7] = 0;
 458   2          buf_display[1][6] = 0;
 459   2          buf_display[1][5] = 0;
 460   2          buf_display[1][4] = 0;
 461   2          display();
 462   2          set_await_number_table(0);
 463   2        }
 464   1        Ds1302_Write_Time();
 465   1      }
 466          
 467          void fun16(void) //设置月份
 468          {
 469   1        if (return_await_number_table() == 1)
 470   1        {
 471   2          Display_time();
 472   2          set_await_number_table(2);
 473   2        }
 474   1        if (return_await_number_table() == 3)
 475   1        {
 476   2          buf_display[1][2] = 0;
 477   2          buf_display[1][1] = 0;
 478   2          display();
 479   2          set_await_number_table(0);
 480   2        }
 481   1        Ds1302_Write_Time();
 482   1      }
 483          
 484          void fun17(void) //设置日期
 485          {
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 9   

 486   1        if (return_await_number_table() == 1)
 487   1        {
 488   2          Display_time();
 489   2          set_await_number_table(2);
 490   2        }
 491   1        if (return_await_number_table() == 3)
 492   1        {
 493   2          buf_display[0][7] = 0;
 494   2          buf_display[0][6] = 0;
 495   2          display();
 496   2          set_await_number_table(0);
 497   2        }
 498   1        Ds1302_Write_Time();
 499   1      }
 500          
 501          void fun18(void) //设置星期
 502          {
 503   1        if (return_await_number_table() == 1)
 504   1        {
 505   2          Display_time();
 506   2          set_await_number_table(2);
 507   2        }
 508   1        if (return_await_number_table() == 3)
 509   1        {
 510   2          buf_display[0][5] = 0;
 511   2          display();
 512   2          set_await_number_table(0);
 513   2        }
 514   1        Ds1302_Write_Time();
 515   1      }
 516          
 517          void fun19(void) //设置小时
 518          {
 519   1        if (return_await_number_table() == 1)
 520   1        {
 521   2          Display_time();
 522   2          set_await_number_table(2);
 523   2        }
 524   1        if (return_await_number_table() == 3)
 525   1        {
 526   2          buf_display[0][3] = 0;
 527   2          buf_display[0][2] = 0;
 528   2          display();
 529   2          set_await_number_table(0);
 530   2        }
 531   1        Ds1302_Write_Time();
 532   1      }
 533          
 534          void fun20(void) //设置分钟
 535          {
 536   1        if (return_await_number_table() == 1)
 537   1        {
 538   2          Display_time();
 539   2          set_await_number_table(2);
 540   2        }
 541   1        if (return_await_number_table() == 3)
 542   1        {
 543   2          buf_display[0][1] = 0;
 544   2          buf_display[0][0] = 0;
 545   2          display();
 546   2          set_await_number_table(0);
 547   2        }
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 10  

 548   1        Ds1302_Write_Time();
 549   1      }
 550          
 551          void fun21(void) //二级菜单F1-E1
 552          {
 553   1        tm1629_E(0x01);
 554   1        Two_Menu_F1_E1[0] = 0;
 555   1        Two_Menu_F1_E1[1] = 0;
 556   1        Two_Menu_F1_E1[2] = 0;
 557   1        Two_Menu_F1_E1[3] = 1;
 558   1      }
 559          
 560          void fun22(void) //二级菜单F1-E2
 561          {
 562   1        tm1629_E(0x02);
 563   1        Two_Menu_F1_E2[0] = 0;
 564   1        Two_Menu_F1_E2[1] = 0;
 565   1        Two_Menu_F1_E2[2] = 0;
 566   1        Two_Menu_F1_E2[3] = 1;
 567   1      }
 568          
 569          void fun23(void) //二级菜单F1-E3
 570          {
 571   1        tm1629_E(0x03);
 572   1        Two_Menu_F1_E3[0] = 0;
 573   1        Two_Menu_F1_E3[1] = 0;
 574   1        Two_Menu_F1_E3[2] = 0;
 575   1        Two_Menu_F1_E3[3] = 1;
 576   1      }
 577          
 578          void fun24(void) //二级菜单F1-E4
 579          {
 580   1        tm1629_E(0x04);
 581   1        Two_Menu_F1_E4[0] = 0;
 582   1        Two_Menu_F1_E4[1] = 0;
 583   1        Two_Menu_F1_E4[2] = 0;
 584   1        Two_Menu_F1_E4[3] = 1;
 585   1      }
 586          
 587          void fun25(void) //二级菜单F2-E1
 588          {
 589   1        tm1629_E(0x01);
 590   1        Two_Menu_F2_E1[0] = 0;
 591   1        Two_Menu_F2_E1[1] = 0;
 592   1        Two_Menu_F2_E1[2] = 0;
 593   1        Two_Menu_F2_E1[3] = 1;
 594   1      }
 595          
 596          void fun26(void) //二级菜单F2-E2
 597          {
 598   1        tm1629_E(0x02);
 599   1        Two_Menu_F2_E2[0] = 0;
 600   1        Two_Menu_F2_E2[1] = 0;
 601   1        Two_Menu_F2_E2[2] = 0;
 602   1        Two_Menu_F2_E2[3] = 1;
 603   1      }
 604          
 605          void fun27(void) //二级菜单F2-E3
 606          {
 607   1        tm1629_E(0x03);
 608   1        Two_Menu_F2_E3[0] = 0;
 609   1        Two_Menu_F2_E3[1] = 0;
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 11  

 610   1        Two_Menu_F2_E3[2] = 0;
 611   1        Two_Menu_F2_E3[3] = 1;
 612   1      }
 613          
 614          void fun28(void) //二级菜单F2-E4
 615          {
 616   1        tm1629_E(0x04);
 617   1        Two_Menu_F2_E4[0] = 0;
 618   1        Two_Menu_F2_E4[1] = 0;
 619   1        Two_Menu_F2_E4[2] = 0;
 620   1        Two_Menu_F2_E4[3] = 1;
 621   1      }
 622          
 623          void fun29(void) //二级菜单F3-E1
 624          {
 625   1        tm1629_E(0x01);
 626   1      }
 627          
 628          void fun30(void) //二级菜单F3-E2
 629          {
 630   1        tm1629_E(0x02);
 631   1      }
 632          
 633          void fun31(void) //二级菜单F4
 634          {
 635   1        unsigned char temp = 0;
 636   1        temp = return_Two_Menu_F4_E1();
 637   1        Show_two_number(temp);
 638   1      }
 639          
 640          void fun32(void) //二级菜单F5
 641          {
 642   1        unsigned char temp = 0;
 643   1        temp = return_Two_Menu_F5_E1();
 644   1        Show_two_number(temp);
 645   1      }
 646          
 647          void fun33(void) //二级菜单F6-E1
 648          {
 649   1        tm1629_E(0x01);
 650   1      }
 651          
 652          void fun34(void) //二级菜单F6-E2
 653          {
 654   1        tm1629_E(0x02);
 655   1      }
 656          
 657          void fun35(void) //二级菜单F6-E3
 658          {
 659   1        tm1629_E(0x03);
 660   1      }
 661          
 662          void fun36(void) //二级菜单F6-E4
 663          {
 664   1        tm1629_E(0x04);
 665   1      }
 666          
 667          void fun37(void) //二级菜单F6-E5
 668          {
 669   1        tm1629_E(0x05);
 670   1      }
 671          
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 12  

 672          void fun38(void) //二级菜单F7-E1
 673          {
 674   1        tm1629_E(0x01);
 675   1      }
 676          
 677          void fun39(void) //二级菜单F7-E2
 678          {
 679   1        tm1629_E(0x02);
 680   1      }
 681          
 682          void fun40(void) //二级菜单F7-E3
 683          {
 684   1        tm1629_E(0x03);
 685   1      }
 686          
 687          void fun41(void) //二级菜单F7-E4
 688          {
 689   1        tm1629_E(0x04);
 690   1      }
 691          
 692          void fun42(void) //二级菜单F8-E1
 693          {
 694   1        tm1629_E(0x01);
 695   1      }
 696          
 697          void fun43(void) //二级菜单F8-E2
 698          {
 699   1        tm1629_E(0x02);
 700   1      }
 701          
 702          void fun44(void) //二级菜单F9-E1
 703          {
 704   1        tm1629_E(0x01);
 705   1      }
 706          
 707          void fun45(void) //二级菜单F9-E2
 708          {
 709   1        tm1629_E(0x02);
 710   1      }
 711          
 712          void fun46(void) //二级菜单FA
 713          {
 714   1        tm1629_f(0x0f);
 715   1      }
 716          
 717          
 718          void fun47(void) //二级菜单Fb
 719          {
 720   1        tm1629_f(0x0f);
 721   1      }
 722          
 723          void fun48(void) //二级菜单FC
 724          {
 725   1        tm1629_f(0x0f);
 726   1      }
 727          
 728          void fun49(void) //二级菜单Fd
 729          {
 730   1        tm1629_f(0x0f);
 731   1      }
 732          
 733          void fun50(void) //F1_E1 千位闪烁
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 13  

 734          {
 735   1        if (return_await_number_table() == 1)
 736   1        {
 737   2          Show_four_number(Two_Menu_F1_E1);
 738   2          set_await_number_table(2);
 739   2        }
 740   1        if (return_await_number_table() == 3)
 741   1        {
 742   2          buf_display[0][3] = 0;
 743   2          display();
 744   2          set_await_number_table(0);
 745   2        }
 746   1      }
 747          
 748          void fun51(void) //F1_E1 百位闪烁
 749          {
 750   1        if (return_await_number_table() == 1)
 751   1        {
 752   2          Show_four_number(Two_Menu_F1_E1);
 753   2          set_await_number_table(2);
 754   2        }
 755   1        if (return_await_number_table() == 3)
 756   1        {
 757   2          buf_display[0][2] = 0;
 758   2          display();
 759   2          set_await_number_table(0);
 760   2        }
 761   1      }
 762          
 763          void fun52(void)  //F1_E1 十位闪烁
 764          {
 765   1        if (return_await_number_table() == 1)
 766   1        {
 767   2          Show_four_number(Two_Menu_F1_E1);
 768   2          set_await_number_table(2);
 769   2        }
 770   1        if (return_await_number_table() == 3)
 771   1        {
 772   2          buf_display[0][1] = 0;
 773   2          display();
 774   2          set_await_number_table(0);
 775   2        }
 776   1      }
 777          
 778          void fun53(void) //F1_E1 个位闪烁
 779          {
 780   1        if (return_await_number_table() == 1)
 781   1        {
 782   2          Show_four_number(Two_Menu_F1_E1);
 783   2          set_await_number_table(2);
 784   2        }
 785   1        if (return_await_number_table() == 3)
 786   1        {
 787   2          buf_display[0][0] = 0;
 788   2          display();
 789   2          set_await_number_table(0);
 790   2        }
 791   1      }
 792          
 793          void fun54(void) //F1_E2 千位闪烁
 794          {
 795   1        if (return_await_number_table() == 1)
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 14  

 796   1        {
 797   2          Show_four_number(Two_Menu_F1_E2);
 798   2          set_await_number_table(2);
 799   2        }
 800   1        if (return_await_number_table() == 3)
 801   1        {
 802   2          buf_display[0][3] = 0;
 803   2          display();
 804   2          set_await_number_table(0);
 805   2        }
 806   1      }
 807          
 808          void fun55(void) //F1_E2 百位闪烁
 809          {
 810   1        if (return_await_number_table() == 1)
 811   1        {
 812   2          Show_four_number(Two_Menu_F1_E2);
 813   2          set_await_number_table(2);
 814   2        }
 815   1        if (return_await_number_table() == 3)
 816   1        {
 817   2          buf_display[0][2] = 0;
 818   2          display();
 819   2          set_await_number_table(0);
 820   2        }
 821   1      }
 822          
 823          void fun56(void) //F1_E2 十位闪烁
 824          {
 825   1        if (return_await_number_table() == 1)
 826   1        {
 827   2          Show_four_number(Two_Menu_F1_E2);
 828   2          set_await_number_table(2);
 829   2        }
 830   1        if (return_await_number_table() == 3)
 831   1        {
 832   2          buf_display[0][1] = 0;
 833   2          display();
 834   2          set_await_number_table(0);
 835   2        }
 836   1      }
 837          
 838          void fun57(void) //F1_E2 个位闪烁
 839          {
 840   1        if (return_await_number_table() == 1)
 841   1        {
 842   2          Show_four_number(Two_Menu_F1_E2);
 843   2          set_await_number_table(2);
 844   2        }
 845   1        if (return_await_number_table() == 3)
 846   1        {
 847   2          buf_display[0][0] = 0;
 848   2          display();
 849   2          set_await_number_table(0);
 850   2        }
 851   1      }
 852          
 853          void fun58(void) //F1_E3 千位闪烁
 854          {
 855   1        if (return_await_number_table() == 1)
 856   1        {
 857   2          Show_four_number(Two_Menu_F1_E3);
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 15  

 858   2          set_await_number_table(2);
 859   2        }
 860   1        if (return_await_number_table() == 3)
 861   1        {
 862   2          buf_display[0][3] = 0;
 863   2          display();
 864   2          set_await_number_table(0);
 865   2        }
 866   1      }
 867          
 868          void fun59(void) //F1_E3 百位闪烁
 869          {
 870   1        if (return_await_number_table() == 1)
 871   1        {
 872   2          Show_four_number(Two_Menu_F1_E3);
 873   2          set_await_number_table(2);
 874   2        }
 875   1        if (return_await_number_table() == 3)
 876   1        {
 877   2          buf_display[0][2] = 0;
 878   2          display();
 879   2          set_await_number_table(0);
 880   2        }
 881   1      }
 882          
 883          void fun60(void) //F1_E3 十位闪烁
 884          {
 885   1        if (return_await_number_table() == 1)
 886   1        {
 887   2          Show_four_number(Two_Menu_F1_E3);
 888   2          set_await_number_table(2);
 889   2        }
 890   1        if (return_await_number_table() == 3)
 891   1        {
 892   2          buf_display[0][1] = 0;
 893   2          display();
 894   2          set_await_number_table(0);
 895   2        }
 896   1      }
 897          
 898          void fun61(void) //F1_E3 个位闪烁
 899          {
 900   1        if (return_await_number_table() == 1)
 901   1        {
 902   2          Show_four_number(Two_Menu_F1_E3);
 903   2          set_await_number_table(2);
 904   2        }
 905   1        if (return_await_number_table() == 3)
 906   1        {
 907   2          buf_display[0][0] = 0;
 908   2          display();
 909   2          set_await_number_table(0);
 910   2        }
 911   1      }
 912          
 913          void fun62(void) //F1_E4 千位闪烁
 914          {
 915   1        if (return_await_number_table() == 1)
 916   1        {
 917   2          Show_four_number(Two_Menu_F1_E4);
 918   2          set_await_number_table(2);
 919   2        }
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 16  

 920   1        if (return_await_number_table() == 3)
 921   1        {
 922   2          buf_display[0][3] = 0;
 923   2          display();
 924   2          set_await_number_table(0);
 925   2        }
 926   1      }
 927          
 928          void fun63(void) //F1_E4 百位闪烁
 929          {
 930   1        if (return_await_number_table() == 1)
 931   1        {
 932   2          Show_four_number(Two_Menu_F1_E4);
 933   2          set_await_number_table(2);
 934   2        }
 935   1        if (return_await_number_table() == 3)
 936   1        {
 937   2          buf_display[0][2] = 0;
 938   2          display();
 939   2          set_await_number_table(0);
 940   2        }
 941   1      }
 942          
 943          void fun64(void) //F1_E4 十位闪烁
 944          {
 945   1        if (return_await_number_table() == 1)
 946   1        {
 947   2          Show_four_number(Two_Menu_F1_E4);
 948   2          set_await_number_table(2);
 949   2        }
 950   1        if (return_await_number_table() == 3)
 951   1        {
 952   2          buf_display[0][1] = 0;
 953   2          display();
 954   2          set_await_number_table(0);
 955   2        }
 956   1      }
 957          
 958          void fun65(void) //F1_E4 个位闪烁
 959          {
 960   1        if (return_await_number_table() == 1)
 961   1        {
 962   2          Show_four_number(Two_Menu_F1_E4);
 963   2          set_await_number_table(2);
 964   2        }
 965   1        if (return_await_number_table() == 3)
 966   1        {
 967   2          buf_display[0][0] = 0;
 968   2          display();
 969   2          set_await_number_table(0);
 970   2        }
 971   1      }
 972          
 973          void fun66(void) //F2_E1 千位闪烁
 974          {
 975   1        if (return_await_number_table() == 1)
 976   1        {
 977   2          Show_four_number(Two_Menu_F2_E1);
 978   2          set_await_number_table(2);
 979   2        }
 980   1        if (return_await_number_table() == 3)
 981   1        {
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 17  

 982   2          buf_display[0][3] = 0;
 983   2          display();
 984   2          set_await_number_table(0);
 985   2        }
 986   1      }
 987          
 988          void fun67(void) //F2_E1 百位闪烁
 989          {
 990   1        if (return_await_number_table() == 1)
 991   1        {
 992   2          Show_four_number(Two_Menu_F2_E1);
 993   2          set_await_number_table(2);
 994   2        }
 995   1        if (return_await_number_table() == 3)
 996   1        {
 997   2          buf_display[0][2] = 0;
 998   2          display();
 999   2          set_await_number_table(0);
1000   2        }
1001   1      }
1002          
1003          void fun68(void) //F2_E1 十位闪烁
1004          {
1005   1        if (return_await_number_table() == 1)
1006   1        {
1007   2          Show_four_number(Two_Menu_F2_E1);
1008   2          set_await_number_table(2);
1009   2        }
1010   1        if (return_await_number_table() == 3)
1011   1        {
1012   2          buf_display[0][1] = 0;
1013   2          display();
1014   2          set_await_number_table(0);
1015   2        }
1016   1      }
1017          
1018          void fun69(void) //F2_E1 个位闪烁
1019          {
1020   1        if (return_await_number_table() == 1)
1021   1        {
1022   2          Show_four_number(Two_Menu_F2_E1);
1023   2          set_await_number_table(2);
1024   2        }
1025   1        if (return_await_number_table() == 3)
1026   1        {
1027   2          buf_display[0][0] = 0;
1028   2          display();
1029   2          set_await_number_table(0);
1030   2        }
1031   1      }
1032          
1033          void fun70(void) //F2_E2 千位闪烁
1034          {
1035   1        if (return_await_number_table() == 1)
1036   1        {
1037   2          Show_four_number(Two_Menu_F2_E2);
1038   2          set_await_number_table(2);
1039   2        }
1040   1        if (return_await_number_table() == 3)
1041   1        {
1042   2          buf_display[0][3] = 0;
1043   2          display();
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 18  

1044   2          set_await_number_table(0);
1045   2        }
1046   1      }
1047          
1048          void fun71(void) //F2_E2 百位闪烁
1049          {
1050   1        if (return_await_number_table() == 1)
1051   1        {
1052   2          Show_four_number(Two_Menu_F2_E2);
1053   2          set_await_number_table(2);
1054   2        }
1055   1        if (return_await_number_table() == 3)
1056   1        {
1057   2          buf_display[0][2] = 0;
1058   2          display();
1059   2          set_await_number_table(0);
1060   2        }
1061   1      }
1062          
1063          void fun72(void) //F2_E2 十位闪烁
1064          {
1065   1        if (return_await_number_table() == 1)
1066   1        {
1067   2          Show_four_number(Two_Menu_F2_E2);
1068   2          set_await_number_table(2);
1069   2        }
1070   1        if (return_await_number_table() == 3)
1071   1        {
1072   2          buf_display[0][1] = 0;
1073   2          display();
1074   2          set_await_number_table(0);
1075   2        }
1076   1      }
1077          
1078          void fun73(void) //F2_E2 个位闪烁
1079          {
1080   1        if (return_await_number_table() == 1)
1081   1        {
1082   2          Show_four_number(Two_Menu_F2_E2);
1083   2          set_await_number_table(2);
1084   2        }
1085   1        if (return_await_number_table() == 3)
1086   1        {
1087   2          buf_display[0][0] = 0;
1088   2          display();
1089   2          set_await_number_table(0);
1090   2        }
1091   1      }
1092          
1093          void fun74(void) //F2_E3 千位闪烁
1094          {
1095   1        if (return_await_number_table() == 1)
1096   1        {
1097   2          Show_four_number(Two_Menu_F2_E3);
1098   2          set_await_number_table(2);
1099   2        }
1100   1        if (return_await_number_table() == 3)
1101   1        {
1102   2          buf_display[0][3] = 0;
1103   2          display();
1104   2          set_await_number_table(0);
1105   2        }
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 19  

1106   1      }
1107          
1108          void fun75(void) //F2_E3 百位闪烁
1109          {
1110   1        if (return_await_number_table() == 1)
1111   1        {
1112   2          Show_four_number(Two_Menu_F2_E3);
1113   2          set_await_number_table(2);
1114   2        }
1115   1        if (return_await_number_table() == 3)
1116   1        {
1117   2          buf_display[0][2] = 0;
1118   2          display();
1119   2          set_await_number_table(0);
1120   2        }
1121   1      }
1122          
1123          void fun76(void) //F2_E3 十位闪烁
1124          {
1125   1        if (return_await_number_table() == 1)
1126   1        {
1127   2          Show_four_number(Two_Menu_F2_E3);
1128   2          set_await_number_table(2);
1129   2        }
1130   1        if (return_await_number_table() == 3)
1131   1        {
1132   2          buf_display[0][1] = 0;
1133   2          display();
1134   2          set_await_number_table(0);
1135   2        }
1136   1      }
1137          
1138          void fun77(void) //F2_E3 个位闪烁
1139          {
1140   1        if (return_await_number_table() == 1)
1141   1        {
1142   2          Show_four_number(Two_Menu_F2_E3);
1143   2          set_await_number_table(2);
1144   2        }
1145   1        if (return_await_number_table() == 3)
1146   1        {
1147   2          buf_display[0][0] = 0;
1148   2          display();
1149   2          set_await_number_table(0);
1150   2        }
1151   1      }
1152          
1153          void fun78(void) //F2_E4 千位闪烁
1154          {
1155   1        if (return_await_number_table() == 1)
1156   1        {
1157   2          Show_four_number(Two_Menu_F2_E4);
1158   2          set_await_number_table(2);
1159   2        }
1160   1        if (return_await_number_table() == 3)
1161   1        {
1162   2          buf_display[0][3] = 0;
1163   2          display();
1164   2          set_await_number_table(0);
1165   2        }
1166   1      }
1167          
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 20  

1168          void fun79(void) //F2_E4 百位闪烁
1169          {
1170   1        if (return_await_number_table() == 1)
1171   1        {
1172   2          Show_four_number(Two_Menu_F2_E4);
1173   2          set_await_number_table(2);
1174   2        }
1175   1        if (return_await_number_table() == 3)
1176   1        {
1177   2          buf_display[0][2] = 0;
1178   2          display();
1179   2          set_await_number_table(0);
1180   2        }
1181   1      }
1182          
1183          void fun80(void) //F2_E4 十位闪烁
1184          {
1185   1        if (return_await_number_table() == 1)
1186   1        {
1187   2          Show_four_number(Two_Menu_F2_E4);
1188   2          set_await_number_table(2);
1189   2        }
1190   1        if (return_await_number_table() == 3)
1191   1        {
1192   2          buf_display[0][1] = 0;
1193   2          display();
1194   2          set_await_number_table(0);
1195   2        }
1196   1      }
1197          
1198          void fun81(void) //F2_E4 个位闪烁
1199          {
1200   1        if (return_await_number_table() == 1)
1201   1        {
1202   2          Show_four_number(Two_Menu_F2_E4);
1203   2          set_await_number_table(2);
1204   2        }
1205   1        if (return_await_number_table() == 3)
1206   1        {
1207   2          buf_display[0][0] = 0;
1208   2          display();
1209   2          set_await_number_table(0);
1210   2        }
1211   1      }
1212          
1213          void fun82(void) //显示即时显示 还是循环显示
1214          {
1215   1        unsigned char temp=0;
1216   1        temp = return_Two_Menu_F3_E1();
1217   1        Show_one_number(temp);
1218   1      }
1219          
1220          void fun83(void) //队列存储个数
1221          {
1222   1        unsigned char temp = 0;
1223   1        temp = return_Two_Menu_F3_E2();
1224   1        Show_two_number(temp);
1225   1      }
1226          
1227          void fun84(void) //F6_E1语音选择
1228          {
1229   1        unsigned char temp = 0;
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 21  

1230   1        temp = return_Two_Menu_F6_E1();
1231   1        Show_one_number(temp);
1232   1      }
1233          
1234          void fun85(void) //F6_E2语音报读次数
1235          {
1236   1        unsigned char temp = 0;
1237   1        temp = return_Two_Menu_F6_E2();
1238   1        Show_one_number(temp);
1239   1      }
1240          
1241          void fun86(void) //F6_E3循环时候是否报读
1242          {
1243   1        unsigned char temp = 0;
1244   1        temp = return_Two_Menu_F6_E3();
1245   1        Show_one_number(temp);
1246   1      }
1247          
1248          void fun87(void) //F6_E4音量大小调整
1249          {
1250   1        unsigned char temp = 0;
1251   1        temp = return_Two_Menu_F6_E4();
1252   1        Show_one_number(temp);
1253   1      }
1254          
1255          void fun88(void) //F6_E5屏幕亮度调整
1256          {
1257   1        unsigned char temp = 0;
1258   1        temp = return_Two_Menu_F6_E5();
1259   1        Show_one_number(temp);
1260   1      }
1261          
1262          void fun89(void) //F7_E1 999*9
1263          {
1264   1        unsigned char temp = 0;
1265   1        temp = return_Two_Menu_F7_E1();
1266   1        Show_one_number(temp);
1267   1      }
1268          
1269          void fun90(void) //F7_E2 9999*9
1270          {
1271   1        unsigned char temp = 0;
1272   1        temp = return_Two_Menu_F7_E2();
1273   1        Show_one_number(temp);
1274   1      }
1275          
1276          void fun91(void) //F7_E3 999*99
1277          {
1278   1        unsigned char temp = 0;
1279   1        temp = return_Two_Menu_F7_E3();
1280   1        Show_one_number(temp);
1281   1      }
1282          
1283          void fun92(void) //F7_E4 9999*99
1284          {
1285   1        unsigned char temp = 0;
1286   1        temp = return_Two_Menu_F7_E4();
1287   1        Show_one_number(temp);
1288   1      }
1289          
1290          void fun93(void) //F8_E1单键位跟多键位切换
1291          {
C51 COMPILER V9.00   TM1629                                                                09/18/2015 14:45:22 PAGE 22  

1292   1        unsigned char temp = 0;
1293   1        temp = return_Two_Menu_F8_E1();
1294   1        Show_one_number(temp);
1295   1      }
1296          
1297          void fun94(void) //F8_E2键位设置
1298          {
1299   1        unsigned char temp = 0;
1300   1        temp = return_Two_Menu_F8_E2();
1301   1        Show_two_number(temp);
1302   1      }
1303          
1304          void fun95(void) //解码菜单
1305          {
1306   1        tm1629_load();
1307   1        display();;
1308   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3954    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    320      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
