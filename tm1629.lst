C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TM1629
OBJECT MODULE PLACED IN tm1629.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\tm1629.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(
                    -.\tm1629.lst) TABS(2) OBJECT(tm1629.obj)

line level    source

   1          #include "tm1629.h"
   2          #include "timer.h"
   3          #include "usart.h"
   4          #include "ds1302.h"
   5          #include "key.h"
   6          #include "menu.h"
   7          
   8          unsigned char const CODE[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x3
             -9, 0x5E, 0x79, 0x71, 0x76, 0x38, 0x5c, 0x73, 0x3e };//0-9 abcdef 显示器码数组
   9          unsigned char const INIT_CODE[] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };//逐段点亮数码管数组
  10          unsigned char const SHANGSHUO[] = { 0x40, 0x00 }; // 点亮数码管中间段以及灭
  11          unsigned char buf_display[6][8] = { 0 }; //3个TM1629显存数组
  12          unsigned char display_ram[240] = { 0 }; //程序运行时记录显示数据的内存 
  13          unsigned char await_time_table= 0 ;//用于记录待机显示横杠数码管次数 
  14          
  15          void writeDataTo1629(unsigned char p) //写数据给第一个TM1629
  16          {
  17   1        unsigned int i;
  18   1        TM1629_STB = 0;
  19   1        for (i = 0; i<8; i++)
  20   1        {
  21   2          TM1629_CLK = 0;
  22   2          if (p & 0x01)
  23   2            TM1629_DIO = 1;
  24   2          else
  25   2            TM1629_DIO = 0;
  26   2          _nop_();
  27   2          _nop_();
  28   2          _nop_();
  29   2          _nop_();
  30   2          TM1629_CLK = 1;
  31   2          p = p >> 1;
  32   2        }
  33   1        TM1629_CLK = 0;
  34   1        TM1629_DIO = 0;
  35   1      }
  36          
  37          void writeDataTo1629_2(unsigned char p) //写数据给第二个TM1629
  38          {
  39   1        unsigned int i;
  40   1        TM1629_STB2 = 0;
  41   1        for (i = 0; i<8; i++)
  42   1        {
  43   2          TM1629_CLK = 0;
  44   2          if (p & 0x01)
  45   2            TM1629_DIO = 1;
  46   2          else
  47   2            TM1629_DIO = 0;
  48   2          _nop_();
  49   2          _nop_();
  50   2          _nop_();
  51   2          _nop_();
  52   2          TM1629_CLK = 1;
  53   2          p = p >> 1;
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 2   

  54   2        }
  55   1        TM1629_CLK = 0;
  56   1        TM1629_DIO = 0;
  57   1      }
  58          
  59          void writeDataTo1629_3(unsigned char p) //写数据给第三个TM1629
  60          {
  61   1        unsigned int i;
  62   1        TM1629_STB3 = 0;
  63   1        for (i = 0; i<8; i++)
  64   1        {
  65   2          TM1629_CLK = 0;
  66   2          if (p & 0x01)
  67   2            TM1629_DIO = 1;
  68   2          else
  69   2            TM1629_DIO = 0;
  70   2          _nop_();
  71   2          _nop_();
  72   2          _nop_();
  73   2          _nop_();
  74   2          TM1629_CLK = 1;
  75   2          p = p >> 1;
  76   2        }
  77   1        TM1629_CLK = 0;
  78   1        TM1629_DIO = 0;
  79   1      }
  80          
  81          void send_command(unsigned char word) //写命令给第一个TM1629
  82          {
  83   1        TM1629_STB = 1;
  84   1        nop;
  85   1        TM1629_STB = 0;
  86   1        writeDataTo1629(word);
  87   1      }
  88          
  89          void send_command_2(unsigned char word) //写命令给第二个TM1629
  90          {
  91   1        TM1629_STB2 = 1;
  92   1        nop;
  93   1        TM1629_STB2 = 0;
  94   1        writeDataTo1629_2(word);
  95   1      }
  96          
  97          void send_command_3(unsigned char word) //写命令给第三个TM1629
  98          {
  99   1        TM1629_STB3 = 1;
 100   1        nop;
 101   1        TM1629_STB3 = 0;
 102   1        writeDataTo1629_3(word);
 103   1      }
 104          
 105          void display(void) //3个TM1629显示函数
 106          {
 107   1        unsigned char i,temp;
 108   1        temp = return_Two_Menu_F6_E5();
 109   1        send_command(0x40); //设置数据命令:普通模式、地址自增1，写数据到显存
 110   1        send_command(0xc0); //设置显示地址命令：从00H开始
 111   1        for (i = 0; i<8; i++) //发送16字节的显存数据
 112   1        {
 113   2          writeDataTo1629(buf_display[0][i]);
 114   2          writeDataTo1629(buf_display[1][i]);
 115   2        }
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 3   

 116   1        send_command(0x88 + temp);  //设置显示控制命令：打开显示，并设置为11/16.
 117   1        TM1629_STB = 1;
 118   1      
 119   1        send_command_2(0x40); //设置数据命令:普通模式、地址自增1，写数据到显存
 120   1        send_command_2(0xc0); //设置显示地址命令：从00H开始
 121   1        for (i = 0; i<8; i++) //发送16字节的显存数据
 122   1        {
 123   2          writeDataTo1629_2(buf_display[2][i]);
 124   2          writeDataTo1629_2(buf_display[3][i]);
 125   2        }
 126   1        send_command_2(0x88 + temp);  //设置显示控制命令：打开显示，并设置为11/16.
 127   1        TM1629_STB2 = 1;
 128   1      
 129   1        send_command_3(0x40); //设置数据命令:普通模式、地址自增1，写数据到显存
 130   1        send_command_3(0xc0); //设置显示地址命令：从00H开始
 131   1        for (i = 0; i<8; i++) //发送16字节的显存数据
 132   1        {
 133   2          writeDataTo1629_3(buf_display[4][i]);
 134   2          writeDataTo1629_3(buf_display[5][i]);
 135   2        }
 136   1        send_command_3(0x88 + temp);  //设置显示控制命令：打开显示，并设置为11/16.
 137   1        TM1629_STB3 = 1;
 138   1      }
 139          
 140          
 141          void tm1629_init(void) //TM1629开机初始化函数
 142          {
 143   1        unsigned char i, j, k;    //k控制显示的具体数字，i和j控制buf_display的刷新
 144   1        for (k = 0; k<8; k++)
 145   1        {
 146   2          for (i = 0; i<6; i++)
 147   2          {
 148   3            for (j = 0; j<8; j++)
 149   3            {
 150   4              buf_display[i][j] = INIT_CODE[k];
 151   4            }
 152   3          }
 153   2          display();
 154   2          Tm1629_delay(30);
 155   2        }
 156   1      }
 157          
 158          
 159          void Tm1629_delay(unsigned char k) //延时函数
 160          {
 161   1        unsigned char i, j;
 162   1        for (; k>0; k--)
 163   1        {
 164   2          for (i = 255; i>0; i--)
 165   2          {
 166   3            for (j = 255; j>0; j--)
 167   3            {
 168   4              ;
 169   4      
 170   4            }
 171   3          }
 172   2        }
 173   1      }
 174          
 175          void tm1629_clear(void)//全部归零
 176          {
 177   1        unsigned char i, j;
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 4   

 178   1        for (i = 0; i<6; i++)
 179   1        {
 180   2          for (j = 0; j<8; j++)
 181   2          {
 182   3            buf_display[i][j] = 0x00;
 183   3          }
 184   2        }
 185   1      }
 186          
 187          void tm1629_await(void)
 188          {
 189   1        unsigned char i;  //k控制显示的具体数字，i和j控制buf_display的刷新
 190   1        unsigned char await_number_table_temp = 0;
 191   1        await_number_table_temp = return_await_number_table();
 192   1        if (await_number_table_temp == 1)
 193   1        {
 194   2          //GD5800_select_chapter(0x0008) ;
 195   2          tm1629_clear();
 196   2          i = await_time_table & 0x03;
 197   2          buf_display[0][i] = 0x40;
 198   2          display();
 199   2          set_await_number_table(0);
 200   2          await_time_table++;
 201   2          if (await_time_table == 4)
 202   2            await_time_table = 0;
 203   2        }
 204   1      }
 205          
 206          void Display_time(void)
 207          {
 208   1        tm1629_clear();
 209   1        Ds1302_Read_Time(); 
 210   1        buf_display[1][7] = CODE[2];        //年
 211   1        buf_display[1][6] = CODE[0];
 212   1        buf_display[1][5] = CODE[time_buf1[1] / 10];
 213   1        buf_display[1][4] = CODE[time_buf1[1] % 10];
 214   1      
 215   1        buf_display[1][3] = 0x40;          // -
 216   1        
 217   1        buf_display[1][2] = CODE[time_buf1[2] / 10]; //月
 218   1        buf_display[1][1] = CODE[time_buf1[2] % 10];
 219   1      
 220   1        buf_display[1][0] = 0x40;          // -
 221   1      
 222   1        buf_display[0][7] = CODE[time_buf1[3] / 10];
 223   1        buf_display[0][6] = CODE[time_buf1[3] % 10];//日
 224   1      
 225   1        buf_display[0][5] = CODE[time_buf1[7]];   //星期
 226   1      
 227   1        buf_display[0][3] = CODE[time_buf1[4] / 10]; //小时
 228   1        buf_display[0][2] = CODE[time_buf1[4] % 10];
 229   1        buf_display[0][1] = CODE[time_buf1[5] / 10]; //小时
 230   1        buf_display[0][0] = CODE[time_buf1[5] % 10];
 231   1      
 232   1        display();
 233   1      
 234   1      }
 235          
 236          void tm1629_f(unsigned char f_number) //第一行倒数二个显示F,倒数第一个显示f_number
 237          {
 238   1        tm1629_clear();
 239   1        buf_display[0][1] = CODE[0x0f];
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 5   

 240   1        buf_display[0][0] = CODE[f_number];
 241   1        display();
 242   1      }
 243          
 244          void tm1629_E(unsigned char f_number) //第一行倒数二个显示F,倒数第一个显示f_number
 245          {
 246   1        tm1629_clear();
 247   1        buf_display[0][1] = CODE[0x0E];
 248   1        buf_display[0][0] = CODE[f_number];
 249   1        display();
 250   1      }
 251          
 252          void Show_one_number(unsigned char f_number) //显示一个数字
 253          {
 254   1        tm1629_clear();
 255   1        //buf_display[0][1] = CODE[0x0E];
 256   1        buf_display[0][0] = CODE[f_number];
 257   1        display();
 258   1      }
 259          
 260          void Show_two_number(unsigned char f_number) //显示两个数字
 261          {
 262   1        tm1629_clear();
 263   1        buf_display[0][1] = CODE[f_number / 10];
 264   1        buf_display[0][0] = CODE[f_number % 10];
 265   1        display();
 266   1      }
 267          
 268          void Show_four_number(unsigned char* temp)
 269          {
 270   1        tm1629_clear();
 271   1        buf_display[0][3] = CODE[*(temp)];
 272   1        buf_display[0][2] = CODE[*(temp+1)];
 273   1        buf_display[0][1] = CODE[*(temp+2)];
 274   1        buf_display[0][0] = CODE[*(temp+3)];
 275   1        display();
 276   1      }
 277          
 278          void tm1629_load(void)
 279          {
 280   1        tm1629_clear();
 281   1        if (*(display_ram + 66) != 0)
 282   1          mcuram_to_displayram(buf_display[5] + 7, display_ram + 66);
 283   1        if (*(display_ram + 60) != 0)
 284   1          mcuram_to_displayram(buf_display[5] + 3, display_ram + 60);
 285   1        if (*(display_ram + 54) != 0)
 286   1          mcuram_to_displayram(buf_display[4] + 7, display_ram + 54);
 287   1        if (*(display_ram + 48) != 0)
 288   1          mcuram_to_displayram(buf_display[4] + 3, display_ram + 48);
 289   1        if (*(display_ram + 42) != 0)
 290   1          mcuram_to_displayram(buf_display[3] + 7, display_ram + 42);
 291   1        if (*(display_ram + 36) != 0)
 292   1          mcuram_to_displayram(buf_display[3] + 3, display_ram + 36);
 293   1        if (*(display_ram + 30) != 0)
 294   1          mcuram_to_displayram(buf_display[2] + 7, display_ram + 30);
 295   1        if (*(display_ram + 24) != 0)
 296   1          mcuram_to_displayram(buf_display[2] + 3, display_ram + 24);
 297   1        if (*(display_ram + 18) != 0)
 298   1          mcuram_to_displayram(buf_display[1] + 7, display_ram + 18);
 299   1        if (*(display_ram + 12) != 0)
 300   1          mcuram_to_displayram(buf_display[1] + 3, display_ram + 12);
 301   1        if (*(display_ram + 6) != 0)
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 6   

 302   1          mcuram_to_displayram(buf_display[0] + 7, display_ram + 6);
 303   1        if (*(display_ram + 0) != 0)
 304   1          mcuram_to_displayram(buf_display[0] + 3, display_ram);
 305   1      }
 306          
 307          void mcuram_to_displayram(unsigned char a[48], unsigned char* b)  //从RAM区域移到显存区域,顺带翻译成数码管
             -显示的码
 308          {
 309   1        /*
 310   1        A// 类别、区号、接收号
 311   1        B// 类别、区号、接收号
 312   1        */
 313   1        *(a) = CODE[*(b + 1)];
 314   1        *(a - 1) = CODE[*(b + 2)];
 315   1        *(a - 2) = CODE[*(b + 3)];
 316   1        *(a - 3) = CODE[*(b + 4)];
 317   1      }
 318          
 319          void decoder_temp_to_mcuram(unsigned char* a, unsigned char* index)//a为MCU缓存区   index为解码后取出的8字
             -节临时数组
 320          {
 321   1        *(a + 0) = *(index);
 322   1        *(a + 1) = *(index + 1);
 323   1        *(a + 2) = *(index + 2);
 324   1        *(a + 3) = *(index + 3);
 325   1        *(a + 4) = *(index + 4);
 326   1        *(a + 5) = *(index + 5);
 327   1      }
 328          
 329          void mcuram_to_mcuram_down(unsigned char* a) //a为MCURAM缓存区区   向下压一组数据
 330          {
 331   1        *(a + 6) = *(a);    //ram区元素下移6个
 332   1        *(a + 7) = *(a + 1);
 333   1        *(a + 8) = *(a + 2);
 334   1        *(a + 9) = *(a + 3);
 335   1        *(a + 10) = *(a + 4);
 336   1        *(a + 11) = *(a + 5);
 337   1      
 338   1      }
 339          
 340          void mcuram_to_mcuram_up(unsigned char* a) //a为MCURAM缓存区区   向上压一组数据
 341          {
 342   1        *(a) = *(a + 6);   //ram区元素上移6个
 343   1        *(a + 1) = *(a + 7);
 344   1        *(a + 2) = *(a + 8);
 345   1        *(a + 3) = *(a + 9);
 346   1        *(a + 4) = *(a + 10);
 347   1        *(a + 5) = *(a + 11);
 348   1      }
 349          
 350          void Logout(void)
 351          {
 352   1        unsigned char i;
 353   1        unsigned char Two_Menu_F3_E2_temp= 0;
 354   1        Two_Menu_F3_E2_temp = return_Two_Menu_F3_E2();
 355   1        /*销号处理函数*/
 356   1        for (i = 0; i<(Two_Menu_F3_E2_temp - 1); i++)
 357   1        {
 358   2          mcuram_to_mcuram_up(display_ram + i * 6);
 359   2        }
 360   1        for (i = (Two_Menu_F3_E2_temp - 1) * 6; i<Two_Menu_F3_E2_temp * 6; i++)
 361   1        {
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 7   

 362   2          display_ram[i] = 0;
 363   2        }
 364   1        tm1629_load();
 365   1        display();
 366   1        if (display_ram[0] == 0)
 367   1        {
 368   2          set_func_index(MENU_STANDBY);
 369   2        }
 370   1      }
 371          
 372          
 373          
 374          void fun0(void) //待机显示函数
 375          {
 376   1        //tm1629_await();
 377   1        Display_time();
 378   1      }
 379          
 380          void fun1(void) //一级菜单F0
 381          {
 382   1        tm1629_f(0x00);
 383   1      }
 384          
 385          void fun2(void) //一级菜单F1
 386          {
 387   1        tm1629_f(0x01);
 388   1      }
 389          
 390          void fun3(void) //一级菜单F2
 391          {
 392   1        tm1629_f(0x02);
 393   1      }
 394          
 395          void fun4(void) //一级菜单F3
 396          {
 397   1        tm1629_f(0x03);
 398   1      }
 399          
 400          void fun5(void) //一级菜单F4
 401          {
 402   1        tm1629_f(0x04);
 403   1      }
 404          
 405          void fun6(void) //一级菜单F5
 406          {
 407   1        tm1629_f(0x05);
 408   1      }
 409          
 410          void fun7(void) //一级菜单F6
 411          {
 412   1        tm1629_f(0x06);
 413   1      }
 414          
 415          void fun8(void) //一级菜单F7
 416          {
 417   1        tm1629_f(0x07);
 418   1      }
 419          
 420          void fun9(void) //一级菜单F8
 421          {
 422   1        tm1629_f(0x08);
 423   1      }
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 8   

 424          
 425          void fun10(void) //一级菜单F9
 426          {
 427   1        tm1629_f(0x09);
 428   1      }
 429          
 430          void fun11(void) //一级菜单FA
 431          {
 432   1        tm1629_f(0x0a);
 433   1      }
 434          
 435          void fun12(void) //一级菜单Fb
 436          {
 437   1        tm1629_f(0x0b);
 438   1      }
 439          
 440          void fun13(void) //一级菜单FC
 441          {
 442   1        tm1629_f(0x0c);
 443   1      }
 444          
 445          void fun14(void) //一级菜单Fd
 446          {
 447   1        tm1629_f(0x0d);
 448   1      }
 449          
 450          void fun15(void) //设置年份
 451          {
 452   1        if (return_await_number_table() == 1)
 453   1        {
 454   2          Display_time();
 455   2          set_await_number_table(2);
 456   2        }
 457   1        if (return_await_number_table() == 3)
 458   1        {
 459   2          buf_display[1][7] = 0;
 460   2          buf_display[1][6] = 0;
 461   2          buf_display[1][5] = 0;
 462   2          buf_display[1][4] = 0;
 463   2          display();
 464   2          set_await_number_table(0);
 465   2        }
 466   1        Ds1302_Write_Time();
 467   1      }
 468          
 469          void fun16(void) //设置月份
 470          {
 471   1        if (return_await_number_table() == 1)
 472   1        {
 473   2          Display_time();
 474   2          set_await_number_table(2);
 475   2        }
 476   1        if (return_await_number_table() == 3)
 477   1        {
 478   2          buf_display[1][2] = 0;
 479   2          buf_display[1][1] = 0;
 480   2          display();
 481   2          set_await_number_table(0);
 482   2        }
 483   1        Ds1302_Write_Time();
 484   1      }
 485          
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 9   

 486          void fun17(void) //设置日期
 487          {
 488   1        if (return_await_number_table() == 1)
 489   1        {
 490   2          Display_time();
 491   2          set_await_number_table(2);
 492   2        }
 493   1        if (return_await_number_table() == 3)
 494   1        {
 495   2          buf_display[0][7] = 0;
 496   2          buf_display[0][6] = 0;
 497   2          display();
 498   2          set_await_number_table(0);
 499   2        }
 500   1        Ds1302_Write_Time();
 501   1      }
 502          
 503          void fun18(void) //设置星期
 504          {
 505   1        if (return_await_number_table() == 1)
 506   1        {
 507   2          Display_time();
 508   2          set_await_number_table(2);
 509   2        }
 510   1        if (return_await_number_table() == 3)
 511   1        {
 512   2          buf_display[0][5] = 0;
 513   2          display();
 514   2          set_await_number_table(0);
 515   2        }
 516   1        Ds1302_Write_Time();
 517   1      }
 518          
 519          void fun19(void) //设置小时
 520          {
 521   1        if (return_await_number_table() == 1)
 522   1        {
 523   2          Display_time();
 524   2          set_await_number_table(2);
 525   2        }
 526   1        if (return_await_number_table() == 3)
 527   1        {
 528   2          buf_display[0][3] = 0;
 529   2          buf_display[0][2] = 0;
 530   2          display();
 531   2          set_await_number_table(0);
 532   2        }
 533   1        Ds1302_Write_Time();
 534   1      }
 535          
 536          void fun20(void) //设置分钟
 537          {
 538   1        if (return_await_number_table() == 1)
 539   1        {
 540   2          Display_time();
 541   2          set_await_number_table(2);
 542   2        }
 543   1        if (return_await_number_table() == 3)
 544   1        {
 545   2          buf_display[0][1] = 0;
 546   2          buf_display[0][0] = 0;
 547   2          display();
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 10  

 548   2          set_await_number_table(0);
 549   2        }
 550   1        Ds1302_Write_Time();
 551   1      }
 552          
 553          void fun21(void) //二级菜单F1-E1
 554          {
 555   1        tm1629_E(0x01);
 556   1        Two_Menu_F1_E1[0] = 0;
 557   1        Two_Menu_F1_E1[1] = 0;
 558   1        Two_Menu_F1_E1[2] = 0;
 559   1        Two_Menu_F1_E1[3] = 1;
 560   1      }
 561          
 562          void fun22(void) //二级菜单F1-E2
 563          {
 564   1        tm1629_E(0x02);
 565   1        Two_Menu_F1_E2[0] = 0;
 566   1        Two_Menu_F1_E2[1] = 0;
 567   1        Two_Menu_F1_E2[2] = 0;
 568   1        Two_Menu_F1_E2[3] = 1;
 569   1      }
 570          
 571          void fun23(void) //二级菜单F1-E3
 572          {
 573   1        tm1629_E(0x03);
 574   1        Two_Menu_F1_E3[0] = 0;
 575   1        Two_Menu_F1_E3[1] = 0;
 576   1        Two_Menu_F1_E3[2] = 0;
 577   1        Two_Menu_F1_E3[3] = 1;
 578   1      }
 579          
 580          void fun24(void) //二级菜单F1-E4
 581          {
 582   1        tm1629_E(0x04);
 583   1        Two_Menu_F1_E4[0] = 0;
 584   1        Two_Menu_F1_E4[1] = 0;
 585   1        Two_Menu_F1_E4[2] = 0;
 586   1        Two_Menu_F1_E4[3] = 1;
 587   1      }
 588          
 589          void fun25(void) //二级菜单F2-E1
 590          {
 591   1        tm1629_E(0x01);
 592   1        Two_Menu_F2_E1[0] = 0;
 593   1        Two_Menu_F2_E1[1] = 0;
 594   1        Two_Menu_F2_E1[2] = 0;
 595   1        Two_Menu_F2_E1[3] = 1;
 596   1      }
 597          
 598          void fun26(void) //二级菜单F2-E2
 599          {
 600   1        tm1629_E(0x02);
 601   1        Two_Menu_F2_E2[0] = 0;
 602   1        Two_Menu_F2_E2[1] = 0;
 603   1        Two_Menu_F2_E2[2] = 0;
 604   1        Two_Menu_F2_E2[3] = 1;
 605   1      }
 606          
 607          void fun27(void) //二级菜单F2-E3
 608          {
 609   1        tm1629_E(0x03);
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 11  

 610   1        Two_Menu_F2_E3[0] = 0;
 611   1        Two_Menu_F2_E3[1] = 0;
 612   1        Two_Menu_F2_E3[2] = 0;
 613   1        Two_Menu_F2_E3[3] = 1;
 614   1      }
 615          
 616          void fun28(void) //二级菜单F2-E4
 617          {
 618   1        tm1629_E(0x04);
 619   1        Two_Menu_F2_E4[0] = 0;
 620   1        Two_Menu_F2_E4[1] = 0;
 621   1        Two_Menu_F2_E4[2] = 0;
 622   1        Two_Menu_F2_E4[3] = 1;
 623   1      }
 624          
 625          void fun29(void) //二级菜单F3-E1
 626          {
 627   1        tm1629_E(0x01);
 628   1      }
 629          
 630          void fun30(void) //二级菜单F3-E2
 631          {
 632   1        tm1629_E(0x02);
 633   1      }
 634          
 635          void fun31(void) //二级菜单F4
 636          {
 637   1        unsigned char temp = 0;
 638   1        temp = return_Two_Menu_F4_E1();
 639   1        Show_two_number(temp);
 640   1      }
 641          
 642          void fun32(void) //二级菜单F5
 643          {
 644   1        unsigned char temp = 0;
 645   1        temp = return_Two_Menu_F5_E1();
 646   1        Show_two_number(temp);
 647   1      }
 648          
 649          void fun33(void) //二级菜单F6-E1
 650          {
 651   1        tm1629_E(0x01);
 652   1      }
 653          
 654          void fun34(void) //二级菜单F6-E2
 655          {
 656   1        tm1629_E(0x02);
 657   1      }
 658          
 659          void fun35(void) //二级菜单F6-E3
 660          {
 661   1        tm1629_E(0x03);
 662   1      }
 663          
 664          void fun36(void) //二级菜单F6-E4
 665          {
 666   1        tm1629_E(0x04);
 667   1      }
 668          
 669          void fun37(void) //二级菜单F6-E5
 670          {
 671   1        tm1629_E(0x05);
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 12  

 672   1      }
 673          
 674          void fun38(void) //二级菜单F7-E1
 675          {
 676   1        tm1629_E(0x01);
 677   1      }
 678          
 679          void fun39(void) //二级菜单F7-E2
 680          {
 681   1        tm1629_E(0x02);
 682   1      }
 683          
 684          void fun40(void) //二级菜单F7-E3
 685          {
 686   1        tm1629_E(0x03);
 687   1      }
 688          
 689          void fun41(void) //二级菜单F7-E4
 690          {
 691   1        tm1629_E(0x04);
 692   1      }
 693          
 694          void fun42(void) //二级菜单F8-E1
 695          {
 696   1        tm1629_E(0x01);
 697   1      }
 698          
 699          void fun43(void) //二级菜单F8-E2
 700          {
 701   1        tm1629_E(0x02);
 702   1      }
 703          
 704          void fun44(void) //二级菜单F9-E1
 705          {
 706   1        tm1629_E(0x01);
 707   1      }
 708          
 709          void fun45(void) //二级菜单F9-E2
 710          {
 711   1        tm1629_E(0x02);
 712   1      }
 713          
 714          void fun46(void) //二级菜单FA
 715          {
 716   1        tm1629_f(0x0f);
 717   1      }
 718          
 719          
 720          void fun47(void) //二级菜单Fb
 721          {
 722   1        tm1629_f(0x0f);
 723   1      }
 724          
 725          void fun48(void) //二级菜单FC
 726          {
 727   1        tm1629_f(0x0f);
 728   1      }
 729          
 730          void fun49(void) //二级菜单Fd
 731          {
 732   1        tm1629_f(0x0f);
 733   1      }
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 13  

 734          
 735          void fun50(void) //F1_E1 千位闪烁
 736          {
 737   1        if (return_await_number_table() == 1)
 738   1        {
 739   2          Show_four_number(Two_Menu_F1_E1);
 740   2          set_await_number_table(2);
 741   2        }
 742   1        if (return_await_number_table() == 3)
 743   1        {
 744   2          buf_display[0][3] = 0;
 745   2          display();
 746   2          set_await_number_table(0);
 747   2        }
 748   1      }
 749          
 750          void fun51(void) //F1_E1 百位闪烁
 751          {
 752   1        if (return_await_number_table() == 1)
 753   1        {
 754   2          Show_four_number(Two_Menu_F1_E1);
 755   2          set_await_number_table(2);
 756   2        }
 757   1        if (return_await_number_table() == 3)
 758   1        {
 759   2          buf_display[0][2] = 0;
 760   2          display();
 761   2          set_await_number_table(0);
 762   2        }
 763   1      }
 764          
 765          void fun52(void)  //F1_E1 十位闪烁
 766          {
 767   1        if (return_await_number_table() == 1)
 768   1        {
 769   2          Show_four_number(Two_Menu_F1_E1);
 770   2          set_await_number_table(2);
 771   2        }
 772   1        if (return_await_number_table() == 3)
 773   1        {
 774   2          buf_display[0][1] = 0;
 775   2          display();
 776   2          set_await_number_table(0);
 777   2        }
 778   1      }
 779          
 780          void fun53(void) //F1_E1 个位闪烁
 781          {
 782   1        if (return_await_number_table() == 1)
 783   1        {
 784   2          Show_four_number(Two_Menu_F1_E1);
 785   2          set_await_number_table(2);
 786   2        }
 787   1        if (return_await_number_table() == 3)
 788   1        {
 789   2          buf_display[0][0] = 0;
 790   2          display();
 791   2          set_await_number_table(0);
 792   2        }
 793   1      }
 794          
 795          void fun54(void) //F1_E2 千位闪烁
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 14  

 796          {
 797   1        if (return_await_number_table() == 1)
 798   1        {
 799   2          Show_four_number(Two_Menu_F1_E2);
 800   2          set_await_number_table(2);
 801   2        }
 802   1        if (return_await_number_table() == 3)
 803   1        {
 804   2          buf_display[0][3] = 0;
 805   2          display();
 806   2          set_await_number_table(0);
 807   2        }
 808   1      }
 809          
 810          void fun55(void) //F1_E2 百位闪烁
 811          {
 812   1        if (return_await_number_table() == 1)
 813   1        {
 814   2          Show_four_number(Two_Menu_F1_E2);
 815   2          set_await_number_table(2);
 816   2        }
 817   1        if (return_await_number_table() == 3)
 818   1        {
 819   2          buf_display[0][2] = 0;
 820   2          display();
 821   2          set_await_number_table(0);
 822   2        }
 823   1      }
 824          
 825          void fun56(void) //F1_E2 十位闪烁
 826          {
 827   1        if (return_await_number_table() == 1)
 828   1        {
 829   2          Show_four_number(Two_Menu_F1_E2);
 830   2          set_await_number_table(2);
 831   2        }
 832   1        if (return_await_number_table() == 3)
 833   1        {
 834   2          buf_display[0][1] = 0;
 835   2          display();
 836   2          set_await_number_table(0);
 837   2        }
 838   1      }
 839          
 840          void fun57(void) //F1_E2 个位闪烁
 841          {
 842   1        if (return_await_number_table() == 1)
 843   1        {
 844   2          Show_four_number(Two_Menu_F1_E2);
 845   2          set_await_number_table(2);
 846   2        }
 847   1        if (return_await_number_table() == 3)
 848   1        {
 849   2          buf_display[0][0] = 0;
 850   2          display();
 851   2          set_await_number_table(0);
 852   2        }
 853   1      }
 854          
 855          void fun58(void) //F1_E3 千位闪烁
 856          {
 857   1        if (return_await_number_table() == 1)
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 15  

 858   1        {
 859   2          Show_four_number(Two_Menu_F1_E3);
 860   2          set_await_number_table(2);
 861   2        }
 862   1        if (return_await_number_table() == 3)
 863   1        {
 864   2          buf_display[0][3] = 0;
 865   2          display();
 866   2          set_await_number_table(0);
 867   2        }
 868   1      }
 869          
 870          void fun59(void) //F1_E3 百位闪烁
 871          {
 872   1        if (return_await_number_table() == 1)
 873   1        {
 874   2          Show_four_number(Two_Menu_F1_E3);
 875   2          set_await_number_table(2);
 876   2        }
 877   1        if (return_await_number_table() == 3)
 878   1        {
 879   2          buf_display[0][2] = 0;
 880   2          display();
 881   2          set_await_number_table(0);
 882   2        }
 883   1      }
 884          
 885          void fun60(void) //F1_E3 十位闪烁
 886          {
 887   1        if (return_await_number_table() == 1)
 888   1        {
 889   2          Show_four_number(Two_Menu_F1_E3);
 890   2          set_await_number_table(2);
 891   2        }
 892   1        if (return_await_number_table() == 3)
 893   1        {
 894   2          buf_display[0][1] = 0;
 895   2          display();
 896   2          set_await_number_table(0);
 897   2        }
 898   1      }
 899          
 900          void fun61(void) //F1_E3 个位闪烁
 901          {
 902   1        if (return_await_number_table() == 1)
 903   1        {
 904   2          Show_four_number(Two_Menu_F1_E3);
 905   2          set_await_number_table(2);
 906   2        }
 907   1        if (return_await_number_table() == 3)
 908   1        {
 909   2          buf_display[0][0] = 0;
 910   2          display();
 911   2          set_await_number_table(0);
 912   2        }
 913   1      }
 914          
 915          void fun62(void) //F1_E4 千位闪烁
 916          {
 917   1        if (return_await_number_table() == 1)
 918   1        {
 919   2          Show_four_number(Two_Menu_F1_E4);
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 16  

 920   2          set_await_number_table(2);
 921   2        }
 922   1        if (return_await_number_table() == 3)
 923   1        {
 924   2          buf_display[0][3] = 0;
 925   2          display();
 926   2          set_await_number_table(0);
 927   2        }
 928   1      }
 929          
 930          void fun63(void) //F1_E4 百位闪烁
 931          {
 932   1        if (return_await_number_table() == 1)
 933   1        {
 934   2          Show_four_number(Two_Menu_F1_E4);
 935   2          set_await_number_table(2);
 936   2        }
 937   1        if (return_await_number_table() == 3)
 938   1        {
 939   2          buf_display[0][2] = 0;
 940   2          display();
 941   2          set_await_number_table(0);
 942   2        }
 943   1      }
 944          
 945          void fun64(void) //F1_E4 十位闪烁
 946          {
 947   1        if (return_await_number_table() == 1)
 948   1        {
 949   2          Show_four_number(Two_Menu_F1_E4);
 950   2          set_await_number_table(2);
 951   2        }
 952   1        if (return_await_number_table() == 3)
 953   1        {
 954   2          buf_display[0][1] = 0;
 955   2          display();
 956   2          set_await_number_table(0);
 957   2        }
 958   1      }
 959          
 960          void fun65(void) //F1_E4 个位闪烁
 961          {
 962   1        if (return_await_number_table() == 1)
 963   1        {
 964   2          Show_four_number(Two_Menu_F1_E4);
 965   2          set_await_number_table(2);
 966   2        }
 967   1        if (return_await_number_table() == 3)
 968   1        {
 969   2          buf_display[0][0] = 0;
 970   2          display();
 971   2          set_await_number_table(0);
 972   2        }
 973   1      }
 974          
 975          void fun66(void) //F2_E1 千位闪烁
 976          {
 977   1        if (return_await_number_table() == 1)
 978   1        {
 979   2          Show_four_number(Two_Menu_F2_E1);
 980   2          set_await_number_table(2);
 981   2        }
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 17  

 982   1        if (return_await_number_table() == 3)
 983   1        {
 984   2          buf_display[0][3] = 0;
 985   2          display();
 986   2          set_await_number_table(0);
 987   2        }
 988   1      }
 989          
 990          void fun67(void) //F2_E1 百位闪烁
 991          {
 992   1        if (return_await_number_table() == 1)
 993   1        {
 994   2          Show_four_number(Two_Menu_F2_E1);
 995   2          set_await_number_table(2);
 996   2        }
 997   1        if (return_await_number_table() == 3)
 998   1        {
 999   2          buf_display[0][2] = 0;
1000   2          display();
1001   2          set_await_number_table(0);
1002   2        }
1003   1      }
1004          
1005          void fun68(void) //F2_E1 十位闪烁
1006          {
1007   1        if (return_await_number_table() == 1)
1008   1        {
1009   2          Show_four_number(Two_Menu_F2_E1);
1010   2          set_await_number_table(2);
1011   2        }
1012   1        if (return_await_number_table() == 3)
1013   1        {
1014   2          buf_display[0][1] = 0;
1015   2          display();
1016   2          set_await_number_table(0);
1017   2        }
1018   1      }
1019          
1020          void fun69(void) //F2_E1 个位闪烁
1021          {
1022   1        if (return_await_number_table() == 1)
1023   1        {
1024   2          Show_four_number(Two_Menu_F2_E1);
1025   2          set_await_number_table(2);
1026   2        }
1027   1        if (return_await_number_table() == 3)
1028   1        {
1029   2          buf_display[0][0] = 0;
1030   2          display();
1031   2          set_await_number_table(0);
1032   2        }
1033   1      }
1034          
1035          void fun70(void) //F2_E2 千位闪烁
1036          {
1037   1        if (return_await_number_table() == 1)
1038   1        {
1039   2          Show_four_number(Two_Menu_F2_E2);
1040   2          set_await_number_table(2);
1041   2        }
1042   1        if (return_await_number_table() == 3)
1043   1        {
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 18  

1044   2          buf_display[0][3] = 0;
1045   2          display();
1046   2          set_await_number_table(0);
1047   2        }
1048   1      }
1049          
1050          void fun71(void) //F2_E2 百位闪烁
1051          {
1052   1        if (return_await_number_table() == 1)
1053   1        {
1054   2          Show_four_number(Two_Menu_F2_E2);
1055   2          set_await_number_table(2);
1056   2        }
1057   1        if (return_await_number_table() == 3)
1058   1        {
1059   2          buf_display[0][2] = 0;
1060   2          display();
1061   2          set_await_number_table(0);
1062   2        }
1063   1      }
1064          
1065          void fun72(void) //F2_E2 十位闪烁
1066          {
1067   1        if (return_await_number_table() == 1)
1068   1        {
1069   2          Show_four_number(Two_Menu_F2_E2);
1070   2          set_await_number_table(2);
1071   2        }
1072   1        if (return_await_number_table() == 3)
1073   1        {
1074   2          buf_display[0][1] = 0;
1075   2          display();
1076   2          set_await_number_table(0);
1077   2        }
1078   1      }
1079          
1080          void fun73(void) //F2_E2 个位闪烁
1081          {
1082   1        if (return_await_number_table() == 1)
1083   1        {
1084   2          Show_four_number(Two_Menu_F2_E2);
1085   2          set_await_number_table(2);
1086   2        }
1087   1        if (return_await_number_table() == 3)
1088   1        {
1089   2          buf_display[0][0] = 0;
1090   2          display();
1091   2          set_await_number_table(0);
1092   2        }
1093   1      }
1094          
1095          void fun74(void) //F2_E3 千位闪烁
1096          {
1097   1        if (return_await_number_table() == 1)
1098   1        {
1099   2          Show_four_number(Two_Menu_F2_E3);
1100   2          set_await_number_table(2);
1101   2        }
1102   1        if (return_await_number_table() == 3)
1103   1        {
1104   2          buf_display[0][3] = 0;
1105   2          display();
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 19  

1106   2          set_await_number_table(0);
1107   2        }
1108   1      }
1109          
1110          void fun75(void) //F2_E3 百位闪烁
1111          {
1112   1        if (return_await_number_table() == 1)
1113   1        {
1114   2          Show_four_number(Two_Menu_F2_E3);
1115   2          set_await_number_table(2);
1116   2        }
1117   1        if (return_await_number_table() == 3)
1118   1        {
1119   2          buf_display[0][2] = 0;
1120   2          display();
1121   2          set_await_number_table(0);
1122   2        }
1123   1      }
1124          
1125          void fun76(void) //F2_E3 十位闪烁
1126          {
1127   1        if (return_await_number_table() == 1)
1128   1        {
1129   2          Show_four_number(Two_Menu_F2_E3);
1130   2          set_await_number_table(2);
1131   2        }
1132   1        if (return_await_number_table() == 3)
1133   1        {
1134   2          buf_display[0][1] = 0;
1135   2          display();
1136   2          set_await_number_table(0);
1137   2        }
1138   1      }
1139          
1140          void fun77(void) //F2_E3 个位闪烁
1141          {
1142   1        if (return_await_number_table() == 1)
1143   1        {
1144   2          Show_four_number(Two_Menu_F2_E3);
1145   2          set_await_number_table(2);
1146   2        }
1147   1        if (return_await_number_table() == 3)
1148   1        {
1149   2          buf_display[0][0] = 0;
1150   2          display();
1151   2          set_await_number_table(0);
1152   2        }
1153   1      }
1154          
1155          void fun78(void) //F2_E4 千位闪烁
1156          {
1157   1        if (return_await_number_table() == 1)
1158   1        {
1159   2          Show_four_number(Two_Menu_F2_E4);
1160   2          set_await_number_table(2);
1161   2        }
1162   1        if (return_await_number_table() == 3)
1163   1        {
1164   2          buf_display[0][3] = 0;
1165   2          display();
1166   2          set_await_number_table(0);
1167   2        }
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 20  

1168   1      }
1169          
1170          void fun79(void) //F2_E4 百位闪烁
1171          {
1172   1        if (return_await_number_table() == 1)
1173   1        {
1174   2          Show_four_number(Two_Menu_F2_E4);
1175   2          set_await_number_table(2);
1176   2        }
1177   1        if (return_await_number_table() == 3)
1178   1        {
1179   2          buf_display[0][2] = 0;
1180   2          display();
1181   2          set_await_number_table(0);
1182   2        }
1183   1      }
1184          
1185          void fun80(void) //F2_E4 十位闪烁
1186          {
1187   1        if (return_await_number_table() == 1)
1188   1        {
1189   2          Show_four_number(Two_Menu_F2_E4);
1190   2          set_await_number_table(2);
1191   2        }
1192   1        if (return_await_number_table() == 3)
1193   1        {
1194   2          buf_display[0][1] = 0;
1195   2          display();
1196   2          set_await_number_table(0);
1197   2        }
1198   1      }
1199          
1200          void fun81(void) //F2_E4 个位闪烁
1201          {
1202   1        if (return_await_number_table() == 1)
1203   1        {
1204   2          Show_four_number(Two_Menu_F2_E4);
1205   2          set_await_number_table(2);
1206   2        }
1207   1        if (return_await_number_table() == 3)
1208   1        {
1209   2          buf_display[0][0] = 0;
1210   2          display();
1211   2          set_await_number_table(0);
1212   2        }
1213   1      }
1214          
1215          void fun82(void) //显示即时显示 还是循环显示
1216          {
1217   1        unsigned char temp=0;
1218   1        temp = return_Two_Menu_F3_E1();
1219   1        Show_one_number(temp);
1220   1      }
1221          
1222          void fun83(void) //队列存储个数
1223          {
1224   1        unsigned char temp = 0;
1225   1        temp = return_Two_Menu_F3_E2();
1226   1        Show_two_number(temp);
1227   1      }
1228          
1229          void fun84(void) //F6_E1语音选择
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 21  

1230          {
1231   1        unsigned char temp = 0;
1232   1        temp = return_Two_Menu_F6_E1();
1233   1        Show_one_number(temp);
1234   1      }
1235          
1236          void fun85(void) //F6_E2语音报读次数
1237          {
1238   1        unsigned char temp = 0;
1239   1        temp = return_Two_Menu_F6_E2();
1240   1        Show_one_number(temp);
1241   1      }
1242          
1243          void fun86(void) //F6_E3循环时候是否报读
1244          {
1245   1        unsigned char temp = 0;
1246   1        temp = return_Two_Menu_F6_E3();
1247   1        Show_one_number(temp);
1248   1      }
1249          
1250          void fun87(void) //F6_E4音量大小调整
1251          {
1252   1        unsigned char temp = 0;
1253   1        temp = return_Two_Menu_F6_E4();
1254   1        Show_one_number(temp);
1255   1      }
1256          
1257          void fun88(void) //F6_E5屏幕亮度调整
1258          {
1259   1        unsigned char temp = 0;
1260   1        temp = return_Two_Menu_F6_E5();
1261   1        Show_one_number(temp);
1262   1      }
1263          
1264          void fun89(void) //F7_E1 999*9
1265          {
1266   1        unsigned char temp = 0;
1267   1        temp = return_Two_Menu_F7_E1();
1268   1        Show_one_number(temp);
1269   1      }
1270          
1271          void fun90(void) //F7_E2 9999*9
1272          {
1273   1        unsigned char temp = 0;
1274   1        temp = return_Two_Menu_F7_E2();
1275   1        Show_one_number(temp);
1276   1      }
1277          
1278          void fun91(void) //F7_E3 999*99
1279          {
1280   1        unsigned char temp = 0;
1281   1        temp = return_Two_Menu_F7_E3();
1282   1        Show_one_number(temp);
1283   1      }
1284          
1285          void fun92(void) //F7_E4 9999*99
1286          {
1287   1        unsigned char temp = 0;
1288   1        temp = return_Two_Menu_F7_E4();
1289   1        Show_one_number(temp);
1290   1      }
1291          
C51 COMPILER V9.00   TM1629                                                                09/18/2015 15:48:09 PAGE 22  

1292          void fun93(void) //F8_E1单键位跟多键位切换
1293          {
1294   1        unsigned char temp = 0;
1295   1        temp = return_Two_Menu_F8_E1();
1296   1        Show_one_number(temp);
1297   1      }
1298          
1299          void fun94(void) //F8_E2键位设置
1300          {
1301   1        unsigned char temp = 0;
1302   1        temp = return_Two_Menu_F8_E2();
1303   1        Show_two_number(temp);
1304   1      }
1305          
1306          void fun95(void) //解码菜单
1307          {
1308   1        tm1629_load();
1309   1        display();;
1310   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3965    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    320      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
