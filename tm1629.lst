C51 COMPILER V9.00   TM1629                                                                09/05/2015 11:00:47 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TM1629
OBJECT MODULE PLACED IN tm1629.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\tm1629.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(
                    -.\tm1629.lst) TABS(2) OBJECT(tm1629.obj)

line level    source

   1          #include "tm1629.h"
   2          #include "timer.h"
   3          #include "usart.h"
   4          #include "ds1302.h"
   5          
   6          unsigned char const CODE[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x3
             -9, 0x5E, 0x79, 0x71, 0x76, 0x38, 0x5c, 0x73, 0x3e };//0-9 abcdef 显示器码数组
   7          unsigned char const INIT_CODE[] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };//逐段点亮数码管数组
   8          unsigned char const SHANGSHUO[] = { 0x40, 0x00 }; // 点亮数码管中间段以及灭
   9          unsigned char buf_display[6][8] = { 0 }; //3个TM1629显存数组
  10          unsigned char display_ram[240] = { 0 }; //程序运行时记录显示数据的内存 
  11          unsigned char await_time_table= 0 ;//用于记录待机显示横杠数码管次数 
  12          
  13          void writeDataTo1629(unsigned char p) //写数据给第一个TM1629
  14          {
  15   1        unsigned int i;
  16   1        TM1629_STB = 0;
  17   1        for (i = 0; i<8; i++)
  18   1        {
  19   2          TM1629_CLK = 0;
  20   2          if (p & 0x01)
  21   2            TM1629_DIO = 1;
  22   2          else
  23   2            TM1629_DIO = 0;
  24   2          _nop_();
  25   2          _nop_();
  26   2          _nop_();
  27   2          _nop_();
  28   2          TM1629_CLK = 1;
  29   2          p = p >> 1;
  30   2        }
  31   1        TM1629_CLK = 0;
  32   1        TM1629_DIO = 0;
  33   1      }
  34          
  35          void writeDataTo1629_2(unsigned char p) //写数据给第二个TM1629
  36          {
  37   1        unsigned int i;
  38   1        TM1629_STB2 = 0;
  39   1        for (i = 0; i<8; i++)
  40   1        {
  41   2          TM1629_CLK = 0;
  42   2          if (p & 0x01)
  43   2            TM1629_DIO = 1;
  44   2          else
  45   2            TM1629_DIO = 0;
  46   2          _nop_();
  47   2          _nop_();
  48   2          _nop_();
  49   2          _nop_();
  50   2          TM1629_CLK = 1;
  51   2          p = p >> 1;
  52   2        }
  53   1        TM1629_CLK = 0;
C51 COMPILER V9.00   TM1629                                                                09/05/2015 11:00:47 PAGE 2   

  54   1        TM1629_DIO = 0;
  55   1      }
  56          
  57          void writeDataTo1629_3(unsigned char p) //写数据给第三个TM1629
  58          {
  59   1        unsigned int i;
  60   1        TM1629_STB3 = 0;
  61   1        for (i = 0; i<8; i++)
  62   1        {
  63   2          TM1629_CLK = 0;
  64   2          if (p & 0x01)
  65   2            TM1629_DIO = 1;
  66   2          else
  67   2            TM1629_DIO = 0;
  68   2          _nop_();
  69   2          _nop_();
  70   2          _nop_();
  71   2          _nop_();
  72   2          TM1629_CLK = 1;
  73   2          p = p >> 1;
  74   2        }
  75   1        TM1629_CLK = 0;
  76   1        TM1629_DIO = 0;
  77   1      }
  78          
  79          void send_command(unsigned char word) //写命令给第一个TM1629
  80          {
  81   1        TM1629_STB = 1;
  82   1        nop;
  83   1        TM1629_STB = 0;
  84   1        writeDataTo1629(word);
  85   1      }
  86          
  87          void send_command_2(unsigned char word) //写命令给第二个TM1629
  88          {
  89   1        TM1629_STB2 = 1;
  90   1        nop;
  91   1        TM1629_STB2 = 0;
  92   1        writeDataTo1629_2(word);
  93   1      }
  94          
  95          void send_command_3(unsigned char word) //写命令给第三个TM1629
  96          {
  97   1        TM1629_STB3 = 1;
  98   1        nop;
  99   1        TM1629_STB3 = 0;
 100   1        writeDataTo1629_3(word);
 101   1      }
 102          
 103          void display(void) //3个TM1629显示函数
 104          {
 105   1        unsigned char i;
 106   1        send_command(0x40); //设置数据命令:普通模式、地址自增1，写数据到显存
 107   1        send_command(0xc0); //设置显示地址命令：从00H开始
 108   1        for (i = 0; i<8; i++) //发送16字节的显存数据
 109   1        {
 110   2          writeDataTo1629(buf_display[0][i]);
 111   2          writeDataTo1629(buf_display[1][i]);
 112   2        }
 113   1        send_command(0x8C); //设置显示控制命令：打开显示，并设置为11/16.
 114   1        TM1629_STB = 1;
 115   1      
C51 COMPILER V9.00   TM1629                                                                09/05/2015 11:00:47 PAGE 3   

 116   1        send_command_2(0x40); //设置数据命令:普通模式、地址自增1，写数据到显存
 117   1        send_command_2(0xc0); //设置显示地址命令：从00H开始
 118   1        for (i = 0; i<8; i++) //发送16字节的显存数据
 119   1        {
 120   2          writeDataTo1629_2(buf_display[2][i]);
 121   2          writeDataTo1629_2(buf_display[3][i]);
 122   2        }
 123   1        send_command_2(0x8C); //设置显示控制命令：打开显示，并设置为11/16.
 124   1        TM1629_STB2 = 1;
 125   1      
 126   1        send_command_3(0x40); //设置数据命令:普通模式、地址自增1，写数据到显存
 127   1        send_command_3(0xc0); //设置显示地址命令：从00H开始
 128   1        for (i = 0; i<8; i++) //发送16字节的显存数据
 129   1        {
 130   2          writeDataTo1629_3(buf_display[4][i]);
 131   2          writeDataTo1629_3(buf_display[5][i]);
 132   2        }
 133   1        send_command_3(0x8C); //设置显示控制命令：打开显示，并设置为11/16.
 134   1        TM1629_STB3 = 1;
 135   1      }
 136          
 137          void tm1629_init(void) //TM1629开机初始化函数
 138          {
 139   1        unsigned char i, j, k;    //k控制显示的具体数字，i和j控制buf_display的刷新
 140   1        for (k = 0; k<8; k++)
 141   1        {
 142   2          for (i = 0; i<6; i++)
 143   2          {
 144   3            for (j = 0; j<8; j++)
 145   3            {
 146   4              buf_display[i][j] = INIT_CODE[k];
 147   4            }
 148   3          }
 149   2          display();
 150   2          Tm1629_delay(30);
 151   2        }
 152   1      }
 153          
 154          
 155          void Tm1629_delay(unsigned char k) //延时函数
 156          {
 157   1        unsigned char i, j;
 158   1        for (; k>0; k--)
 159   1        {
 160   2          for (i = 255; i>0; i--)
 161   2          {
 162   3            for (j = 255; j>0; j--)
 163   3            {
 164   4              ;
 165   4      
 166   4            }
 167   3          }
 168   2        }
 169   1      }
 170          
 171          void tm1629_clear(void)//全部归零
 172          {
 173   1        unsigned char i, j;
 174   1        for (i = 0; i<6; i++)
 175   1        {
 176   2          for (j = 0; j<8; j++)
 177   2          {
C51 COMPILER V9.00   TM1629                                                                09/05/2015 11:00:47 PAGE 4   

 178   3            buf_display[i][j] = 0x00;
 179   3          }
 180   2        }
 181   1      }
 182          
 183          void tm1629_await(void)
 184          {
 185   1        unsigned char i;  //k控制显示的具体数字，i和j控制buf_display的刷新
 186   1        unsigned char await_number_table_temp = 0;
 187   1        await_number_table_temp = return_await_number_table();
 188   1        if (await_number_table_temp == 1)
 189   1        {
 190   2          //GD5800_select_chapter(0x0008) ;
 191   2          tm1629_clear();
 192   2          i = await_time_table & 0x03;
 193   2          buf_display[0][i] = 0x40;
 194   2          display();
 195   2          set_await_number_table(0);
 196   2          await_time_table++;
 197   2          if (await_time_table == 4)
 198   2            await_time_table = 0;
 199   2        }
 200   1      }
 201          
 202          void Display_time(void)
 203          {
 204   1        tm1629_clear();
 205   1        Ds1302_Read_Time(); 
 206   1        buf_display[1][7] = CODE[2];        //年
 207   1        buf_display[1][6] = CODE[0];
 208   1        buf_display[1][5] = CODE[time_buf1[1] / 10];
 209   1        buf_display[1][4] = CODE[time_buf1[1] % 10];
 210   1      
 211   1        buf_display[1][3] = 0x40;          // -
 212   1        
 213   1        buf_display[1][2] = CODE[time_buf1[2] / 10]; //月
 214   1        buf_display[1][1] = CODE[time_buf1[2] % 10];
 215   1      
 216   1        buf_display[1][0] = 0x40;          // -
 217   1      
 218   1        buf_display[0][7] = CODE[time_buf1[3] / 10];
 219   1        buf_display[0][6] = CODE[time_buf1[3] % 10];//日
 220   1      
 221   1        buf_display[0][5] = CODE[time_buf1[7]];   //星期
 222   1      
 223   1        buf_display[0][3] = CODE[time_buf1[4] / 10]; //小时
 224   1        buf_display[0][2] = CODE[time_buf1[4] % 10];
 225   1        buf_display[0][1] = CODE[time_buf1[5] / 10]; //小时
 226   1        buf_display[0][0] = CODE[time_buf1[5] % 10];
 227   1      
 228   1        display();
 229   1      
 230   1      }
 231          
 232          void tm1629_f(unsigned char f_number) //第一行倒数二个显示F,倒数第一个显示f_number
 233          {
 234   1        tm1629_clear();
 235   1        buf_display[0][1] = CODE[0x0f];
 236   1        buf_display[0][0] = CODE[f_number];
 237   1        display();
 238   1      }
 239          
C51 COMPILER V9.00   TM1629                                                                09/05/2015 11:00:47 PAGE 5   

 240          void tm1629_E(unsigned char f_number) //第一行倒数二个显示F,倒数第一个显示f_number
 241          {
 242   1        tm1629_clear();
 243   1        buf_display[0][1] = CODE[0x0E];
 244   1        buf_display[0][0] = CODE[f_number];
 245   1        display();
 246   1      }
 247          
 248          void fun0(void) //待机显示函数
 249          {
 250   1        //tm1629_await();
 251   1        Display_time();
 252   1      }
 253          
 254          void fun1(void) //一级菜单F0
 255          {
 256   1        tm1629_f(0x00);
 257   1      }
 258          
 259          void fun2(void) //一级菜单F1
 260          {
 261   1        tm1629_f(0x01);
 262   1      }
 263          
 264          void fun3(void) //一级菜单F2
 265          {
 266   1        tm1629_f(0x02);
 267   1      }
 268          
 269          void fun4(void) //一级菜单F3
 270          {
 271   1        tm1629_f(0x03);
 272   1      }
 273          
 274          void fun5(void) //一级菜单F4
 275          {
 276   1        tm1629_f(0x04);
 277   1      }
 278          
 279          void fun6(void) //一级菜单F5
 280          {
 281   1        tm1629_f(0x05);
 282   1      }
 283          
 284          void fun7(void) //一级菜单F6
 285          {
 286   1        tm1629_f(0x06);
 287   1      }
 288          
 289          void fun8(void) //一级菜单F7
 290          {
 291   1        tm1629_f(0x07);
 292   1      }
 293          
 294          void fun9(void) //一级菜单F8
 295          {
 296   1        tm1629_f(0x08);
 297   1      }
 298          
 299          void fun10(void) //一级菜单F9
 300          {
 301   1        tm1629_f(0x09);
C51 COMPILER V9.00   TM1629                                                                09/05/2015 11:00:47 PAGE 6   

 302   1      }
 303          
 304          void fun11(void) //一级菜单FA
 305          {
 306   1        tm1629_f(0x0a);
 307   1      }
 308          
 309          void fun12(void) //一级菜单Fb
 310          {
 311   1        tm1629_f(0x0b);
 312   1      }
 313          
 314          void fun13(void) //一级菜单FC
 315          {
 316   1        tm1629_f(0x0c);
 317   1      }
 318          
 319          void fun14(void) //设置年份
 320          {
 321   1        if (return_await_number_table() == 1)
 322   1        {
 323   2          Display_time();
 324   2          set_await_number_table(2);
 325   2        }
 326   1        if (return_await_number_table() == 3)
 327   1        {
 328   2          buf_display[1][7] = 0;
 329   2          buf_display[1][6] = 0;
 330   2          buf_display[1][5] = 0;
 331   2          buf_display[1][4] = 0;
 332   2          display();
 333   2          set_await_number_table(0);
 334   2        }
 335   1        Ds1302_Write_Time();
 336   1      }
 337          
 338          void fun15(void) //设置月份
 339          {
 340   1        if (return_await_number_table() == 1)
 341   1        {
 342   2          Display_time();
 343   2          set_await_number_table(2);
 344   2        }
 345   1        if (return_await_number_table() == 3)
 346   1        {
 347   2          buf_display[1][2] = 0;
 348   2          buf_display[1][1] = 0;
 349   2          display();
 350   2          set_await_number_table(0);
 351   2        }
 352   1        Ds1302_Write_Time();
 353   1      }
 354          
 355          void fun16(void) //设置日期
 356          {
 357   1        if (return_await_number_table() == 1)
 358   1        {
 359   2          Display_time();
 360   2          set_await_number_table(2);
 361   2        }
 362   1        if (return_await_number_table() == 3)
 363   1        {
C51 COMPILER V9.00   TM1629                                                                09/05/2015 11:00:47 PAGE 7   

 364   2          buf_display[0][7] = 0;
 365   2          buf_display[0][6] = 0;
 366   2          display();
 367   2          set_await_number_table(0);
 368   2        }
 369   1        Ds1302_Write_Time();
 370   1      }
 371          
 372          void fun17(void) //设置星期
 373          {
 374   1        if (return_await_number_table() == 1)
 375   1        {
 376   2          Display_time();
 377   2          set_await_number_table(2);
 378   2        }
 379   1        if (return_await_number_table() == 3)
 380   1        {
 381   2          buf_display[0][5] = 0;
 382   2          display();
 383   2          set_await_number_table(0);
 384   2        }
 385   1        Ds1302_Write_Time();
 386   1      }
 387          
 388          void fun18(void) //设置小时
 389          {
 390   1        if (return_await_number_table() == 1)
 391   1        {
 392   2          Display_time();
 393   2          set_await_number_table(2);
 394   2        }
 395   1        if (return_await_number_table() == 3)
 396   1        {
 397   2          buf_display[0][3] = 0;
 398   2          buf_display[0][2] = 0;
 399   2          display();
 400   2          set_await_number_table(0);
 401   2        }
 402   1        Ds1302_Write_Time();
 403   1      }
 404          
 405          void fun19(void) //设置小时
 406          {
 407   1        if (return_await_number_table() == 1)
 408   1        {
 409   2          Display_time();
 410   2          set_await_number_table(2);
 411   2        }
 412   1        if (return_await_number_table() == 3)
 413   1        {
 414   2          buf_display[0][1] = 0;
 415   2          buf_display[0][0] = 0;
 416   2          display();
 417   2          set_await_number_table(0);
 418   2        }
 419   1        Ds1302_Write_Time();
 420   1      }
 421          
 422          void fun20(void) //二级菜单F1-E1
 423          {
 424   1        tm1629_E(0x01);
 425   1      }
C51 COMPILER V9.00   TM1629                                                                09/05/2015 11:00:47 PAGE 8   

 426          
 427          void fun21(void) //二级菜单F1-E2
 428          {
 429   1        tm1629_E(0x02);
 430   1      }
 431          
 432          void fun22(void) //二级菜单F1-E3
 433          {
 434   1        tm1629_E(0x03);
 435   1      }
 436          
 437          void fun23(void) //二级菜单F1-E4
 438          {
 439   1        tm1629_E(0x04);
 440   1      }
 441          
 442          void fun24(void) //二级菜单F2-E1
 443          {
 444   1        tm1629_E(0x01);
 445   1      }
 446          
 447          void fun25(void) //二级菜单F2-E2
 448          {
 449   1        tm1629_E(0x02);
 450   1      }
 451          
 452          void fun26(void) //二级菜单F2-E3
 453          {
 454   1        tm1629_E(0x03);
 455   1      }
 456          
 457          void fun27(void) //二级菜单F2-E4
 458          {
 459   1        tm1629_E(0x04);
 460   1      }
 461          
 462          void fun28(void) //二级菜单F3-E1
 463          {
 464   1        tm1629_E(0x01);
 465   1      }
 466          
 467          void fun29(void) //二级菜单F3-E2
 468          {
 469   1        tm1629_E(0x02);
 470   1      }
 471          
 472          void fun30(void) //二级菜单F4
 473          {
 474   1        tm1629_f(0x0f);
 475   1      }
 476          
 477          void fun31(void) //二级菜单F5
 478          {
 479   1        tm1629_f(0x0f);
 480   1      }
 481          
 482          void fun32(void) //二级菜单F6-E1
 483          {
 484   1        tm1629_E(0x01);
 485   1      }
 486          
 487          void fun33(void) //二级菜单F6-E2
C51 COMPILER V9.00   TM1629                                                                09/05/2015 11:00:47 PAGE 9   

 488          {
 489   1        tm1629_E(0x02);
 490   1      }
 491          
 492          void fun34(void) //二级菜单F6-E3
 493          {
 494   1        tm1629_E(0x03);
 495   1      }
 496          
 497          void fun35(void) //二级菜单F6-E4
 498          {
 499   1        tm1629_E(0x04);
 500   1      }
 501          
 502          void fun36(void) //二级菜单F6-E5
 503          {
 504   1        tm1629_E(0x05);
 505   1      }
 506          
 507          void fun37(void) //二级菜单F7
 508          {
 509   1        tm1629_f(0x0f);
 510   1      }
 511          
 512          void fun38(void) //二级菜单F8
 513          {
 514   1        tm1629_f(0x0f);
 515   1      }
 516          
 517          void fun39(void) //二级菜单F9-E1
 518          {
 519   1        tm1629_E(0x01);
 520   1      }
 521          
 522          void fun40(void) //二级菜单F9-E2
 523          {
 524   1        tm1629_E(0x02);
 525   1      }
 526          
 527          void fun41(void) //二级菜单FA-E1
 528          {
 529   1        tm1629_E(0x01);
 530   1      }
 531          
 532          void fun42(void) //二级菜单FA-E2
 533          {
 534   1        tm1629_E(0x02);
 535   1      }
 536          
 537          void fun43(void) //二级菜单Fb
 538          {
 539   1        tm1629_f(0x0f);
 540   1      }
 541          
 542          void fun44(void) //二级菜单FC
 543          {
 544   1        tm1629_f(0x0f);
 545   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1298    ----
C51 COMPILER V9.00   TM1629                                                                09/05/2015 11:00:47 PAGE 10  

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    320       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
